
pacman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008644  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080087e4  080087e4  000097e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008928  08008928  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008928  08008928  00009928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008930  08008930  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008930  08008930  00009930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008934  08008934  00009934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008938  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000068  080089a0  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  080089a0  0000a628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013430  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a43  00000000  00000000  0001d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0001ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e86  00000000  00000000  00021180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194c2  00000000  00000000  00022006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a3b  00000000  00000000  0003b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ddf2  00000000  00000000  00051f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efcf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005820  00000000  00000000  000efd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f5558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080087cc 	.word	0x080087cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080087cc 	.word	0x080087cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD 0x4E // default address

// rs is 0 for commands
void lcd_send_cmd (char cmd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	2364      	movs	r3, #100	@ 0x64
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2304      	movs	r3, #4
 80005ba:	214e      	movs	r1, #78	@ 0x4e
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <lcd_send_cmd+0x5c>)
 80005be:	f003 f91f 	bl	8003800 <HAL_I2C_Master_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000012c 	.word	0x2000012c

080005d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f023 030f 	bic.w	r3, r3, #15
 80005e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	f043 030d 	orr.w	r3, r3, #13
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f043 0309 	orr.w	r3, r3, #9
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	f043 030d 	orr.w	r3, r3, #13
 8000602:	b2db      	uxtb	r3, r3
 8000604:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f043 0309 	orr.w	r3, r3, #9
 800060c:	b2db      	uxtb	r3, r3
 800060e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000610:	f107 0208 	add.w	r2, r7, #8
 8000614:	2364      	movs	r3, #100	@ 0x64
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2304      	movs	r3, #4
 800061a:	214e      	movs	r1, #78	@ 0x4e
 800061c:	4803      	ldr	r0, [pc, #12]	@ (800062c <lcd_send_data+0x5c>)
 800061e:	f003 f8ef 	bl	8003800 <HAL_I2C_Master_Transmit>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000012c 	.word	0x2000012c

08000630 <lcd_init>:

void lcd_init (void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 8000634:	2032      	movs	r0, #50	@ 0x32
 8000636:	f001 fbcf 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800063a:	2030      	movs	r0, #48	@ 0x30
 800063c:	f7ff ff98 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000640:	2005      	movs	r0, #5
 8000642:	f001 fbc9 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000646:	2030      	movs	r0, #48	@ 0x30
 8000648:	f7ff ff92 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800064c:	2001      	movs	r0, #1
 800064e:	f001 fbc3 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000652:	2030      	movs	r0, #48	@ 0x30
 8000654:	f7ff ff8c 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 8000658:	200a      	movs	r0, #10
 800065a:	f001 fbbd 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800065e:	2020      	movs	r0, #32
 8000660:	f7ff ff86 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 8000664:	200a      	movs	r0, #10
 8000666:	f001 fbb7 	bl	8001dd8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800066a:	2028      	movs	r0, #40	@ 0x28
 800066c:	f7ff ff80 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f001 fbb1 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000676:	2008      	movs	r0, #8
 8000678:	f7ff ff7a 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f001 fbab 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff74 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f001 fba5 	bl	8001dd8 <HAL_Delay>
	HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f001 fba2 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000694:	2006      	movs	r0, #6
 8000696:	f7ff ff6b 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f001 fb9c 	bl	8001dd8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006a0:	200c      	movs	r0, #12
 80006a2:	f7ff ff65 	bl	8000570 <lcd_send_cmd>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}

080006aa <lcd_cursor_pos>:

void lcd_cursor_pos (int row, int col) {
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	6039      	str	r1, [r7, #0]
	uint8_t address;
	if (row == 0) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <lcd_cursor_pos+0x16>
		address = col;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	e016      	b.n	80006ee <lcd_cursor_pos+0x44>
	}
	else if (row == 1) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d104      	bne.n	80006d0 <lcd_cursor_pos+0x26>
		address = 0x40 + col;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	3340      	adds	r3, #64	@ 0x40
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e00e      	b.n	80006ee <lcd_cursor_pos+0x44>
	}
	else if (row == 2) {
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d104      	bne.n	80006e0 <lcd_cursor_pos+0x36>
		address = 0x14 + col;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3314      	adds	r3, #20
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	e006      	b.n	80006ee <lcd_cursor_pos+0x44>
	}
	else if (row == 3) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d10b      	bne.n	80006fe <lcd_cursor_pos+0x54>
		address = 0x54 + col;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	3354      	adds	r3, #84	@ 0x54
 80006ec:	73fb      	strb	r3, [r7, #15]
	}
	else {
		return;
	}
	lcd_send_cmd(0x80 | address);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff3a 	bl	8000570 <lcd_send_cmd>
 80006fc:	e000      	b.n	8000700 <lcd_cursor_pos+0x56>
		return;
 80006fe:	bf00      	nop
}
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800070e:	e006      	b.n	800071e <lcd_send_string+0x18>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff59 	bl	80005d0 <lcd_send_data>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f4      	bne.n	8000710 <lcd_send_string+0xa>
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <lcd_clear_display>:

void lcd_clear_display (void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000736:	2080      	movs	r0, #128	@ 0x80
 8000738:	f7ff ff1a 	bl	8000570 <lcd_send_cmd>
	for (int i = 0; i < 70; i++) {
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e005      	b.n	800074e <lcd_clear_display+0x1e>
		lcd_send_data(' ');
 8000742:	2020      	movs	r0, #32
 8000744:	f7ff ff44 	bl	80005d0 <lcd_send_data>
	for (int i = 0; i < 70; i++) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3301      	adds	r3, #1
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b45      	cmp	r3, #69	@ 0x45
 8000752:	ddf6      	ble.n	8000742 <lcd_clear_display+0x12>
	}
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f001 fac5 	bl	8001cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f8e3 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 fb55 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000772:	f000 fb15 	bl	8000da0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000776:	f000 f9a7 	bl	8000ac8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800077a:	f000 fae7 	bl	8000d4c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800077e:	f000 f943 	bl	8000a08 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000782:	f000 f9cf 	bl	8000b24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000786:	f000 fa1b 	bl	8000bc0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800078a:	f000 fa91 	bl	8000cb0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  srand(time(NULL));
 800078e:	2000      	movs	r0, #0
 8000790:	f007 f954 	bl	8007a3c <time>
 8000794:	4602      	mov	r2, r0
 8000796:	460b      	mov	r3, r1
 8000798:	4613      	mov	r3, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f006 ffd4 	bl	8007748 <srand>

  // INITIALIZE THE DISPLAY
  lcd_init();
 80007a0:	f7ff ff46 	bl	8000630 <lcd_init>
  lcd_clear_display();
 80007a4:	f7ff ffc4 	bl	8000730 <lcd_clear_display>

  // CUSTOM CHARACTERS
  char pacman[] = {0x0E, 0x1F, 0x1F, 0x1E, 0x1C, 0x1E, 0x1F, 0x0E};
 80007a8:	4a52      	ldr	r2, [pc, #328]	@ (80008f4 <main+0x194>)
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b2:	e883 0003 	stmia.w	r3, {r0, r1}
  char inky[] = {0x0E, 0x1F, 0x15, 0x1F, 0x1F, 0x1F, 0x1F, 0x15};
 80007b6:	4a50      	ldr	r2, [pc, #320]	@ (80008f8 <main+0x198>)
 80007b8:	463b      	mov	r3, r7
 80007ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007be:	e883 0003 	stmia.w	r3, {r0, r1}

  // CUSTOM CHARACTERS ARE SENT TO THE CGRAM
  lcd_send_cmd(0x40);
 80007c2:	2040      	movs	r0, #64	@ 0x40
 80007c4:	f7ff fed4 	bl	8000570 <lcd_send_cmd>
  for (int i=0; i<8; i++) lcd_send_data(pacman[i]);
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00a      	b.n	80007e4 <main+0x84>
 80007ce:	f107 0208 	add.w	r2, r7, #8
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fef9 	bl	80005d0 <lcd_send_data>
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	2b07      	cmp	r3, #7
 80007e8:	ddf1      	ble.n	80007ce <main+0x6e>
  lcd_send_cmd(0x40+8);
 80007ea:	2048      	movs	r0, #72	@ 0x48
 80007ec:	f7ff fec0 	bl	8000570 <lcd_send_cmd>
  for (int i=0; i<8; i++) lcd_send_data(inky[i]);
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	e009      	b.n	800080a <main+0xaa>
 80007f6:	463a      	mov	r2, r7
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fee6 	bl	80005d0 <lcd_send_data>
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3301      	adds	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	2b07      	cmp	r3, #7
 800080e:	ddf2      	ble.n	80007f6 <main+0x96>

  pcm_game_init(&player, &enemy, &status);
 8000810:	4a3a      	ldr	r2, [pc, #232]	@ (80008fc <main+0x19c>)
 8000812:	493b      	ldr	r1, [pc, #236]	@ (8000900 <main+0x1a0>)
 8000814:	483b      	ldr	r0, [pc, #236]	@ (8000904 <main+0x1a4>)
 8000816:	f000 fced 	bl	80011f4 <pcm_game_init>

  HAL_ADC_Start_DMA(&hadc1, VR, 2);
 800081a:	2202      	movs	r2, #2
 800081c:	493a      	ldr	r1, [pc, #232]	@ (8000908 <main+0x1a8>)
 800081e:	483b      	ldr	r0, [pc, #236]	@ (800090c <main+0x1ac>)
 8000820:	f001 fc52 	bl	80020c8 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim2);
 8000824:	483a      	ldr	r0, [pc, #232]	@ (8000910 <main+0x1b0>)
 8000826:	f005 fcff 	bl	8006228 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800082a:	483a      	ldr	r0, [pc, #232]	@ (8000914 <main+0x1b4>)
 800082c:	f005 fcfc 	bl	8006228 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000830:	2100      	movs	r1, #0
 8000832:	4839      	ldr	r0, [pc, #228]	@ (8000918 <main+0x1b8>)
 8000834:	f005 fdb4 	bl	80063a0 <HAL_TIM_PWM_Start>

  // MAIN MENU SCREEN
  lcd_cursor_pos(1, 4);
 8000838:	2104      	movs	r1, #4
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ff35 	bl	80006aa <lcd_cursor_pos>
  lcd_send_string("PRESS SELECT");
 8000840:	4836      	ldr	r0, [pc, #216]	@ (800091c <main+0x1bc>)
 8000842:	f7ff ff60 	bl	8000706 <lcd_send_string>

  lcd_cursor_pos(2, 6);
 8000846:	2106      	movs	r1, #6
 8000848:	2002      	movs	r0, #2
 800084a:	f7ff ff2e 	bl	80006aa <lcd_cursor_pos>
  lcd_send_string("TO START");
 800084e:	4834      	ldr	r0, [pc, #208]	@ (8000920 <main+0x1c0>)
 8000850:	f7ff ff59 	bl	8000706 <lcd_send_string>

  while (1) {
	  if (HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET && status == menu) {
 8000854:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000858:	4832      	ldr	r0, [pc, #200]	@ (8000924 <main+0x1c4>)
 800085a:	f002 fe2d 	bl	80034b8 <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f7      	bne.n	8000854 <main+0xf4>
 8000864:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <main+0x19c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d000      	beq.n	800086e <main+0x10e>
 800086c:	e7f2      	b.n	8000854 <main+0xf4>
		  break;
 800086e:	bf00      	nop
	  }
  }

  status = in_progress;
 8000870:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <main+0x19c>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
  snd_start(&htim3, TIM_CHANNEL_1);
 8000876:	2100      	movs	r1, #0
 8000878:	4827      	ldr	r0, [pc, #156]	@ (8000918 <main+0x1b8>)
 800087a:	f000 fbf3 	bl	8001064 <snd_start>

    /* USER CODE BEGIN 3 */

	  // Current code uses four buttons to move
	  //Direction direction = joystick_direction(); // real time direction
	  pcm_check_status(&player, &enemy, &status);
 800087e:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <main+0x19c>)
 8000880:	491f      	ldr	r1, [pc, #124]	@ (8000900 <main+0x1a0>)
 8000882:	4820      	ldr	r0, [pc, #128]	@ (8000904 <main+0x1a4>)
 8000884:	f000 fe29 	bl	80014da <pcm_check_status>
	  if (status == in_progress && update_display_flag == 1) {
 8000888:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <main+0x19c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10a      	bne.n	80008a6 <main+0x146>
 8000890:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <main+0x1c8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d106      	bne.n	80008a6 <main+0x146>
		  pcm_display_game(&player, &enemy);
 8000898:	4919      	ldr	r1, [pc, #100]	@ (8000900 <main+0x1a0>)
 800089a:	481a      	ldr	r0, [pc, #104]	@ (8000904 <main+0x1a4>)
 800089c:	f000 fd07 	bl	80012ae <pcm_display_game>
		  update_display_flag = 0;
 80008a0:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <main+0x1c8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
	  }
	  if (status == win) {
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <main+0x19c>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d10e      	bne.n	80008cc <main+0x16c>
		  lcd_clear_display();
 80008ae:	f7ff ff3f 	bl	8000730 <lcd_clear_display>
		  lcd_cursor_pos(0, 0);
 80008b2:	2100      	movs	r1, #0
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fef8 	bl	80006aa <lcd_cursor_pos>
		  lcd_send_string("YOU WIN!");
 80008ba:	481c      	ldr	r0, [pc, #112]	@ (800092c <main+0x1cc>)
 80008bc:	f7ff ff23 	bl	8000706 <lcd_send_string>
		  snd_win(&htim3, TIM_CHANNEL_1);
 80008c0:	2100      	movs	r1, #0
 80008c2:	4815      	ldr	r0, [pc, #84]	@ (8000918 <main+0x1b8>)
 80008c4:	f000 fc12 	bl	80010ec <snd_win>
		  while (1){}
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <main+0x168>
	  }
	  if (status == over) {
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <main+0x19c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d1d4      	bne.n	800087e <main+0x11e>
		  lcd_clear_display();
 80008d4:	f7ff ff2c 	bl	8000730 <lcd_clear_display>
		  lcd_cursor_pos(0, 0);
 80008d8:	2100      	movs	r1, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff fee5 	bl	80006aa <lcd_cursor_pos>
		  lcd_send_string("GAME OVER!");
 80008e0:	4813      	ldr	r0, [pc, #76]	@ (8000930 <main+0x1d0>)
 80008e2:	f7ff ff10 	bl	8000706 <lcd_send_string>
		  snd_lose(&htim3, TIM_CHANNEL_1);
 80008e6:	2100      	movs	r1, #0
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <main+0x1b8>)
 80008ea:	f000 fc31 	bl	8001150 <snd_lose>
		  while (1){}
 80008ee:	bf00      	nop
 80008f0:	e7fd      	b.n	80008ee <main+0x18e>
 80008f2:	bf00      	nop
 80008f4:	08008818 	.word	0x08008818
 80008f8:	08008820 	.word	0x08008820
 80008fc:	200004c8 	.word	0x200004c8
 8000900:	200004bc 	.word	0x200004bc
 8000904:	2000036c 	.word	0x2000036c
 8000908:	20000360 	.word	0x20000360
 800090c:	20000084 	.word	0x20000084
 8000910:	20000240 	.word	0x20000240
 8000914:	200002d0 	.word	0x200002d0
 8000918:	20000288 	.word	0x20000288
 800091c:	080087e4 	.word	0x080087e4
 8000920:	080087f4 	.word	0x080087f4
 8000924:	40020800 	.word	0x40020800
 8000928:	200004cc 	.word	0x200004cc
 800092c:	08008800 	.word	0x08008800
 8000930:	0800880c 	.word	0x0800880c

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	@ 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	2230      	movs	r2, #48	@ 0x30
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f007 f871 	bl	8007a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	4a27      	ldr	r2, [pc, #156]	@ (8000a00 <SystemClock_Config+0xcc>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	@ 0x40
 8000968:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <SystemClock_Config+0xcc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	4b22      	ldr	r3, [pc, #136]	@ (8000a04 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000980:	4a20      	ldr	r2, [pc, #128]	@ (8000a04 <SystemClock_Config+0xd0>)
 8000982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2310      	movs	r3, #16
 800099e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a8:	2308      	movs	r3, #8
 80009aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80009ac:	2354      	movs	r3, #84	@ 0x54
 80009ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b4:	2307      	movs	r3, #7
 80009b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4618      	mov	r0, r3
 80009be:	f004 ff4b 	bl	8005858 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c8:	f000 fc0e 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	230f      	movs	r3, #15
 80009ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	2102      	movs	r1, #2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f005 f9ad 	bl	8005d48 <HAL_RCC_ClockConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009f4:	f000 fbf8 	bl	80011e8 <Error_Handler>
  }
}
 80009f8:	bf00      	nop
 80009fa:	3750      	adds	r7, #80	@ 0x50
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a1a:	4b28      	ldr	r3, [pc, #160]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a1c:	4a28      	ldr	r2, [pc, #160]	@ (8000ac0 <MX_ADC1_Init+0xb8>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a20:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a28:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a2e:	4b23      	ldr	r3, [pc, #140]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a34:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a3a:	4b20      	ldr	r3, [pc, #128]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <MX_ADC1_Init+0xbc>)
 8000a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a68:	4814      	ldr	r0, [pc, #80]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a6a:	f001 f9d9 	bl	8001e20 <HAL_ADC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a74:	f000 fbb8 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a78:	230a      	movs	r3, #10
 8000a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000a80:	2304      	movs	r3, #4
 8000a82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000a8a:	f001 fc35 	bl	80022f8 <HAL_ADC_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a94:	f000 fba8 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a98:	230b      	movs	r3, #11
 8000a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_ADC1_Init+0xb4>)
 8000aa6:	f001 fc27 	bl	80022f8 <HAL_ADC_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ab0:	f000 fb9a 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000084 	.word	0x20000084
 8000ac0:	40012000 	.word	0x40012000
 8000ac4:	0f000001 	.word	0x0f000001

08000ac8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ace:	4a13      	ldr	r2, [pc, #76]	@ (8000b1c <MX_I2C1_Init+0x54>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ad4:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_I2C1_Init+0x58>)
 8000ad6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000ae6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_I2C1_Init+0x50>)
 8000b06:	f002 fd21 	bl	800354c <HAL_I2C_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b10:	f000 fb6a 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000012c 	.word	0x2000012c
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	000186a0 	.word	0x000186a0

08000b24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_TIM2_Init+0x94>)
 8000b42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <MX_TIM2_Init+0x94>)
 8000b4a:	f240 3247 	movw	r2, #839	@ 0x347
 8000b4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_TIM2_Init+0x94>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_TIM2_Init+0x94>)
 8000b58:	4a18      	ldr	r2, [pc, #96]	@ (8000bbc <MX_TIM2_Init+0x98>)
 8000b5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_TIM2_Init+0x94>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_TIM2_Init+0x94>)
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b68:	4813      	ldr	r0, [pc, #76]	@ (8000bb8 <MX_TIM2_Init+0x94>)
 8000b6a:	f005 fb0d 	bl	8006188 <HAL_TIM_Base_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b74:	f000 fb38 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4619      	mov	r1, r3
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_TIM2_Init+0x94>)
 8000b86:	f005 fed1 	bl	800692c <HAL_TIM_ConfigClockSource>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b90:	f000 fb2a 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_TIM2_Init+0x94>)
 8000ba2:	f006 fa8b 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 fb1c 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000240 	.word	0x20000240
 8000bbc:	0001869f 	.word	0x0001869f

08000bc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	@ 0x38
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	615a      	str	r2, [r3, #20]
 8000bee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8000cac <MX_TIM3_Init+0xec>)
 8000bf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000c02:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c12:	2280      	movs	r2, #128	@ 0x80
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c16:	4824      	ldr	r0, [pc, #144]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c18:	f005 fab6 	bl	8006188 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c22:	f000 fae1 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c30:	4619      	mov	r1, r3
 8000c32:	481d      	ldr	r0, [pc, #116]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c34:	f005 fe7a 	bl	800692c <HAL_TIM_ConfigClockSource>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c3e:	f000 fad3 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c42:	4819      	ldr	r0, [pc, #100]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c44:	f005 fb52 	bl	80062ec <HAL_TIM_PWM_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c4e:	f000 facb 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4811      	ldr	r0, [pc, #68]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c62:	f006 fa2b 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c6c:	f000 fabc 	bl	80011e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c70:	2360      	movs	r3, #96	@ 0x60
 8000c72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000c74:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000c78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	4619      	mov	r1, r3
 8000c88:	4807      	ldr	r0, [pc, #28]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c8a:	f005 fd8d 	bl	80067a8 <HAL_TIM_PWM_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c94:	f000 faa8 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c98:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <MX_TIM3_Init+0xe8>)
 8000c9a:	f000 fe0b 	bl	80018b4 <HAL_TIM_MspPostInit>

}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	@ 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000288 	.word	0x20000288
 8000cac:	40000400 	.word	0x40000400

08000cb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <MX_TIM4_Init+0x94>)
 8000cce:	4a1e      	ldr	r2, [pc, #120]	@ (8000d48 <MX_TIM4_Init+0x98>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 839;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_TIM4_Init+0x94>)
 8000cd4:	f240 3247 	movw	r2, #839	@ 0x347
 8000cd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_TIM4_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_TIM4_Init+0x94>)
 8000ce2:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000ce6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <MX_TIM4_Init+0x94>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_TIM4_Init+0x94>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cf4:	4813      	ldr	r0, [pc, #76]	@ (8000d44 <MX_TIM4_Init+0x94>)
 8000cf6:	f005 fa47 	bl	8006188 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000d00:	f000 fa72 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <MX_TIM4_Init+0x94>)
 8000d12:	f005 fe0b 	bl	800692c <HAL_TIM_ConfigClockSource>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000d1c:	f000 fa64 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_TIM4_Init+0x94>)
 8000d2e:	f006 f9c5 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d38:	f000 fa56 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200002d0 	.word	0x200002d0
 8000d48:	40000800 	.word	0x40000800

08000d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <MX_USART2_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f006 fa1c 	bl	80071c0 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f000 fa2b 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000318 	.word	0x20000318
 8000d9c:	40004400 	.word	0x40004400

08000da0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_DMA_Init+0x78>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a1a      	ldr	r2, [pc, #104]	@ (8000e18 <MX_DMA_Init+0x78>)
 8000db0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <MX_DMA_Init+0x78>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <MX_DMA_Init+0x78>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a13      	ldr	r2, [pc, #76]	@ (8000e18 <MX_DMA_Init+0x78>)
 8000dcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <MX_DMA_Init+0x78>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	200b      	movs	r0, #11
 8000de4:	f001 fe0d 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000de8:	200b      	movs	r0, #11
 8000dea:	f001 fe26 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2011      	movs	r0, #17
 8000df4:	f001 fe05 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000df8:	2011      	movs	r0, #17
 8000dfa:	f001 fe1e 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2038      	movs	r0, #56	@ 0x38
 8000e04:	f001 fdfd 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e08:	2038      	movs	r0, #56	@ 0x38
 8000e0a:	f001 fe16 	bl	8002a3a <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b49      	ldr	r3, [pc, #292]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a48      	ldr	r2, [pc, #288]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b46      	ldr	r3, [pc, #280]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b42      	ldr	r3, [pc, #264]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a41      	ldr	r2, [pc, #260]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a3a      	ldr	r2, [pc, #232]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b34      	ldr	r3, [pc, #208]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a33      	ldr	r2, [pc, #204]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b31      	ldr	r3, [pc, #196]	@ (8000f5c <MX_GPIO_Init+0x140>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	482e      	ldr	r0, [pc, #184]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000ea8:	f002 fb1e 	bl	80034e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000eb2:	482c      	ldr	r0, [pc, #176]	@ (8000f64 <MX_GPIO_Init+0x148>)
 8000eb4:	f002 fb18 	bl	80034e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ebe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4825      	ldr	r0, [pc, #148]	@ (8000f64 <MX_GPIO_Init+0x148>)
 8000ed0:	f002 f96e 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	481d      	ldr	r0, [pc, #116]	@ (8000f60 <MX_GPIO_Init+0x144>)
 8000eec:	f002 f960 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000ef0:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4817      	ldr	r0, [pc, #92]	@ (8000f64 <MX_GPIO_Init+0x148>)
 8000f08:	f002 f952 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_5;
 8000f0c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <MX_GPIO_Init+0x14c>)
 8000f22:	f002 f945 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000f26:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4809      	ldr	r0, [pc, #36]	@ (8000f64 <MX_GPIO_Init+0x148>)
 8000f40:	f002 f936 	bl	80031b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2017      	movs	r0, #23
 8000f4a:	f001 fd5a 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f4e:	2017      	movs	r0, #23
 8000f50:	f001 fd73 	bl	8002a3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	@ 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020400 	.word	0x40020400

08000f6c <HAL_GPIO_EXTI_Callback>:
		return down;
	}
	return none;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_interrupt_time = 0;
	uint32_t current_time = HAL_GetTick();
 8000f76:	f000 ff23 	bl	8001dc0 <HAL_GetTick>
 8000f7a:	60f8      	str	r0, [r7, #12]

	if (current_time - last_interrupt_time < 50) {
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <HAL_GPIO_EXTI_Callback+0x90>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b31      	cmp	r3, #49	@ 0x31
 8000f86:	d934      	bls.n	8000ff2 <HAL_GPIO_EXTI_Callback+0x86>
		return;
	}

	last_interrupt_time = current_time;
 8000f88:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <HAL_GPIO_EXTI_Callback+0x90>)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6013      	str	r3, [r2, #0]

	switch (GPIO_Pin) {
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_EXTI_Callback+0x46>
 8000f96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f9a:	dc2b      	bgt.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x88>
 8000f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fa0:	d00f      	beq.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x56>
 8000fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fa6:	dc25      	bgt.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x88>
 8000fa8:	2b20      	cmp	r3, #32
 8000faa:	d01a      	beq.n	8000fe2 <HAL_GPIO_EXTI_Callback+0x76>
 8000fac:	2b40      	cmp	r3, #64	@ 0x40
 8000fae:	d010      	beq.n	8000fd2 <HAL_GPIO_EXTI_Callback+0x66>
 8000fb0:	e020      	b.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x88>
		case GPIO_PIN_9:
			pcm_move_player(&player, left); //if (pcm_move_player(&player, left) == 1) snd_eat(&htim3, TIM_CHANNEL_1);
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4812      	ldr	r0, [pc, #72]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fb6:	f000 f9d1 	bl	800135c <pcm_move_player>
			update_display_flag = 1;
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_GPIO_EXTI_Callback+0x98>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
			break;
 8000fc0:	e018      	b.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x88>
		case GPIO_PIN_8:
			pcm_move_player(&player, up); //if (pcm_move_player(&player, up) == 1) snd_eat(&htim3, TIM_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	480e      	ldr	r0, [pc, #56]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fc6:	f000 f9c9 	bl	800135c <pcm_move_player>
			update_display_flag = 1;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_GPIO_EXTI_Callback+0x98>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
			break;
 8000fd0:	e010      	b.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x88>
		case GPIO_PIN_6:
			pcm_move_player(&player, down); //if (pcm_move_player(&player, down) == 1) snd_eat(&htim3, TIM_CHANNEL_1);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	480a      	ldr	r0, [pc, #40]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fd6:	f000 f9c1 	bl	800135c <pcm_move_player>
			update_display_flag = 1;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <HAL_GPIO_EXTI_Callback+0x98>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
			break;
 8000fe0:	e008      	b.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x88>
		case GPIO_PIN_5:
			pcm_move_player(&player, right); //if (pcm_move_player(&player, right) == 1) snd_eat(&htim3, TIM_CHANNEL_1);
 8000fe2:	2103      	movs	r1, #3
 8000fe4:	4806      	ldr	r0, [pc, #24]	@ (8001000 <HAL_GPIO_EXTI_Callback+0x94>)
 8000fe6:	f000 f9b9 	bl	800135c <pcm_move_player>
			update_display_flag = 1;
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_GPIO_EXTI_Callback+0x98>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
			break;
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x88>
		return;
 8000ff2:	bf00      	nop
		}
	}
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200004d0 	.word	0x200004d0
 8001000:	2000036c 	.word	0x2000036c
 8001004:	200004cc 	.word	0x200004cc

08001008 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d102      	bne.n	8001020 <HAL_TIM_PeriodElapsedCallback+0x18>
		update_display_flag = 1;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
	}
	if (htim->Instance == TIM2) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001028:	d10d      	bne.n	8001046 <HAL_TIM_PeriodElapsedCallback+0x3e>
		clock_flag ^= 0x01;
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f083 0301 	eor.w	r3, r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001036:	701a      	strb	r2, [r3, #0]
		pcm_move_enemy(&player, &enemy, clock_flag);
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4907      	ldr	r1, [pc, #28]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001040:	4807      	ldr	r0, [pc, #28]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001042:	f000 fa07 	bl	8001454 <pcm_move_enemy>
		//update_display_flag = 1;
	}
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40000800 	.word	0x40000800
 8001054:	200004cc 	.word	0x200004cc
 8001058:	20000368 	.word	0x20000368
 800105c:	200004bc 	.word	0x200004bc
 8001060:	2000036c 	.word	0x2000036c

08001064 <snd_start>:

void snd_start (TIM_HandleTypeDef *htim, uint32_t tim_channel) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(1000));
 800106e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001072:	f000 f89f 	bl	80011b4 <presForFrequency>
 8001076:	4602      	mov	r2, r0
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 800107e:	20fa      	movs	r0, #250	@ 0xfa
 8001080:	f000 feaa 	bl	8001dd8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(3000));
 8001084:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001088:	f000 f894 	bl	80011b4 <presForFrequency>
 800108c:	4602      	mov	r2, r0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 8001094:	20fa      	movs	r0, #250	@ 0xfa
 8001096:	f000 fe9f 	bl	8001dd8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(6000));
 800109a:	f241 7070 	movw	r0, #6000	@ 0x1770
 800109e:	f000 f889 	bl	80011b4 <presForFrequency>
 80010a2:	4602      	mov	r2, r0
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 80010aa:	20fa      	movs	r0, #250	@ 0xfa
 80010ac:	f000 fe94 	bl	8001dd8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(9000));
 80010b0:	f242 3028 	movw	r0, #9000	@ 0x2328
 80010b4:	f000 f87e 	bl	80011b4 <presForFrequency>
 80010b8:	4602      	mov	r2, r0
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 80010c0:	20fa      	movs	r0, #250	@ 0xfa
 80010c2:	f000 fe89 	bl	8001dd8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(12000));
 80010c6:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 80010ca:	f000 f873 	bl	80011b4 <presForFrequency>
 80010ce:	4602      	mov	r2, r0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 80010d6:	20fa      	movs	r0, #250	@ 0xfa
 80010d8:	f000 fe7e 	bl	8001dd8 <HAL_Delay>
	HAL_TIM_PWM_Stop(htim, tim_channel);
 80010dc:	6839      	ldr	r1, [r7, #0]
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f005 fa0e 	bl	8006500 <HAL_TIM_PWM_Stop>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <snd_win>:
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(1000));
	HAL_Delay(250);
	HAL_TIM_PWM_Stop(htim, tim_channel);
}

void snd_win (TIM_HandleTypeDef *htim, uint32_t tim_channel) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80010f6:	2100      	movs	r1, #0
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f005 f951 	bl	80063a0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(3000));
 80010fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001102:	f000 f857 	bl	80011b4 <presForFrequency>
 8001106:	4602      	mov	r2, r0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 800110e:	20fa      	movs	r0, #250	@ 0xfa
 8001110:	f000 fe62 	bl	8001dd8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(1000));
 8001114:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001118:	f000 f84c 	bl	80011b4 <presForFrequency>
 800111c:	4602      	mov	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 8001124:	20fa      	movs	r0, #250	@ 0xfa
 8001126:	f000 fe57 	bl	8001dd8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(6000));
 800112a:	f241 7070 	movw	r0, #6000	@ 0x1770
 800112e:	f000 f841 	bl	80011b4 <presForFrequency>
 8001132:	4602      	mov	r2, r0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 800113a:	20fa      	movs	r0, #250	@ 0xfa
 800113c:	f000 fe4c 	bl	8001dd8 <HAL_Delay>
	HAL_TIM_PWM_Stop(htim, tim_channel);
 8001140:	6839      	ldr	r1, [r7, #0]
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f005 f9dc 	bl	8006500 <HAL_TIM_PWM_Stop>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <snd_lose>:

void snd_lose (TIM_HandleTypeDef *htim, uint32_t tim_channel) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, tim_channel);
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f005 f91f 	bl	80063a0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(6000));
 8001162:	f241 7070 	movw	r0, #6000	@ 0x1770
 8001166:	f000 f825 	bl	80011b4 <presForFrequency>
 800116a:	4602      	mov	r2, r0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 8001172:	20fa      	movs	r0, #250	@ 0xfa
 8001174:	f000 fe30 	bl	8001dd8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(3000));
 8001178:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800117c:	f000 f81a 	bl	80011b4 <presForFrequency>
 8001180:	4602      	mov	r2, r0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 8001188:	20fa      	movs	r0, #250	@ 0xfa
 800118a:	f000 fe25 	bl	8001dd8 <HAL_Delay>
	__HAL_TIM_SET_PRESCALER(htim, presForFrequency(1000));
 800118e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001192:	f000 f80f 	bl	80011b4 <presForFrequency>
 8001196:	4602      	mov	r2, r0
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(250);
 800119e:	20fa      	movs	r0, #250	@ 0xfa
 80011a0:	f000 fe1a 	bl	8001dd8 <HAL_Delay>
	HAL_TIM_PWM_Stop(htim, tim_channel);
 80011a4:	6839      	ldr	r1, [r7, #0]
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f005 f9aa 	bl	8006500 <HAL_TIM_PWM_Stop>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <presForFrequency>:

int presForFrequency (int frequency)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	if (frequency == 0) return 0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <presForFrequency+0x12>
 80011c2:	2300      	movs	r3, #0
 80011c4:	e008      	b.n	80011d8 <presForFrequency+0x24>
	return ((TIM_FREQ/(1000*frequency))-1);  // 1 is added in the register
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <presForFrequency+0x30>)
 80011d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80011d6:	3b01      	subs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	0501bd00 	.word	0x0501bd00

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <pcm_game_init>:

#define width 20
#define height 4
#define TIM_FREQ 84000000

void pcm_game_init (Player * player, Enemy * enemy, Game_status * status) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
	// Player initialization
	player->row = 0;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
	player->col = 0;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
	player->food = 0;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
	player->total_food = 0;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]

	// Populate the food location array
	for (int i = 1; i < 4; i++) {
 8001218:	2301      	movs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e035      	b.n	800128a <pcm_game_init+0x96>
		for (int j = 1; j < 20; j++) {
 800121e:	2301      	movs	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	e02c      	b.n	800127e <pcm_game_init+0x8a>
			if (rand() % 4 == 1) {
 8001224:	f006 fabe 	bl	80077a4 <rand>
 8001228:	4603      	mov	r3, r0
 800122a:	425a      	negs	r2, r3
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	f002 0203 	and.w	r2, r2, #3
 8001234:	bf58      	it	pl
 8001236:	4253      	negpl	r3, r2
 8001238:	2b01      	cmp	r3, #1
 800123a:	d111      	bne.n	8001260 <pcm_game_init+0x6c>
				player->food_locations[i][j] = 1;
 800123c:	68f9      	ldr	r1, [r7, #12]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4413      	add	r3, r2
 800124c:	3304      	adds	r3, #4
 800124e:	2201      	movs	r2, #1
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				player->total_food += 1;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	e00b      	b.n	8001278 <pcm_game_init+0x84>
			}
			else {
				player->food_locations[i][j] = 0;
 8001260:	68f9      	ldr	r1, [r7, #12]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4413      	add	r3, r2
 8001270:	3304      	adds	r3, #4
 8001272:	2200      	movs	r2, #0
 8001274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 1; j < 20; j++) {
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	3301      	adds	r3, #1
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	2b13      	cmp	r3, #19
 8001282:	ddcf      	ble.n	8001224 <pcm_game_init+0x30>
	for (int i = 1; i < 4; i++) {
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b03      	cmp	r3, #3
 800128e:	ddc6      	ble.n	800121e <pcm_game_init+0x2a>
			}
		}
	}

	// Enemy Initialization
	enemy->row = 3;
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2203      	movs	r2, #3
 8001294:	601a      	str	r2, [r3, #0]
	enemy->col = 5;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2205      	movs	r2, #5
 800129a:	605a      	str	r2, [r3, #4]
	enemy->clock_before = 0;
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2200      	movs	r2, #0
 80012a0:	721a      	strb	r2, [r3, #8]

	// Game status
	status = menu;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <pcm_display_game>:

void pcm_display_game (Player * player, Enemy * enemy) {
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
	lcd_clear_display();
 80012b8:	f7ff fa3a 	bl	8000730 <lcd_clear_display>
	for (int col = 9; col <= 19; col++) {
 80012bc:	2309      	movs	r3, #9
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e009      	b.n	80012d6 <pcm_display_game+0x28>
		lcd_cursor_pos(3, col);
 80012c2:	6979      	ldr	r1, [r7, #20]
 80012c4:	2003      	movs	r0, #3
 80012c6:	f7ff f9f0 	bl	80006aa <lcd_cursor_pos>
		lcd_send_data(' ');
 80012ca:	2020      	movs	r0, #32
 80012cc:	f7ff f980 	bl	80005d0 <lcd_send_data>
	for (int col = 9; col <= 19; col++) {
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2b13      	cmp	r3, #19
 80012da:	ddf2      	ble.n	80012c2 <pcm_display_game+0x14>
	}

	// Print the food
	for (int i = 0; i < 4; i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e01f      	b.n	8001322 <pcm_display_game+0x74>
		for (int j = 0; j < 20; j++) {
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e016      	b.n	8001316 <pcm_display_game+0x68>
			if (player->food_locations[i][j] == 1) {
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	3304      	adds	r3, #4
 80012fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <pcm_display_game+0x62>
				lcd_cursor_pos(i, j);
 8001302:	68f9      	ldr	r1, [r7, #12]
 8001304:	6938      	ldr	r0, [r7, #16]
 8001306:	f7ff f9d0 	bl	80006aa <lcd_cursor_pos>
				lcd_send_data(0xa5); // this is not a custom character
 800130a:	20a5      	movs	r0, #165	@ 0xa5
 800130c:	f7ff f960 	bl	80005d0 <lcd_send_data>
		for (int j = 0; j < 20; j++) {
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3301      	adds	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b13      	cmp	r3, #19
 800131a:	dde5      	ble.n	80012e8 <pcm_display_game+0x3a>
	for (int i = 0; i < 4; i++) {
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	3301      	adds	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	2b03      	cmp	r3, #3
 8001326:	dddc      	ble.n	80012e2 <pcm_display_game+0x34>
			}
		}
	}

	// Print the player
	lcd_cursor_pos(player->row, player->col);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4619      	mov	r1, r3
 8001332:	4610      	mov	r0, r2
 8001334:	f7ff f9b9 	bl	80006aa <lcd_cursor_pos>
	lcd_send_data(0);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff f949 	bl	80005d0 <lcd_send_data>

	// Print the enemy
	lcd_cursor_pos(enemy->row, enemy->col);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f7ff f9ae 	bl	80006aa <lcd_cursor_pos>
	lcd_send_data(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff f93e 	bl	80005d0 <lcd_send_data>
}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <pcm_move_player>:
	// Print the enemy
	lcd_cursor_pos(enemy->row, enemy->col);
	lcd_send_data(1);
}

int pcm_move_player (Player * player, Direction direction) {
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	70fb      	strb	r3, [r7, #3]
    // First, calculate the new position of the player
	switch (direction) {
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	2b04      	cmp	r3, #4
 800136c:	d847      	bhi.n	80013fe <pcm_move_player+0xa2>
 800136e:	a201      	add	r2, pc, #4	@ (adr r2, 8001374 <pcm_move_player+0x18>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	08001389 	.word	0x08001389
 8001378:	080013a3 	.word	0x080013a3
 800137c:	080013bd 	.word	0x080013bd
 8001380:	080013d7 	.word	0x080013d7
 8001384:	080013ff 	.word	0x080013ff
		case up:
			player->row -= 1;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	601a      	str	r2, [r3, #0]
			if (player->row < 0) player->row = 0;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	da2a      	bge.n	80013f0 <pcm_move_player+0x94>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
			break;
 80013a0:	e026      	b.n	80013f0 <pcm_move_player+0x94>
		case down:
			player->row += 1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	601a      	str	r2, [r3, #0]
			if (player->row > 3) player->row = 3;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	dd1f      	ble.n	80013f4 <pcm_move_player+0x98>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2203      	movs	r2, #3
 80013b8:	601a      	str	r2, [r3, #0]
			break;
 80013ba:	e01b      	b.n	80013f4 <pcm_move_player+0x98>
		case left:
			player->col -= 1;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	605a      	str	r2, [r3, #4]
			if (player->col < 0) player->col = 0;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	da14      	bge.n	80013f8 <pcm_move_player+0x9c>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
			break;
 80013d4:	e010      	b.n	80013f8 <pcm_move_player+0x9c>
		case right:
			player->col += 1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	605a      	str	r2, [r3, #4]
			if (player->col > 19) player->col = 19;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b13      	cmp	r3, #19
 80013e6:	dd09      	ble.n	80013fc <pcm_move_player+0xa0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2213      	movs	r2, #19
 80013ec:	605a      	str	r2, [r3, #4]
			break;
 80013ee:	e005      	b.n	80013fc <pcm_move_player+0xa0>
			break;
 80013f0:	bf00      	nop
 80013f2:	e004      	b.n	80013fe <pcm_move_player+0xa2>
			break;
 80013f4:	bf00      	nop
 80013f6:	e002      	b.n	80013fe <pcm_move_player+0xa2>
			break;
 80013f8:	bf00      	nop
 80013fa:	e000      	b.n	80013fe <pcm_move_player+0xa2>
			break;
 80013fc:	bf00      	nop
		case none:
			break;
	}

	// Second, check if there is food in that new position
	if (player->food_locations[player->row][player->col] == 1) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6858      	ldr	r0, [r3, #4]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4403      	add	r3, r0
 8001412:	3304      	adds	r3, #4
 8001414:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d114      	bne.n	8001446 <pcm_move_player+0xea>
		player->food += 1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	609a      	str	r2, [r3, #8]
		player->food_locations[player->row][player->col] = 0;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6858      	ldr	r0, [r3, #4]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4403      	add	r3, r0
 800143a:	3304      	adds	r3, #4
 800143c:	2200      	movs	r2, #0
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return 1;
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <pcm_move_player+0xec>
	}
	return 0;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <pcm_move_enemy>:

void pcm_move_enemy (Player * player, Enemy * enemy, uint8_t pulse) {
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	4613      	mov	r3, r2
 8001460:	71fb      	strb	r3, [r7, #7]
	// The pulse makes sure that the enemy only moves once when the pulse changes
	// The logic here is to follow the player
	if (enemy->clock_before == 0 && pulse == 1) {
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	7a1b      	ldrb	r3, [r3, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d131      	bne.n	80014ce <pcm_move_enemy+0x7a>
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d12e      	bne.n	80014ce <pcm_move_enemy+0x7a>
		if (player->row != enemy->row) {
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d011      	beq.n	80014a0 <pcm_move_enemy+0x4c>
				if (player->row < enemy->row) {
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	da05      	bge.n	8001494 <pcm_move_enemy+0x40>
					enemy->row -= 1;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	1e5a      	subs	r2, r3, #1
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	601a      	str	r2, [r3, #0]
					}
				}
			}
		//pcm_display_enemy(enemy);
	}
}
 8001492:	e01c      	b.n	80014ce <pcm_move_enemy+0x7a>
					enemy->row += 1;
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	e016      	b.n	80014ce <pcm_move_enemy+0x7a>
				if (player->col != enemy->col) {
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d010      	beq.n	80014ce <pcm_move_enemy+0x7a>
					if (player->col < enemy->col) {
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	da05      	bge.n	80014c4 <pcm_move_enemy+0x70>
						enemy->col -= 1;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	605a      	str	r2, [r3, #4]
}
 80014c2:	e004      	b.n	80014ce <pcm_move_enemy+0x7a>
						enemy->col += 1;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	605a      	str	r2, [r3, #4]
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <pcm_check_status>:

void pcm_check_status (Player * player, Enemy * enemy, Game_status * status) {
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
	if (player->row == enemy->row && player->col == enemy->col) {
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d109      	bne.n	8001506 <pcm_check_status+0x2c>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d103      	bne.n	8001506 <pcm_check_status+0x2c>
		*status = over;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2202      	movs	r2, #2
 8001502:	701a      	strb	r2, [r3, #0]
	}
	else if (player->food == player->total_food) {
		*status = win;
	}
}
 8001504:	e008      	b.n	8001518 <pcm_check_status+0x3e>
	else if (player->food == player->total_food) {
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	429a      	cmp	r2, r3
 8001510:	d102      	bne.n	8001518 <pcm_check_status+0x3e>
		*status = win;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2203      	movs	r2, #3
 8001516:	701a      	strb	r2, [r3, #0]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <HAL_MspInit+0x4c>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001538:	6453      	str	r3, [r2, #68]	@ 0x44
 800153a:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_MspInit+0x4c>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001562:	2007      	movs	r0, #7
 8001564:	f001 fa42 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	@ 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a33      	ldr	r2, [pc, #204]	@ (8001660 <HAL_ADC_MspInit+0xec>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d15f      	bne.n	8001656 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b32      	ldr	r3, [pc, #200]	@ (8001664 <HAL_ADC_MspInit+0xf0>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	4a31      	ldr	r2, [pc, #196]	@ (8001664 <HAL_ADC_MspInit+0xf0>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001664 <HAL_ADC_MspInit+0xf0>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <HAL_ADC_MspInit+0xf0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001664 <HAL_ADC_MspInit+0xf0>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <HAL_ADC_MspInit+0xf0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ce:	2303      	movs	r3, #3
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4821      	ldr	r0, [pc, #132]	@ (8001668 <HAL_ADC_MspInit+0xf4>)
 80015e2:	f001 fde5 	bl	80031b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015e6:	4b21      	ldr	r3, [pc, #132]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 80015e8:	4a21      	ldr	r2, [pc, #132]	@ (8001670 <HAL_ADC_MspInit+0xfc>)
 80015ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f2:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f8:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015fe:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 8001600:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001604:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 8001608:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800160c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800160e:	4b17      	ldr	r3, [pc, #92]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 8001610:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001614:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 8001618:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800161c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800161e:	4b13      	ldr	r3, [pc, #76]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800162a:	4810      	ldr	r0, [pc, #64]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 800162c:	f001 fa20 	bl	8002a70 <HAL_DMA_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001636:	f7ff fdd7 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a0b      	ldr	r2, [pc, #44]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 800163e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001640:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <HAL_ADC_MspInit+0xf8>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2012      	movs	r0, #18
 800164c:	f001 f9d9 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001650:	2012      	movs	r0, #18
 8001652:	f001 f9f2 	bl	8002a3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	@ 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40012000 	.word	0x40012000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020800 	.word	0x40020800
 800166c:	200000cc 	.word	0x200000cc
 8001670:	40026410 	.word	0x40026410

08001674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a50      	ldr	r2, [pc, #320]	@ (80017d4 <HAL_I2C_MspInit+0x160>)
 8001692:	4293      	cmp	r3, r2
 8001694:	f040 8099 	bne.w	80017ca <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	4b4e      	ldr	r3, [pc, #312]	@ (80017d8 <HAL_I2C_MspInit+0x164>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	4a4d      	ldr	r2, [pc, #308]	@ (80017d8 <HAL_I2C_MspInit+0x164>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a8:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <HAL_I2C_MspInit+0x164>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c6:	2304      	movs	r3, #4
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4842      	ldr	r0, [pc, #264]	@ (80017dc <HAL_I2C_MspInit+0x168>)
 80016d2:	f001 fd6d 	bl	80031b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <HAL_I2C_MspInit+0x164>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a3e      	ldr	r2, [pc, #248]	@ (80017d8 <HAL_I2C_MspInit+0x164>)
 80016e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b3c      	ldr	r3, [pc, #240]	@ (80017d8 <HAL_I2C_MspInit+0x164>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80016f2:	4b3b      	ldr	r3, [pc, #236]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 80016f4:	4a3b      	ldr	r2, [pc, #236]	@ (80017e4 <HAL_I2C_MspInit+0x170>)
 80016f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016f8:	4b39      	ldr	r3, [pc, #228]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 80016fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016fe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001700:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001706:	4b36      	ldr	r3, [pc, #216]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800170c:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 800170e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001712:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001714:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171a:	4b31      	ldr	r3, [pc, #196]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001720:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001726:	4b2e      	ldr	r3, [pc, #184]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172c:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001732:	482b      	ldr	r0, [pc, #172]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 8001734:	f001 f99c 	bl	8002a70 <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800173e:	f7ff fd53 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 8001746:	639a      	str	r2, [r3, #56]	@ 0x38
 8001748:	4a25      	ldr	r2, [pc, #148]	@ (80017e0 <HAL_I2C_MspInit+0x16c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 8001750:	4a26      	ldr	r2, [pc, #152]	@ (80017ec <HAL_I2C_MspInit+0x178>)
 8001752:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001754:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 8001756:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800175a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175c:	4b22      	ldr	r3, [pc, #136]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 800175e:	2240      	movs	r2, #64	@ 0x40
 8001760:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001762:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001768:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 800176a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800176e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001770:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001782:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800178e:	4816      	ldr	r0, [pc, #88]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 8001790:	f001 f96e 	bl	8002a70 <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800179a:	f7ff fd25 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a11      	ldr	r2, [pc, #68]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 80017a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80017a4:	4a10      	ldr	r2, [pc, #64]	@ (80017e8 <HAL_I2C_MspInit+0x174>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	201f      	movs	r0, #31
 80017b0:	f001 f927 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017b4:	201f      	movs	r0, #31
 80017b6:	f001 f940 	bl	8002a3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2020      	movs	r0, #32
 80017c0:	f001 f91f 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017c4:	2020      	movs	r0, #32
 80017c6:	f001 f938 	bl	8002a3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	@ 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40005400 	.word	0x40005400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020400 	.word	0x40020400
 80017e0:	20000180 	.word	0x20000180
 80017e4:	40026010 	.word	0x40026010
 80017e8:	200001e0 	.word	0x200001e0
 80017ec:	400260a0 	.word	0x400260a0

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001800:	d116      	bne.n	8001830 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	4a27      	ldr	r2, [pc, #156]	@ (80018a8 <HAL_TIM_Base_MspInit+0xb8>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6413      	str	r3, [r2, #64]	@ 0x40
 8001812:	4b25      	ldr	r3, [pc, #148]	@ (80018a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	201c      	movs	r0, #28
 8001824:	f001 f8ed 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001828:	201c      	movs	r0, #28
 800182a:	f001 f906 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800182e:	e036      	b.n	800189e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <HAL_TIM_Base_MspInit+0xbc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d116      	bne.n	8001868 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a19      	ldr	r2, [pc, #100]	@ (80018a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <HAL_TIM_Base_MspInit+0xb8>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	201d      	movs	r0, #29
 800185c:	f001 f8d1 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001860:	201d      	movs	r0, #29
 8001862:	f001 f8ea 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 8001866:	e01a      	b.n	800189e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a10      	ldr	r2, [pc, #64]	@ (80018b0 <HAL_TIM_Base_MspInit+0xc0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d115      	bne.n	800189e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <HAL_TIM_Base_MspInit+0xb8>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6413      	str	r3, [r2, #64]	@ 0x40
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	201e      	movs	r0, #30
 8001894:	f001 f8b5 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001898:	201e      	movs	r0, #30
 800189a:	f001 f8ce 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40000400 	.word	0x40000400
 80018b0:	40000800 	.word	0x40000800

080018b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a12      	ldr	r2, [pc, #72]	@ (800191c <HAL_TIM_MspPostInit+0x68>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d11d      	bne.n	8001912 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <HAL_TIM_MspPostInit+0x6c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <HAL_TIM_MspPostInit+0x6c>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_TIM_MspPostInit+0x6c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018f2:	2310      	movs	r3, #16
 80018f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001902:	2302      	movs	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	@ (8001924 <HAL_TIM_MspPostInit+0x70>)
 800190e:	f001 fc4f 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40000400 	.word	0x40000400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020400 	.word	0x40020400

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	@ (80019ac <HAL_UART_MspInit+0x84>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d12b      	bne.n	80019a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <HAL_UART_MspInit+0x88>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	4a17      	ldr	r2, [pc, #92]	@ (80019b0 <HAL_UART_MspInit+0x88>)
 8001954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001958:	6413      	str	r3, [r2, #64]	@ 0x40
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_UART_MspInit+0x88>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <HAL_UART_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a10      	ldr	r2, [pc, #64]	@ (80019b0 <HAL_UART_MspInit+0x88>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <HAL_UART_MspInit+0x88>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001982:	230c      	movs	r3, #12
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001992:	2307      	movs	r3, #7
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <HAL_UART_MspInit+0x8c>)
 800199e:	f001 fc07 	bl	80031b0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	@ 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40004400 	.word	0x40004400
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <NMI_Handler+0x4>

080019c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <UsageFault_Handler+0x4>

080019e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0e:	f000 f9c3 	bl	8001d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <DMA1_Stream0_IRQHandler+0x10>)
 8001a1e:	f001 f94f 	bl	8002cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000180 	.word	0x20000180

08001a2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a30:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <DMA1_Stream6_IRQHandler+0x10>)
 8001a32:	f001 f945 	bl	8002cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200001e0 	.word	0x200001e0

08001a40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <ADC_IRQHandler+0x10>)
 8001a46:	f000 fa2e 	bl	8001ea6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000084 	.word	0x20000084

08001a54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001a58:	2020      	movs	r0, #32
 8001a5a:	f001 fd5f 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a5e:	2040      	movs	r0, #64	@ 0x40
 8001a60:	f001 fd5c 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a64:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a68:	f001 fd58 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a6c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a70:	f001 fd54 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <TIM2_IRQHandler+0x10>)
 8001a7e:	f004 fda3 	bl	80065c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000240 	.word	0x20000240

08001a8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <TIM3_IRQHandler+0x10>)
 8001a92:	f004 fd99 	bl	80065c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000288 	.word	0x20000288

08001aa0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <TIM4_IRQHandler+0x10>)
 8001aa6:	f004 fd8f 	bl	80065c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200002d0 	.word	0x200002d0

08001ab4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <I2C1_EV_IRQHandler+0x10>)
 8001aba:	f001 ff9f 	bl	80039fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000012c 	.word	0x2000012c

08001ac8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <I2C1_ER_IRQHandler+0x10>)
 8001ace:	f002 f8e8 	bl	8003ca2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000012c 	.word	0x2000012c

08001adc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <DMA2_Stream0_IRQHandler+0x10>)
 8001ae2:	f001 f8ed 	bl	8002cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200000cc 	.word	0x200000cc

08001af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return 1;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_kill>:

int _kill(int pid, int sig)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b0a:	f006 f80b 	bl	8007b24 <__errno>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2216      	movs	r2, #22
 8001b12:	601a      	str	r2, [r3, #0]
  return -1;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_exit>:

void _exit (int status)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffe7 	bl	8001b00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <_exit+0x12>

08001b36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e00a      	b.n	8001b5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b48:	f3af 8000 	nop.w
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	60ba      	str	r2, [r7, #8]
 8001b54:	b2ca      	uxtb	r2, r1
 8001b56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbf0      	blt.n	8001b48 <_read+0x12>
  }

  return len;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e009      	b.n	8001b96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	60ba      	str	r2, [r7, #8]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	dbf1      	blt.n	8001b82 <_write+0x12>
  }
  return len;
 8001b9e:	687b      	ldr	r3, [r7, #4]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_close>:

int _close(int file)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bd0:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_isatty>:

int _isatty(int file)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c18:	4a14      	ldr	r2, [pc, #80]	@ (8001c6c <_sbrk+0x5c>)
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <_sbrk+0x60>)
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <_sbrk+0x64>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <_sbrk+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d207      	bcs.n	8001c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c40:	f005 ff70 	bl	8007b24 <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	220c      	movs	r2, #12
 8001c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	e009      	b.n	8001c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <_sbrk+0x64>)
 8001c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20018000 	.word	0x20018000
 8001c70:	00000400 	.word	0x00000400
 8001c74:	200004d4 	.word	0x200004d4
 8001c78:	20000628 	.word	0x20000628

08001c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <SystemInit+0x20>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <SystemInit+0x20>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ca4:	f7ff ffea 	bl	8001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001caa:	490d      	ldr	r1, [pc, #52]	@ (8001ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001cce:	f005 ff2f 	bl	8007b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd2:	f7fe fd45 	bl	8000760 <main>
  bx  lr    
 8001cd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ce4:	08008938 	.word	0x08008938
  ldr r2, =_sbss
 8001ce8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001cec:	20000628 	.word	0x20000628

08001cf0 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <DMA1_Stream1_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d34 <HAL_Init+0x40>)
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <HAL_Init+0x40>)
 8001d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a07      	ldr	r2, [pc, #28]	@ (8001d34 <HAL_Init+0x40>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f000 fe65 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 f808 	bl	8001d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d28:	f7ff fbfc 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_InitTick+0x54>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <HAL_InitTick+0x58>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fe7d 	bl	8002a56 <HAL_SYSTICK_Config>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00e      	b.n	8001d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b0f      	cmp	r3, #15
 8001d6a:	d80a      	bhi.n	8001d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f000 fe45 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d78:	4a06      	ldr	r2, [pc, #24]	@ (8001d94 <HAL_InitTick+0x5c>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000008 	.word	0x20000008
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_IncTick+0x20>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_IncTick+0x24>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <HAL_IncTick+0x24>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	200004d8 	.word	0x200004d8

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	200004d8 	.word	0x200004d8

08001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff ffee 	bl	8001dc0 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d005      	beq.n	8001dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_Delay+0x44>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dfe:	bf00      	nop
 8001e00:	f7ff ffde 	bl	8001dc0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d8f7      	bhi.n	8001e00 <HAL_Delay+0x28>
  {
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008

08001e20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e033      	b.n	8001e9e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fb98 	bl	8001574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d118      	bne.n	8001e90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e66:	f023 0302 	bic.w	r3, r3, #2
 8001e6a:	f043 0202 	orr.w	r2, r3, #2
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fb62 	bl	800253c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e8e:	e001      	b.n	8001e94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d049      	beq.n	8001f70 <HAL_ADC_IRQHandler+0xca>
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d046      	beq.n	8001f70 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d12b      	bne.n	8001f60 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d127      	bne.n	8001f60 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f16:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d119      	bne.n	8001f60 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0220 	bic.w	r2, r2, #32
 8001f3a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f9a1 	bl	80022a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f06f 0212 	mvn.w	r2, #18
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d057      	beq.n	8002036 <HAL_ADC_IRQHandler+0x190>
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d054      	beq.n	8002036 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d105      	bne.n	8001fa4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d139      	bne.n	8002026 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d12b      	bne.n	8002026 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d124      	bne.n	8002026 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d11d      	bne.n	8002026 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d119      	bne.n	8002026 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002000:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fc06 	bl	8002838 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 020c 	mvn.w	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002044:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d017      	beq.n	800207c <HAL_ADC_IRQHandler+0x1d6>
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d014      	beq.n	800207c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d10d      	bne.n	800207c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f92f 	bl	80022d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f06f 0201 	mvn.w	r2, #1
 800207a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800208a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d015      	beq.n	80020be <HAL_ADC_IRQHandler+0x218>
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d012      	beq.n	80020be <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209c:	f043 0202 	orr.w	r2, r3, #2
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0220 	mvn.w	r2, #32
 80020ac:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f918 	bl	80022e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0220 	mvn.w	r2, #32
 80020bc:	601a      	str	r2, [r3, #0]
  }
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Start_DMA+0x1e>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e0ce      	b.n	8002284 <HAL_ADC_Start_DMA+0x1bc>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d018      	beq.n	800212e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800210c:	4b5f      	ldr	r3, [pc, #380]	@ (800228c <HAL_ADC_Start_DMA+0x1c4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a5f      	ldr	r2, [pc, #380]	@ (8002290 <HAL_ADC_Start_DMA+0x1c8>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9a      	lsrs	r2, r3, #18
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002120:	e002      	b.n	8002128 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	3b01      	subs	r3, #1
 8002126:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800213c:	d107      	bne.n	800214e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800214c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	f040 8086 	bne.w	800226a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002188:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800219c:	d106      	bne.n	80021ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	f023 0206 	bic.w	r2, r3, #6
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80021aa:	e002      	b.n	80021b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ba:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <HAL_ADC_Start_DMA+0x1cc>)
 80021bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c2:	4a35      	ldr	r2, [pc, #212]	@ (8002298 <HAL_ADC_Start_DMA+0x1d0>)
 80021c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ca:	4a34      	ldr	r2, [pc, #208]	@ (800229c <HAL_ADC_Start_DMA+0x1d4>)
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d2:	4a33      	ldr	r2, [pc, #204]	@ (80022a0 <HAL_ADC_Start_DMA+0x1d8>)
 80021d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80021ee:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021fe:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	334c      	adds	r3, #76	@ 0x4c
 800220a:	4619      	mov	r1, r3
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f000 fcdc 	bl	8002bcc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d129      	bne.n	8002282 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	e020      	b.n	8002282 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a17      	ldr	r2, [pc, #92]	@ (80022a4 <HAL_ADC_Start_DMA+0x1dc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d11b      	bne.n	8002282 <HAL_ADC_Start_DMA+0x1ba>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d114      	bne.n	8002282 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	e00b      	b.n	8002282 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f043 0210 	orr.w	r2, r3, #16
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000000 	.word	0x20000000
 8002290:	431bde83 	.word	0x431bde83
 8002294:	40012300 	.word	0x40012300
 8002298:	08002735 	.word	0x08002735
 800229c:	080027ef 	.word	0x080027ef
 80022a0:	0800280b 	.word	0x0800280b
 80022a4:	40012000 	.word	0x40012000

080022a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1c>
 8002310:	2302      	movs	r3, #2
 8002312:	e105      	b.n	8002520 <HAL_ADC_ConfigChannel+0x228>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d925      	bls.n	8002370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68d9      	ldr	r1, [r3, #12]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	3b1e      	subs	r3, #30
 800233a:	2207      	movs	r2, #7
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43da      	mvns	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	400a      	ands	r2, r1
 8002348:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68d9      	ldr	r1, [r3, #12]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	4618      	mov	r0, r3
 800235c:	4603      	mov	r3, r0
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4403      	add	r3, r0
 8002362:	3b1e      	subs	r3, #30
 8002364:	409a      	lsls	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	e022      	b.n	80023b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6919      	ldr	r1, [r3, #16]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	2207      	movs	r2, #7
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	400a      	ands	r2, r1
 8002392:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6919      	ldr	r1, [r3, #16]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	4618      	mov	r0, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4403      	add	r3, r0
 80023ac:	409a      	lsls	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d824      	bhi.n	8002408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	3b05      	subs	r3, #5
 80023d0:	221f      	movs	r2, #31
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	400a      	ands	r2, r1
 80023de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	3b05      	subs	r3, #5
 80023fa:	fa00 f203 	lsl.w	r2, r0, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	635a      	str	r2, [r3, #52]	@ 0x34
 8002406:	e04c      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b0c      	cmp	r3, #12
 800240e:	d824      	bhi.n	800245a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	3b23      	subs	r3, #35	@ 0x23
 8002422:	221f      	movs	r2, #31
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43da      	mvns	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	400a      	ands	r2, r1
 8002430:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b23      	subs	r3, #35	@ 0x23
 800244c:	fa00 f203 	lsl.w	r2, r0, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
 8002458:	e023      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	3b41      	subs	r3, #65	@ 0x41
 800246c:	221f      	movs	r2, #31
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	400a      	ands	r2, r1
 800247a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b41      	subs	r3, #65	@ 0x41
 8002496:	fa00 f203 	lsl.w	r2, r0, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a2:	4b22      	ldr	r3, [pc, #136]	@ (800252c <HAL_ADC_ConfigChannel+0x234>)
 80024a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a21      	ldr	r2, [pc, #132]	@ (8002530 <HAL_ADC_ConfigChannel+0x238>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d109      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1cc>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b12      	cmp	r3, #18
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a19      	ldr	r2, [pc, #100]	@ (8002530 <HAL_ADC_ConfigChannel+0x238>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d123      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x21e>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d003      	beq.n	80024de <HAL_ADC_ConfigChannel+0x1e6>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b11      	cmp	r3, #17
 80024dc:	d11b      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d111      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <HAL_ADC_ConfigChannel+0x23c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a10      	ldr	r2, [pc, #64]	@ (8002538 <HAL_ADC_ConfigChannel+0x240>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	0c9a      	lsrs	r2, r3, #18
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002508:	e002      	b.n	8002510 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3b01      	subs	r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f9      	bne.n	800250a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40012300 	.word	0x40012300
 8002530:	40012000 	.word	0x40012000
 8002534:	20000000 	.word	0x20000000
 8002538:	431bde83 	.word	0x431bde83

0800253c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002544:	4b79      	ldr	r3, [pc, #484]	@ (800272c <ADC_Init+0x1f0>)
 8002546:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	431a      	orrs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	021a      	lsls	r2, r3, #8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ce:	4a58      	ldr	r2, [pc, #352]	@ (8002730 <ADC_Init+0x1f4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d022      	beq.n	800261a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	e00f      	b.n	800263a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002638:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0202 	bic.w	r2, r2, #2
 8002648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6899      	ldr	r1, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7e1b      	ldrb	r3, [r3, #24]
 8002654:	005a      	lsls	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01b      	beq.n	80026a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002676:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002686:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	3b01      	subs	r3, #1
 8002694:	035a      	lsls	r2, r3, #13
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	e007      	b.n	80026b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	051a      	lsls	r2, r3, #20
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6899      	ldr	r1, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026f2:	025a      	lsls	r2, r3, #9
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800270a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6899      	ldr	r1, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	029a      	lsls	r2, r3, #10
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40012300 	.word	0x40012300
 8002730:	0f000001 	.word	0x0f000001

08002734 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002740:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800274a:	2b00      	cmp	r3, #0
 800274c:	d13c      	bne.n	80027c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d12b      	bne.n	80027c0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800276c:	2b00      	cmp	r3, #0
 800276e:	d127      	bne.n	80027c0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002776:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800277a:	2b00      	cmp	r3, #0
 800277c:	d006      	beq.n	800278c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002788:	2b00      	cmp	r3, #0
 800278a:	d119      	bne.n	80027c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0220 	bic.w	r2, r2, #32
 800279a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	f043 0201 	orr.w	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f7ff fd71 	bl	80022a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027c6:	e00e      	b.n	80027e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff fd85 	bl	80022e4 <HAL_ADC_ErrorCallback>
}
 80027da:	e004      	b.n	80027e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff fd5d 	bl	80022bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002816:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2240      	movs	r2, #64	@ 0x40
 800281c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002822:	f043 0204 	orr.w	r2, r3, #4
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff fd5a 	bl	80022e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	@ (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	@ (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	@ (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	@ 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	@ 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff f9a0 	bl	8001dc0 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e099      	b.n	8002bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aac:	e00f      	b.n	8002ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aae:	f7ff f987 	bl	8001dc0 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d908      	bls.n	8002ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e078      	b.n	8002bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e8      	bne.n	8002aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4b38      	ldr	r3, [pc, #224]	@ (8002bc8 <HAL_DMA_Init+0x158>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	4313      	orrs	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0307 	bic.w	r3, r3, #7
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d117      	bne.n	8002b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00e      	beq.n	8002b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fa9f 	bl	80030b8 <DMA_CheckFifoParam>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2240      	movs	r2, #64	@ 0x40
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e016      	b.n	8002bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa56 	bl	800304c <DMA_CalcBaseAndBitshift>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	223f      	movs	r2, #63	@ 0x3f
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	f010803f 	.word	0xf010803f

08002bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_DMA_Start_IT+0x26>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e040      	b.n	8002c74 <HAL_DMA_Start_IT+0xa8>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d12f      	bne.n	8002c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f9e8 	bl	8002ff0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c24:	223f      	movs	r2, #63	@ 0x3f
 8002c26:	409a      	lsls	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0216 	orr.w	r2, r2, #22
 8002c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0208 	orr.w	r2, r2, #8
 8002c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e005      	b.n	8002c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d004      	beq.n	8002c9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2280      	movs	r2, #128	@ 0x80
 8002c94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00c      	b.n	8002cb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2205      	movs	r2, #5
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0201 	bic.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ccc:	4b8e      	ldr	r3, [pc, #568]	@ (8002f08 <HAL_DMA_IRQHandler+0x248>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a8e      	ldr	r2, [pc, #568]	@ (8002f0c <HAL_DMA_IRQHandler+0x24c>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0a9b      	lsrs	r3, r3, #10
 8002cd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	2208      	movs	r2, #8
 8002cec:	409a      	lsls	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01a      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0204 	bic.w	r2, r2, #4
 8002d12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d18:	2208      	movs	r2, #8
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d30:	2201      	movs	r2, #1
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4e:	2201      	movs	r2, #1
 8002d50:	409a      	lsls	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	f043 0202 	orr.w	r2, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d66:	2204      	movs	r2, #4
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d012      	beq.n	8002d98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00b      	beq.n	8002d98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d84:	2204      	movs	r2, #4
 8002d86:	409a      	lsls	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d90:	f043 0204 	orr.w	r2, r3, #4
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d043      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d03c      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dba:	2210      	movs	r2, #16
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d018      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d108      	bne.n	8002df0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d024      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	4798      	blx	r3
 8002dee:	e01f      	b.n	8002e30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01b      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
 8002e00:	e016      	b.n	8002e30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d107      	bne.n	8002e20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0208 	bic.w	r2, r2, #8
 8002e1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e34:	2220      	movs	r2, #32
 8002e36:	409a      	lsls	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 808f 	beq.w	8002f60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8087 	beq.w	8002f60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e56:	2220      	movs	r2, #32
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d136      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0216 	bic.w	r2, r2, #22
 8002e78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <HAL_DMA_IRQHandler+0x1da>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0208 	bic.w	r2, r2, #8
 8002ea8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eae:	223f      	movs	r2, #63	@ 0x3f
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d07e      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
        }
        return;
 8002ed6:	e079      	b.n	8002fcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01d      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10d      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d031      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
 8002f04:	e02c      	b.n	8002f60 <HAL_DMA_IRQHandler+0x2a0>
 8002f06:	bf00      	nop
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d023      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
 8002f20:	e01e      	b.n	8002f60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10f      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0210 	bic.w	r2, r2, #16
 8002f3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d032      	beq.n	8002fce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d022      	beq.n	8002fba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2205      	movs	r2, #5
 8002f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d307      	bcc.n	8002fa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f2      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x2cc>
 8002fa6:	e000      	b.n	8002faa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
 8002fca:	e000      	b.n	8002fce <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fcc:	bf00      	nop
    }
  }
}
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe2:	b2db      	uxtb	r3, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800300c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b40      	cmp	r3, #64	@ 0x40
 800301c:	d108      	bne.n	8003030 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800302e:	e007      	b.n	8003040 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	60da      	str	r2, [r3, #12]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	3b10      	subs	r3, #16
 800305c:	4a14      	ldr	r2, [pc, #80]	@ (80030b0 <DMA_CalcBaseAndBitshift+0x64>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003066:	4a13      	ldr	r2, [pc, #76]	@ (80030b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d909      	bls.n	800308e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	1d1a      	adds	r2, r3, #4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	659a      	str	r2, [r3, #88]	@ 0x58
 800308c:	e007      	b.n	800309e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003096:	f023 0303 	bic.w	r3, r3, #3
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	aaaaaaab 	.word	0xaaaaaaab
 80030b4:	08008840 	.word	0x08008840

080030b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d11f      	bne.n	8003112 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d856      	bhi.n	8003186 <DMA_CheckFifoParam+0xce>
 80030d8:	a201      	add	r2, pc, #4	@ (adr r2, 80030e0 <DMA_CheckFifoParam+0x28>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	08003103 	.word	0x08003103
 80030e8:	080030f1 	.word	0x080030f1
 80030ec:	08003187 	.word	0x08003187
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d046      	beq.n	800318a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003100:	e043      	b.n	800318a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800310a:	d140      	bne.n	800318e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003110:	e03d      	b.n	800318e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800311a:	d121      	bne.n	8003160 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d837      	bhi.n	8003192 <DMA_CheckFifoParam+0xda>
 8003122:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <DMA_CheckFifoParam+0x70>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	08003139 	.word	0x08003139
 800312c:	0800313f 	.word	0x0800313f
 8003130:	08003139 	.word	0x08003139
 8003134:	08003151 	.word	0x08003151
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      break;
 800313c:	e030      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d025      	beq.n	8003196 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314e:	e022      	b.n	8003196 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003158:	d11f      	bne.n	800319a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800315e:	e01c      	b.n	800319a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d903      	bls.n	800316e <DMA_CheckFifoParam+0xb6>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d003      	beq.n	8003174 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800316c:	e018      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
      break;
 8003172:	e015      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003178:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00e      	beq.n	800319e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e00b      	b.n	800319e <DMA_CheckFifoParam+0xe6>
      break;
 8003186:	bf00      	nop
 8003188:	e00a      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
 800318c:	e008      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;
 800318e:	bf00      	nop
 8003190:	e006      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003192:	bf00      	nop
 8003194:	e004      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003196:	bf00      	nop
 8003198:	e002      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <DMA_CheckFifoParam+0xe8>
      break;
 800319e:	bf00      	nop
    }
  } 
  
  return status; 
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop

080031b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	@ 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e159      	b.n	8003480 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031cc:	2201      	movs	r2, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f040 8148 	bne.w	800347a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d005      	beq.n	8003202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b03      	cmp	r3, #3
 800326e:	d017      	beq.n	80032a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d123      	bne.n	80032f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a2 	beq.w	800347a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b57      	ldr	r3, [pc, #348]	@ (8003498 <HAL_GPIO_Init+0x2e8>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	4a56      	ldr	r2, [pc, #344]	@ (8003498 <HAL_GPIO_Init+0x2e8>)
 8003340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003344:	6453      	str	r3, [r2, #68]	@ 0x44
 8003346:	4b54      	ldr	r3, [pc, #336]	@ (8003498 <HAL_GPIO_Init+0x2e8>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003352:	4a52      	ldr	r2, [pc, #328]	@ (800349c <HAL_GPIO_Init+0x2ec>)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a49      	ldr	r2, [pc, #292]	@ (80034a0 <HAL_GPIO_Init+0x2f0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d019      	beq.n	80033b2 <HAL_GPIO_Init+0x202>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a48      	ldr	r2, [pc, #288]	@ (80034a4 <HAL_GPIO_Init+0x2f4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_GPIO_Init+0x1fe>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a47      	ldr	r2, [pc, #284]	@ (80034a8 <HAL_GPIO_Init+0x2f8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_GPIO_Init+0x1fa>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a46      	ldr	r2, [pc, #280]	@ (80034ac <HAL_GPIO_Init+0x2fc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x1f6>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a45      	ldr	r2, [pc, #276]	@ (80034b0 <HAL_GPIO_Init+0x300>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_GPIO_Init+0x1f2>
 800339e:	2304      	movs	r3, #4
 80033a0:	e008      	b.n	80033b4 <HAL_GPIO_Init+0x204>
 80033a2:	2307      	movs	r3, #7
 80033a4:	e006      	b.n	80033b4 <HAL_GPIO_Init+0x204>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e004      	b.n	80033b4 <HAL_GPIO_Init+0x204>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e002      	b.n	80033b4 <HAL_GPIO_Init+0x204>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_GPIO_Init+0x204>
 80033b2:	2300      	movs	r3, #0
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	f002 0203 	and.w	r2, r2, #3
 80033ba:	0092      	lsls	r2, r2, #2
 80033bc:	4093      	lsls	r3, r2
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033c4:	4935      	ldr	r1, [pc, #212]	@ (800349c <HAL_GPIO_Init+0x2ec>)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	3302      	adds	r3, #2
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033d2:	4b38      	ldr	r3, [pc, #224]	@ (80034b4 <HAL_GPIO_Init+0x304>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033f6:	4a2f      	ldr	r2, [pc, #188]	@ (80034b4 <HAL_GPIO_Init+0x304>)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033fc:	4b2d      	ldr	r3, [pc, #180]	@ (80034b4 <HAL_GPIO_Init+0x304>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003420:	4a24      	ldr	r2, [pc, #144]	@ (80034b4 <HAL_GPIO_Init+0x304>)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003426:	4b23      	ldr	r3, [pc, #140]	@ (80034b4 <HAL_GPIO_Init+0x304>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800344a:	4a1a      	ldr	r2, [pc, #104]	@ (80034b4 <HAL_GPIO_Init+0x304>)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003450:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <HAL_GPIO_Init+0x304>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003474:	4a0f      	ldr	r2, [pc, #60]	@ (80034b4 <HAL_GPIO_Init+0x304>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3301      	adds	r3, #1
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b0f      	cmp	r3, #15
 8003484:	f67f aea2 	bls.w	80031cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	3724      	adds	r7, #36	@ 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	40013800 	.word	0x40013800
 80034a0:	40020000 	.word	0x40020000
 80034a4:	40020400 	.word	0x40020400
 80034a8:	40020800 	.word	0x40020800
 80034ac:	40020c00 	.word	0x40020c00
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40013c00 	.word	0x40013c00

080034b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	e001      	b.n	80034da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	807b      	strh	r3, [r7, #2]
 80034f4:	4613      	mov	r3, r2
 80034f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f8:	787b      	ldrb	r3, [r7, #1]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003504:	e003      	b.n	800350e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	041a      	lsls	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	619a      	str	r2, [r3, #24]
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003526:	4b08      	ldr	r3, [pc, #32]	@ (8003548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d006      	beq.n	8003540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003532:	4a05      	ldr	r2, [pc, #20]	@ (8003548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd fd16 	bl	8000f6c <HAL_GPIO_EXTI_Callback>
  }
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40013c00 	.word	0x40013c00

0800354c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e12b      	b.n	80037b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fe f87e 	bl	8001674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	@ 0x24
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800359e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035b0:	f002 fdc2 	bl	8006138 <HAL_RCC_GetPCLK1Freq>
 80035b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4a81      	ldr	r2, [pc, #516]	@ (80037c0 <HAL_I2C_Init+0x274>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d807      	bhi.n	80035d0 <HAL_I2C_Init+0x84>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a80      	ldr	r2, [pc, #512]	@ (80037c4 <HAL_I2C_Init+0x278>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e006      	b.n	80035de <HAL_I2C_Init+0x92>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a7d      	ldr	r2, [pc, #500]	@ (80037c8 <HAL_I2C_Init+0x27c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	bf94      	ite	ls
 80035d8:	2301      	movls	r3, #1
 80035da:	2300      	movhi	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0e7      	b.n	80037b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a78      	ldr	r2, [pc, #480]	@ (80037cc <HAL_I2C_Init+0x280>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	0c9b      	lsrs	r3, r3, #18
 80035f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a6a      	ldr	r2, [pc, #424]	@ (80037c0 <HAL_I2C_Init+0x274>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d802      	bhi.n	8003620 <HAL_I2C_Init+0xd4>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	3301      	adds	r3, #1
 800361e:	e009      	b.n	8003634 <HAL_I2C_Init+0xe8>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	4a69      	ldr	r2, [pc, #420]	@ (80037d0 <HAL_I2C_Init+0x284>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	099b      	lsrs	r3, r3, #6
 8003632:	3301      	adds	r3, #1
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	430b      	orrs	r3, r1
 800363a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003646:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	495c      	ldr	r1, [pc, #368]	@ (80037c0 <HAL_I2C_Init+0x274>)
 8003650:	428b      	cmp	r3, r1
 8003652:	d819      	bhi.n	8003688 <HAL_I2C_Init+0x13c>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1e59      	subs	r1, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003662:	1c59      	adds	r1, r3, #1
 8003664:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003668:	400b      	ands	r3, r1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_I2C_Init+0x138>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1e59      	subs	r1, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fbb1 f3f3 	udiv	r3, r1, r3
 800367c:	3301      	adds	r3, #1
 800367e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003682:	e051      	b.n	8003728 <HAL_I2C_Init+0x1dc>
 8003684:	2304      	movs	r3, #4
 8003686:	e04f      	b.n	8003728 <HAL_I2C_Init+0x1dc>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d111      	bne.n	80036b4 <HAL_I2C_Init+0x168>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e58      	subs	r0, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	440b      	add	r3, r1
 800369e:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e012      	b.n	80036da <HAL_I2C_Init+0x18e>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1e58      	subs	r0, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	0099      	lsls	r1, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ca:	3301      	adds	r3, #1
 80036cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_I2C_Init+0x196>
 80036de:	2301      	movs	r3, #1
 80036e0:	e022      	b.n	8003728 <HAL_I2C_Init+0x1dc>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10e      	bne.n	8003708 <HAL_I2C_Init+0x1bc>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1e58      	subs	r0, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6859      	ldr	r1, [r3, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	440b      	add	r3, r1
 80036f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fc:	3301      	adds	r3, #1
 80036fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003706:	e00f      	b.n	8003728 <HAL_I2C_Init+0x1dc>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1e58      	subs	r0, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	0099      	lsls	r1, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	fbb0 f3f3 	udiv	r3, r0, r3
 800371e:	3301      	adds	r3, #1
 8003720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003724:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	6809      	ldr	r1, [r1, #0]
 800372c:	4313      	orrs	r3, r2
 800372e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003756:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6911      	ldr	r1, [r2, #16]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	430b      	orrs	r3, r1
 800376a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	000186a0 	.word	0x000186a0
 80037c4:	001e847f 	.word	0x001e847f
 80037c8:	003d08ff 	.word	0x003d08ff
 80037cc:	431bde83 	.word	0x431bde83
 80037d0:	10624dd3 	.word	0x10624dd3

080037d4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b80      	cmp	r3, #128	@ 0x80
 80037e8:	d103      	bne.n	80037f2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	461a      	mov	r2, r3
 800380c:	460b      	mov	r3, r1
 800380e:	817b      	strh	r3, [r7, #10]
 8003810:	4613      	mov	r3, r2
 8003812:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7fe fad4 	bl	8001dc0 <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	f040 80e0 	bne.w	80039e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2319      	movs	r3, #25
 800382e:	2201      	movs	r2, #1
 8003830:	4970      	ldr	r1, [pc, #448]	@ (80039f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f001 fdea 	bl	800540c <I2C_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
 8003840:	e0d3      	b.n	80039ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_I2C_Master_Transmit+0x50>
 800384c:	2302      	movs	r3, #2
 800384e:	e0cc      	b.n	80039ea <HAL_I2C_Master_Transmit+0x1ea>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d007      	beq.n	8003876 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2221      	movs	r2, #33	@ 0x21
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2210      	movs	r2, #16
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	893a      	ldrh	r2, [r7, #8]
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a50      	ldr	r2, [pc, #320]	@ (80039f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80038b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038b8:	8979      	ldrh	r1, [r7, #10]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	6a3a      	ldr	r2, [r7, #32]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f001 fc7a 	bl	80051b8 <I2C_MasterRequestWrite>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e08d      	b.n	80039ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038e4:	e066      	b.n	80039b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	6a39      	ldr	r1, [r7, #32]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f001 fea8 	bl	8005640 <I2C_WaitOnTXEFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d107      	bne.n	800390e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06b      	b.n	80039ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b04      	cmp	r3, #4
 800394e:	d11b      	bne.n	8003988 <HAL_I2C_Master_Transmit+0x188>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003954:	2b00      	cmp	r3, #0
 8003956:	d017      	beq.n	8003988 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	6a39      	ldr	r1, [r7, #32]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f001 fe9f 	bl	80056d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	2b04      	cmp	r3, #4
 800399e:	d107      	bne.n	80039b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e01a      	b.n	80039ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d194      	bne.n	80038e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e000      	b.n	80039ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	00100002 	.word	0x00100002
 80039f8:	ffff0000 	.word	0xffff0000

080039fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a24:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d003      	beq.n	8003a34 <HAL_I2C_EV_IRQHandler+0x38>
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	f040 80b1 	bne.w	8003b96 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10d      	bne.n	8003a6a <HAL_I2C_EV_IRQHandler+0x6e>
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003a54:	d003      	beq.n	8003a5e <HAL_I2C_EV_IRQHandler+0x62>
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2C_EV_IRQHandler+0x66>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_I2C_EV_IRQHandler+0x68>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f000 8114 	beq.w	8003c92 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <HAL_I2C_EV_IRQHandler+0x90>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d006      	beq.n	8003a8c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f001 fecf 	bl	8005822 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fd7a 	bl	800457e <I2C_Master_SB>
 8003a8a:	e083      	b.n	8003b94 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_I2C_EV_IRQHandler+0xac>
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fdf2 	bl	800468a <I2C_Master_ADD10>
 8003aa6:	e075      	b.n	8003b94 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_I2C_EV_IRQHandler+0xc8>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fe0e 	bl	80046de <I2C_Master_ADDR>
 8003ac2:	e067      	b.n	8003b94 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d036      	beq.n	8003b3c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003adc:	f000 80db 	beq.w	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <HAL_I2C_EV_IRQHandler+0x10a>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_I2C_EV_IRQHandler+0x10a>
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d103      	bne.n	8003b06 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9d6 	bl	8003eb0 <I2C_MasterTransmit_TXE>
 8003b04:	e046      	b.n	8003b94 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80c2 	beq.w	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80bc 	beq.w	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b1e:	7bbb      	ldrb	r3, [r7, #14]
 8003b20:	2b21      	cmp	r3, #33	@ 0x21
 8003b22:	d103      	bne.n	8003b2c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fa5f 	bl	8003fe8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b2a:	e0b4      	b.n	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b40      	cmp	r3, #64	@ 0x40
 8003b30:	f040 80b1 	bne.w	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 facd 	bl	80040d4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b3a:	e0ac      	b.n	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b4a:	f000 80a4 	beq.w	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <HAL_I2C_EV_IRQHandler+0x178>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_I2C_EV_IRQHandler+0x178>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fb49 	bl	8004204 <I2C_MasterReceive_RXNE>
 8003b72:	e00f      	b.n	8003b94 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 808b 	beq.w	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8085 	beq.w	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fc01 	bl	8004394 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b92:	e080      	b.n	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
 8003b94:	e07f      	b.n	8003c96 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	e007      	b.n	8003bb8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d011      	beq.n	8003be6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00c      	beq.n	8003be6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003bdc:	69b9      	ldr	r1, [r7, #24]
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 ffcc 	bl	8004b7c <I2C_Slave_ADDR>
 8003be4:	e05a      	b.n	8003c9c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_I2C_EV_IRQHandler+0x206>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f001 f806 	bl	8004c0c <I2C_Slave_STOPF>
 8003c00:	e04c      	b.n	8003c9c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c02:	7bbb      	ldrb	r3, [r7, #14]
 8003c04:	2b21      	cmp	r3, #33	@ 0x21
 8003c06:	d002      	beq.n	8003c0e <HAL_I2C_EV_IRQHandler+0x212>
 8003c08:	7bbb      	ldrb	r3, [r7, #14]
 8003c0a:	2b29      	cmp	r3, #41	@ 0x29
 8003c0c:	d120      	bne.n	8003c50 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <HAL_I2C_EV_IRQHandler+0x238>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_I2C_EV_IRQHandler+0x238>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fee7 	bl	8004a00 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c32:	e032      	b.n	8003c9a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d02d      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0x29e>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d028      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 ff16 	bl	8004a7a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c4e:	e024      	b.n	8003c9a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00d      	beq.n	8003c76 <HAL_I2C_EV_IRQHandler+0x27a>
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_I2C_EV_IRQHandler+0x27a>
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 ff24 	bl	8004abc <I2C_SlaveReceive_RXNE>
 8003c74:	e012      	b.n	8003c9c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 ff54 	bl	8004b38 <I2C_SlaveReceive_BTF>
 8003c90:	e004      	b.n	8003c9c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b08a      	sub	sp, #40	@ 0x28
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cc4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <HAL_I2C_ER_IRQHandler+0x4a>
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <HAL_I2C_ER_IRQHandler+0x70>
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	f043 0302 	orr.w	r3, r3, #2
 8003d06:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003d10:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d03e      	beq.n	8003d9a <HAL_I2C_ER_IRQHandler+0xf8>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d039      	beq.n	8003d9a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003d26:	7efb      	ldrb	r3, [r7, #27]
 8003d28:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d38:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d40:	7ebb      	ldrb	r3, [r7, #26]
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d112      	bne.n	8003d6c <HAL_I2C_ER_IRQHandler+0xca>
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10f      	bne.n	8003d6c <HAL_I2C_ER_IRQHandler+0xca>
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	2b21      	cmp	r3, #33	@ 0x21
 8003d50:	d008      	beq.n	8003d64 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d52:	7cfb      	ldrb	r3, [r7, #19]
 8003d54:	2b29      	cmp	r3, #41	@ 0x29
 8003d56:	d005      	beq.n	8003d64 <HAL_I2C_ER_IRQHandler+0xc2>
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	2b28      	cmp	r3, #40	@ 0x28
 8003d5c:	d106      	bne.n	8003d6c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b21      	cmp	r3, #33	@ 0x21
 8003d62:	d103      	bne.n	8003d6c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f001 f881 	bl	8004e6c <I2C_Slave_AF>
 8003d6a:	e016      	b.n	8003d9a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d74:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d7e:	7efb      	ldrb	r3, [r7, #27]
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d002      	beq.n	8003d8a <HAL_I2C_ER_IRQHandler+0xe8>
 8003d84:	7efb      	ldrb	r3, [r7, #27]
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d107      	bne.n	8003d9a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d98:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <HAL_I2C_ER_IRQHandler+0x11e>
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	f043 0308 	orr.w	r3, r3, #8
 8003db4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003dbe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f001 f8be 	bl	8004f54 <I2C_ITError>
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3728      	adds	r7, #40	@ 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ec6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d150      	bne.n	8003f78 <I2C_MasterTransmit_TXE+0xc8>
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	2b21      	cmp	r3, #33	@ 0x21
 8003eda:	d14d      	bne.n	8003f78 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d01d      	beq.n	8003f1e <I2C_MasterTransmit_TXE+0x6e>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d01a      	beq.n	8003f1e <I2C_MasterTransmit_TXE+0x6e>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003eee:	d016      	beq.n	8003f1e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003efe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2211      	movs	r2, #17
 8003f04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ff62 	bl	8003de0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f1c:	e060      	b.n	8003fe0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f2c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b40      	cmp	r3, #64	@ 0x40
 8003f56:	d107      	bne.n	8003f68 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff7d 	bl	8003e60 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f66:	e03b      	b.n	8003fe0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ff35 	bl	8003de0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f76:	e033      	b.n	8003fe0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b21      	cmp	r3, #33	@ 0x21
 8003f7c:	d005      	beq.n	8003f8a <I2C_MasterTransmit_TXE+0xda>
 8003f7e:	7bbb      	ldrb	r3, [r7, #14]
 8003f80:	2b40      	cmp	r3, #64	@ 0x40
 8003f82:	d12d      	bne.n	8003fe0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b22      	cmp	r3, #34	@ 0x22
 8003f88:	d12a      	bne.n	8003fe0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d108      	bne.n	8003fa6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003fa4:	e01c      	b.n	8003fe0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d103      	bne.n	8003fba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f88e 	bl	80040d4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003fb8:	e012      	b.n	8003fe0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003fde:	e7ff      	b.n	8003fe0 <I2C_MasterTransmit_TXE+0x130>
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b21      	cmp	r3, #33	@ 0x21
 8004000:	d164      	bne.n	80040cc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d012      	beq.n	8004032 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004030:	e04c      	b.n	80040cc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d01d      	beq.n	8004074 <I2C_MasterTransmit_BTF+0x8c>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b20      	cmp	r3, #32
 800403c:	d01a      	beq.n	8004074 <I2C_MasterTransmit_BTF+0x8c>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004044:	d016      	beq.n	8004074 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004054:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2211      	movs	r2, #17
 800405a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff feb7 	bl	8003de0 <HAL_I2C_MasterTxCpltCallback>
}
 8004072:	e02b      	b.n	80040cc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004082:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004092:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b40      	cmp	r3, #64	@ 0x40
 80040ac:	d107      	bne.n	80040be <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fed2 	bl	8003e60 <HAL_I2C_MemTxCpltCallback>
}
 80040bc:	e006      	b.n	80040cc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fe8a 	bl	8003de0 <HAL_I2C_MasterTxCpltCallback>
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d11d      	bne.n	8004128 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10b      	bne.n	800410c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004104:	1c9a      	adds	r2, r3, #2
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800410a:	e077      	b.n	80041fc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004110:	b29b      	uxth	r3, r3
 8004112:	121b      	asrs	r3, r3, #8
 8004114:	b2da      	uxtb	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004126:	e069      	b.n	80041fc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10b      	bne.n	8004148 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004134:	b2da      	uxtb	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004146:	e059      	b.n	80041fc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800414c:	2b02      	cmp	r3, #2
 800414e:	d152      	bne.n	80041f6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b22      	cmp	r3, #34	@ 0x22
 8004154:	d10d      	bne.n	8004172 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004164:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004170:	e044      	b.n	80041fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b21      	cmp	r3, #33	@ 0x21
 8004180:	d112      	bne.n	80041a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	781a      	ldrb	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80041a6:	e029      	b.n	80041fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d124      	bne.n	80041fc <I2C_MemoryTransmit_TXE_BTF+0x128>
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b21      	cmp	r3, #33	@ 0x21
 80041b6:	d121      	bne.n	80041fc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041c6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fe36 	bl	8003e60 <HAL_I2C_MemTxCpltCallback>
}
 80041f4:	e002      	b.n	80041fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff faec 	bl	80037d4 <I2C_Flush_DR>
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b22      	cmp	r3, #34	@ 0x22
 8004216:	f040 80b9 	bne.w	800438c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b03      	cmp	r3, #3
 800422c:	d921      	bls.n	8004272 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b03      	cmp	r3, #3
 800425c:	f040 8096 	bne.w	800438c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004270:	e08c      	b.n	800438c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	2b02      	cmp	r3, #2
 8004278:	d07f      	beq.n	800437a <I2C_MasterReceive_RXNE+0x176>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d002      	beq.n	8004286 <I2C_MasterReceive_RXNE+0x82>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d179      	bne.n	800437a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f001 fa6a 	bl	8005760 <I2C_WaitOnSTOPRequestThroughIT>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d14c      	bne.n	800432c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b40      	cmp	r3, #64	@ 0x40
 80042ea:	d10a      	bne.n	8004302 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff fdba 	bl	8003e74 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004300:	e044      	b.n	800438c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d002      	beq.n	8004316 <I2C_MasterReceive_RXNE+0x112>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b20      	cmp	r3, #32
 8004314:	d103      	bne.n	800431e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30
 800431c:	e002      	b.n	8004324 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2212      	movs	r2, #18
 8004322:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff fd65 	bl	8003df4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800432a:	e02f      	b.n	800438c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800433a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fd88 	bl	8003e88 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004378:	e008      	b.n	800438c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004388:	605a      	str	r2, [r3, #4]
}
 800438a:	e7ff      	b.n	800438c <I2C_MasterReceive_RXNE+0x188>
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d11b      	bne.n	80043e4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80043e2:	e0c8      	b.n	8004576 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d129      	bne.n	8004442 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d00a      	beq.n	800441a <I2C_MasterReceive_BTF+0x86>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d007      	beq.n	800441a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004418:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004440:	e099      	b.n	8004576 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	f040 8081 	bne.w	8004550 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d002      	beq.n	800445a <I2C_MasterReceive_BTF+0xc6>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b10      	cmp	r3, #16
 8004458:	d108      	bne.n	800446c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e019      	b.n	80044a0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d002      	beq.n	8004478 <I2C_MasterReceive_BTF+0xe4>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d108      	bne.n	800448a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e00a      	b.n	80044a0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b10      	cmp	r3, #16
 800448e:	d007      	beq.n	80044a0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800449e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80044fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b40      	cmp	r3, #64	@ 0x40
 800450e:	d10a      	bne.n	8004526 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fca8 	bl	8003e74 <HAL_I2C_MemRxCpltCallback>
}
 8004524:	e027      	b.n	8004576 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d002      	beq.n	800453a <I2C_MasterReceive_BTF+0x1a6>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b20      	cmp	r3, #32
 8004538:	d103      	bne.n	8004542 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004540:	e002      	b.n	8004548 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2212      	movs	r2, #18
 8004546:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fc53 	bl	8003df4 <HAL_I2C_MasterRxCpltCallback>
}
 800454e:	e012      	b.n	8004576 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b40      	cmp	r3, #64	@ 0x40
 8004590:	d117      	bne.n	80045c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80045ac:	e067      	b.n	800467e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	611a      	str	r2, [r3, #16]
}
 80045c0:	e05d      	b.n	800467e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ca:	d133      	bne.n	8004634 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b21      	cmp	r3, #33	@ 0x21
 80045d6:	d109      	bne.n	80045ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045e8:	611a      	str	r2, [r3, #16]
 80045ea:	e008      	b.n	80045fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <I2C_Master_SB+0x92>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460c:	2b00      	cmp	r3, #0
 800460e:	d108      	bne.n	8004622 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	2b00      	cmp	r3, #0
 8004616:	d032      	beq.n	800467e <I2C_Master_SB+0x100>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d02d      	beq.n	800467e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004630:	605a      	str	r2, [r3, #4]
}
 8004632:	e024      	b.n	800467e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10e      	bne.n	800465a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004640:	b29b      	uxth	r3, r3
 8004642:	11db      	asrs	r3, r3, #7
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f003 0306 	and.w	r3, r3, #6
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f063 030f 	orn	r3, r3, #15
 8004650:	b2da      	uxtb	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]
}
 8004658:	e011      	b.n	800467e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10d      	bne.n	800467e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004666:	b29b      	uxth	r3, r3
 8004668:	11db      	asrs	r3, r3, #7
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f003 0306 	and.w	r3, r3, #6
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f063 030e 	orn	r3, r3, #14
 8004676:	b2da      	uxtb	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	611a      	str	r2, [r3, #16]
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	b2da      	uxtb	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <I2C_Master_ADD10+0x26>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00c      	beq.n	80046d2 <I2C_Master_ADD10+0x48>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046d0:	605a      	str	r2, [r3, #4]
  }
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80046de:	b480      	push	{r7}
 80046e0:	b091      	sub	sp, #68	@ 0x44
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b22      	cmp	r3, #34	@ 0x22
 8004706:	f040 8169 	bne.w	80049dc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10f      	bne.n	8004732 <I2C_Master_ADDR+0x54>
 8004712:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d10b      	bne.n	8004732 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471a:	2300      	movs	r3, #0
 800471c:	633b      	str	r3, [r7, #48]	@ 0x30
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	633b      	str	r3, [r7, #48]	@ 0x30
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	633b      	str	r3, [r7, #48]	@ 0x30
 800472e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004730:	e160      	b.n	80049f4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004736:	2b00      	cmp	r3, #0
 8004738:	d11d      	bne.n	8004776 <I2C_Master_ADDR+0x98>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004742:	d118      	bne.n	8004776 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004744:	2300      	movs	r3, #0
 8004746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004768:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	651a      	str	r2, [r3, #80]	@ 0x50
 8004774:	e13e      	b.n	80049f4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d113      	bne.n	80047a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004780:	2300      	movs	r3, #0
 8004782:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004794:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	e115      	b.n	80049d4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	f040 808a 	bne.w	80048c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80047b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047ba:	d137      	bne.n	800482c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047da:	d113      	bne.n	8004804 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ec:	2300      	movs	r3, #0
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	e0e7      	b.n	80049d4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004804:	2300      	movs	r3, #0
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	623b      	str	r3, [r7, #32]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e0d3      	b.n	80049d4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800482c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482e:	2b08      	cmp	r3, #8
 8004830:	d02e      	beq.n	8004890 <I2C_Master_ADDR+0x1b2>
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	2b20      	cmp	r3, #32
 8004836:	d02b      	beq.n	8004890 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800483a:	2b12      	cmp	r3, #18
 800483c:	d102      	bne.n	8004844 <I2C_Master_ADDR+0x166>
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	2b01      	cmp	r3, #1
 8004842:	d125      	bne.n	8004890 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004846:	2b04      	cmp	r3, #4
 8004848:	d00e      	beq.n	8004868 <I2C_Master_ADDR+0x18a>
 800484a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484c:	2b02      	cmp	r3, #2
 800484e:	d00b      	beq.n	8004868 <I2C_Master_ADDR+0x18a>
 8004850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004852:	2b10      	cmp	r3, #16
 8004854:	d008      	beq.n	8004868 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e007      	b.n	8004878 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004876:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	e0a1      	b.n	80049d4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800489e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e085      	b.n	80049d4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d14d      	bne.n	800496e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d016      	beq.n	8004906 <I2C_Master_ADDR+0x228>
 80048d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d013      	beq.n	8004906 <I2C_Master_ADDR+0x228>
 80048de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d010      	beq.n	8004906 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e007      	b.n	8004916 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004914:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004924:	d117      	bne.n	8004956 <I2C_Master_ADDR+0x278>
 8004926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004928:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800492c:	d00b      	beq.n	8004946 <I2C_Master_ADDR+0x268>
 800492e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004930:	2b01      	cmp	r3, #1
 8004932:	d008      	beq.n	8004946 <I2C_Master_ADDR+0x268>
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	2b08      	cmp	r3, #8
 8004938:	d005      	beq.n	8004946 <I2C_Master_ADDR+0x268>
 800493a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493c:	2b10      	cmp	r3, #16
 800493e:	d002      	beq.n	8004946 <I2C_Master_ADDR+0x268>
 8004940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004942:	2b20      	cmp	r3, #32
 8004944:	d107      	bne.n	8004956 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004954:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	e032      	b.n	80049d4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800497c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800498c:	d117      	bne.n	80049be <I2C_Master_ADDR+0x2e0>
 800498e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004990:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004994:	d00b      	beq.n	80049ae <I2C_Master_ADDR+0x2d0>
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	2b01      	cmp	r3, #1
 800499a:	d008      	beq.n	80049ae <I2C_Master_ADDR+0x2d0>
 800499c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d005      	beq.n	80049ae <I2C_Master_ADDR+0x2d0>
 80049a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d002      	beq.n	80049ae <I2C_Master_ADDR+0x2d0>
 80049a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d107      	bne.n	80049be <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80049da:	e00b      	b.n	80049f4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
}
 80049f2:	e7ff      	b.n	80049f4 <I2C_Master_ADDR+0x316>
 80049f4:	bf00      	nop
 80049f6:	3744      	adds	r7, #68	@ 0x44
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d02b      	beq.n	8004a72 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	781a      	ldrb	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d114      	bne.n	8004a72 <I2C_SlaveTransmit_TXE+0x72>
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b29      	cmp	r3, #41	@ 0x29
 8004a4c:	d111      	bne.n	8004a72 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a5c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2221      	movs	r2, #33	@ 0x21
 8004a62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2228      	movs	r2, #40	@ 0x28
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff f9cb 	bl	8003e08 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d011      	beq.n	8004ab0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d02c      	beq.n	8004b30 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d114      	bne.n	8004b30 <I2C_SlaveReceive_RXNE+0x74>
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b0a:	d111      	bne.n	8004b30 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2222      	movs	r2, #34	@ 0x22
 8004b20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2228      	movs	r2, #40	@ 0x28
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff f976 	bl	8003e1c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b30:	bf00      	nop
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b96:	2b28      	cmp	r3, #40	@ 0x28
 8004b98:	d125      	bne.n	8004be6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ba8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	81bb      	strh	r3, [r7, #12]
 8004bc8:	e002      	b.n	8004bd0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004bd8:	89ba      	ldrh	r2, [r7, #12]
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff f926 	bl	8003e30 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004be4:	e00e      	b.n	8004c04 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c2a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60bb      	str	r3, [r7, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c58:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c68:	d172      	bne.n	8004d50 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b22      	cmp	r3, #34	@ 0x22
 8004c6e:	d002      	beq.n	8004c76 <I2C_Slave_STOPF+0x6a>
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c74:	d135      	bne.n	8004ce2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	f043 0204 	orr.w	r2, r3, #4
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ca8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe f990 	bl	8002fd4 <HAL_DMA_GetState>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d049      	beq.n	8004d4e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbe:	4a69      	ldr	r2, [pc, #420]	@ (8004e64 <I2C_Slave_STOPF+0x258>)
 8004cc0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fd ffd8 	bl	8002c7c <HAL_DMA_Abort_IT>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d03d      	beq.n	8004d4e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ce0:	e035      	b.n	8004d4e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	f043 0204 	orr.w	r2, r3, #4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe f95a 	bl	8002fd4 <HAL_DMA_GetState>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d014      	beq.n	8004d50 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d2a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e64 <I2C_Slave_STOPF+0x258>)
 8004d2c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fd ffa2 	bl	8002c7c <HAL_DMA_Abort_IT>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4798      	blx	r3
 8004d4c:	e000      	b.n	8004d50 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d4e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d03e      	beq.n	8004dd8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d112      	bne.n	8004d8e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d98:	2b40      	cmp	r3, #64	@ 0x40
 8004d9a:	d112      	bne.n	8004dc2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	f043 0204 	orr.w	r2, r3, #4
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f8b7 	bl	8004f54 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004de6:	e039      	b.n	8004e5c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dec:	d109      	bne.n	8004e02 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2228      	movs	r2, #40	@ 0x28
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff f80d 	bl	8003e1c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b28      	cmp	r3, #40	@ 0x28
 8004e0c:	d111      	bne.n	8004e32 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a15      	ldr	r2, [pc, #84]	@ (8004e68 <I2C_Slave_STOPF+0x25c>)
 8004e12:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff f80e 	bl	8003e4c <HAL_I2C_ListenCpltCallback>
}
 8004e30:	e014      	b.n	8004e5c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	2b22      	cmp	r3, #34	@ 0x22
 8004e38:	d002      	beq.n	8004e40 <I2C_Slave_STOPF+0x234>
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
 8004e3c:	2b22      	cmp	r3, #34	@ 0x22
 8004e3e:	d10d      	bne.n	8004e5c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fe ffe0 	bl	8003e1c <HAL_I2C_SlaveRxCpltCallback>
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	080052bd 	.word	0x080052bd
 8004e68:	ffff0000 	.word	0xffff0000

08004e6c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e80:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d002      	beq.n	8004e8e <I2C_Slave_AF+0x22>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d129      	bne.n	8004ee2 <I2C_Slave_AF+0x76>
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	2b28      	cmp	r3, #40	@ 0x28
 8004e92:	d126      	bne.n	8004ee2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a2e      	ldr	r2, [pc, #184]	@ (8004f50 <I2C_Slave_AF+0xe4>)
 8004e98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ea8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004eb2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fe ffb6 	bl	8003e4c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004ee0:	e031      	b.n	8004f46 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b21      	cmp	r3, #33	@ 0x21
 8004ee6:	d129      	bne.n	8004f3c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a19      	ldr	r2, [pc, #100]	@ (8004f50 <I2C_Slave_AF+0xe4>)
 8004eec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2221      	movs	r2, #33	@ 0x21
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f12:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f1c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f2c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fe fc50 	bl	80037d4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fe ff67 	bl	8003e08 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f3a:	e004      	b.n	8004f46 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f44:	615a      	str	r2, [r3, #20]
}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	ffff0000 	.word	0xffff0000

08004f54 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f6c:	7bbb      	ldrb	r3, [r7, #14]
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d002      	beq.n	8004f78 <I2C_ITError+0x24>
 8004f72:	7bbb      	ldrb	r3, [r7, #14]
 8004f74:	2b40      	cmp	r3, #64	@ 0x40
 8004f76:	d10a      	bne.n	8004f8e <I2C_ITError+0x3a>
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b22      	cmp	r3, #34	@ 0x22
 8004f7c:	d107      	bne.n	8004f8e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f94:	2b28      	cmp	r3, #40	@ 0x28
 8004f96:	d107      	bne.n	8004fa8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2228      	movs	r2, #40	@ 0x28
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004fa6:	e015      	b.n	8004fd4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fb6:	d00a      	beq.n	8004fce <I2C_ITError+0x7a>
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b60      	cmp	r3, #96	@ 0x60
 8004fbc:	d007      	beq.n	8004fce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe2:	d162      	bne.n	80050aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d020      	beq.n	8005044 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	4a6a      	ldr	r2, [pc, #424]	@ (80051b0 <I2C_ITError+0x25c>)
 8005008:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500e:	4618      	mov	r0, r3
 8005010:	f7fd fe34 	bl	8002c7c <HAL_DMA_Abort_IT>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8089 	beq.w	800512e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800503e:	4610      	mov	r0, r2
 8005040:	4798      	blx	r3
 8005042:	e074      	b.n	800512e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	4a59      	ldr	r2, [pc, #356]	@ (80051b0 <I2C_ITError+0x25c>)
 800504a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd fe13 	bl	8002c7c <HAL_DMA_Abort_IT>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d068      	beq.n	800512e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	2b40      	cmp	r3, #64	@ 0x40
 8005068:	d10b      	bne.n	8005082 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80050a4:	4610      	mov	r0, r2
 80050a6:	4798      	blx	r3
 80050a8:	e041      	b.n	800512e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b60      	cmp	r3, #96	@ 0x60
 80050b4:	d125      	bne.n	8005102 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ce:	2b40      	cmp	r3, #64	@ 0x40
 80050d0:	d10b      	bne.n	80050ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0201 	bic.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fe fece 	bl	8003e9c <HAL_I2C_AbortCpltCallback>
 8005100:	e015      	b.n	800512e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510c:	2b40      	cmp	r3, #64	@ 0x40
 800510e:	d10b      	bne.n	8005128 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fe fead 	bl	8003e88 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10e      	bne.n	800515c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800516a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005172:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d113      	bne.n	80051a8 <I2C_ITError+0x254>
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b28      	cmp	r3, #40	@ 0x28
 8005184:	d110      	bne.n	80051a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a0a      	ldr	r2, [pc, #40]	@ (80051b4 <I2C_ITError+0x260>)
 800518a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fe fe52 	bl	8003e4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	080052bd 	.word	0x080052bd
 80051b4:	ffff0000 	.word	0xffff0000

080051b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	460b      	mov	r3, r1
 80051c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d006      	beq.n	80051e2 <I2C_MasterRequestWrite+0x2a>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d003      	beq.n	80051e2 <I2C_MasterRequestWrite+0x2a>
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051e0:	d108      	bne.n	80051f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e00b      	b.n	800520c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	2b12      	cmp	r3, #18
 80051fa:	d107      	bne.n	800520c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800520a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f8f7 	bl	800540c <I2C_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005232:	d103      	bne.n	800523c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800523a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e035      	b.n	80052ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005248:	d108      	bne.n	800525c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800524a:	897b      	ldrh	r3, [r7, #10]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005258:	611a      	str	r2, [r3, #16]
 800525a:	e01b      	b.n	8005294 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800525c:	897b      	ldrh	r3, [r7, #10]
 800525e:	11db      	asrs	r3, r3, #7
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 0306 	and.w	r3, r3, #6
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f063 030f 	orn	r3, r3, #15
 800526c:	b2da      	uxtb	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	490e      	ldr	r1, [pc, #56]	@ (80052b4 <I2C_MasterRequestWrite+0xfc>)
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f940 	bl	8005500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e010      	b.n	80052ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800528a:	897b      	ldrh	r3, [r7, #10]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4907      	ldr	r1, [pc, #28]	@ (80052b8 <I2C_MasterRequestWrite+0x100>)
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f930 	bl	8005500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	00010008 	.word	0x00010008
 80052b8:	00010002 	.word	0x00010002

080052bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80052d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005404 <I2C_DMAAbort+0x148>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	08db      	lsrs	r3, r3, #3
 80052dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005408 <I2C_DMAAbort+0x14c>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	0a1a      	lsrs	r2, r3, #8
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	00da      	lsls	r2, r3, #3
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	f043 0220 	orr.w	r2, r3, #32
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005302:	e00a      	b.n	800531a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3b01      	subs	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005318:	d0ea      	beq.n	80052f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005326:	2200      	movs	r2, #0
 8005328:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005336:	2200      	movs	r2, #0
 8005338:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005348:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2200      	movs	r2, #0
 800534e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535c:	2200      	movs	r2, #0
 800535e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	2200      	movs	r2, #0
 800536e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b60      	cmp	r3, #96	@ 0x60
 800538a:	d10e      	bne.n	80053aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2200      	movs	r2, #0
 80053a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053a2:	6978      	ldr	r0, [r7, #20]
 80053a4:	f7fe fd7a 	bl	8003e9c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053a8:	e027      	b.n	80053fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80053b0:	2b28      	cmp	r3, #40	@ 0x28
 80053b2:	d117      	bne.n	80053e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2228      	movs	r2, #40	@ 0x28
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80053e2:	e007      	b.n	80053f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80053f4:	6978      	ldr	r0, [r7, #20]
 80053f6:	f7fe fd47 	bl	8003e88 <HAL_I2C_ErrorCallback>
}
 80053fa:	bf00      	nop
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000000 	.word	0x20000000
 8005408:	14f8b589 	.word	0x14f8b589

0800540c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800541c:	e048      	b.n	80054b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005424:	d044      	beq.n	80054b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005426:	f7fc fccb 	bl	8001dc0 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d302      	bcc.n	800543c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d139      	bne.n	80054b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	0c1b      	lsrs	r3, r3, #16
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b01      	cmp	r3, #1
 8005444:	d10d      	bne.n	8005462 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	43da      	mvns	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4013      	ands	r3, r2
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	e00c      	b.n	800547c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	43da      	mvns	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4013      	ands	r3, r2
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	429a      	cmp	r2, r3
 8005480:	d116      	bne.n	80054b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549c:	f043 0220 	orr.w	r2, r3, #32
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e023      	b.n	80054f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d10d      	bne.n	80054d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	43da      	mvns	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4013      	ands	r3, r2
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	e00c      	b.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	43da      	mvns	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4013      	ands	r3, r2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d093      	beq.n	800541e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800550e:	e071      	b.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800551e:	d123      	bne.n	8005568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800552e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005554:	f043 0204 	orr.w	r2, r3, #4
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e067      	b.n	8005638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556e:	d041      	beq.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005570:	f7fc fc26 	bl	8001dc0 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d302      	bcc.n	8005586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d136      	bne.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d10c      	bne.n	80055aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	43da      	mvns	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4013      	ands	r3, r2
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bf14      	ite	ne
 80055a2:	2301      	movne	r3, #1
 80055a4:	2300      	moveq	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	e00b      	b.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	43da      	mvns	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4013      	ands	r3, r2
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf14      	ite	ne
 80055bc:	2301      	movne	r3, #1
 80055be:	2300      	moveq	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	f043 0220 	orr.w	r2, r3, #32
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e021      	b.n	8005638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	0c1b      	lsrs	r3, r3, #16
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d10c      	bne.n	8005618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	43da      	mvns	r2, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4013      	ands	r3, r2
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	bf14      	ite	ne
 8005610:	2301      	movne	r3, #1
 8005612:	2300      	moveq	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	e00b      	b.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	43da      	mvns	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4013      	ands	r3, r2
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	bf14      	ite	ne
 800562a:	2301      	movne	r3, #1
 800562c:	2300      	moveq	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	f47f af6d 	bne.w	8005510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800564c:	e034      	b.n	80056b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f8b8 	bl	80057c4 <I2C_IsAcknowledgeFailed>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e034      	b.n	80056c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d028      	beq.n	80056b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005666:	f7fc fbab 	bl	8001dc0 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11d      	bne.n	80056b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005686:	2b80      	cmp	r3, #128	@ 0x80
 8005688:	d016      	beq.n	80056b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a4:	f043 0220 	orr.w	r2, r3, #32
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e007      	b.n	80056c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c2:	2b80      	cmp	r3, #128	@ 0x80
 80056c4:	d1c3      	bne.n	800564e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056dc:	e034      	b.n	8005748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f870 	bl	80057c4 <I2C_IsAcknowledgeFailed>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e034      	b.n	8005758 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f4:	d028      	beq.n	8005748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f6:	f7fc fb63 	bl	8001dc0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	d302      	bcc.n	800570c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11d      	bne.n	8005748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b04      	cmp	r3, #4
 8005718:	d016      	beq.n	8005748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005734:	f043 0220 	orr.w	r2, r3, #32
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e007      	b.n	8005758 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b04      	cmp	r3, #4
 8005754:	d1c3      	bne.n	80056de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800576c:	4b13      	ldr	r3, [pc, #76]	@ (80057bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	08db      	lsrs	r3, r3, #3
 8005772:	4a13      	ldr	r2, [pc, #76]	@ (80057c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	0a1a      	lsrs	r2, r3, #8
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3b01      	subs	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d107      	bne.n	800579e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e008      	b.n	80057b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ac:	d0e9      	beq.n	8005782 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	20000000 	.word	0x20000000
 80057c0:	14f8b589 	.word	0x14f8b589

080057c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057da:	d11b      	bne.n	8005814 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	f043 0204 	orr.w	r2, r3, #4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005832:	d103      	bne.n	800583c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800583a:	e007      	b.n	800584c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005840:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005844:	d102      	bne.n	800584c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2208      	movs	r2, #8
 800584a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e267      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d075      	beq.n	8005962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005876:	4b88      	ldr	r3, [pc, #544]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	2b04      	cmp	r3, #4
 8005880:	d00c      	beq.n	800589c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005882:	4b85      	ldr	r3, [pc, #532]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800588a:	2b08      	cmp	r3, #8
 800588c:	d112      	bne.n	80058b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800588e:	4b82      	ldr	r3, [pc, #520]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800589a:	d10b      	bne.n	80058b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800589c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d05b      	beq.n	8005960 <HAL_RCC_OscConfig+0x108>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d157      	bne.n	8005960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e242      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058bc:	d106      	bne.n	80058cc <HAL_RCC_OscConfig+0x74>
 80058be:	4b76      	ldr	r3, [pc, #472]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a75      	ldr	r2, [pc, #468]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	e01d      	b.n	8005908 <HAL_RCC_OscConfig+0xb0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058d4:	d10c      	bne.n	80058f0 <HAL_RCC_OscConfig+0x98>
 80058d6:	4b70      	ldr	r3, [pc, #448]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6f      	ldr	r2, [pc, #444]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a6c      	ldr	r2, [pc, #432]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e00b      	b.n	8005908 <HAL_RCC_OscConfig+0xb0>
 80058f0:	4b69      	ldr	r3, [pc, #420]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a68      	ldr	r2, [pc, #416]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	4b66      	ldr	r3, [pc, #408]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a65      	ldr	r2, [pc, #404]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d013      	beq.n	8005938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005910:	f7fc fa56 	bl	8001dc0 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005918:	f7fc fa52 	bl	8001dc0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b64      	cmp	r3, #100	@ 0x64
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e207      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592a:	4b5b      	ldr	r3, [pc, #364]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCC_OscConfig+0xc0>
 8005936:	e014      	b.n	8005962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005938:	f7fc fa42 	bl	8001dc0 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005940:	f7fc fa3e 	bl	8001dc0 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b64      	cmp	r3, #100	@ 0x64
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e1f3      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005952:	4b51      	ldr	r3, [pc, #324]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0xe8>
 800595e:	e000      	b.n	8005962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d063      	beq.n	8005a36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800596e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00b      	beq.n	8005992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800597a:	4b47      	ldr	r3, [pc, #284]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005982:	2b08      	cmp	r3, #8
 8005984:	d11c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005986:	4b44      	ldr	r3, [pc, #272]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d116      	bne.n	80059c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005992:	4b41      	ldr	r3, [pc, #260]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_RCC_OscConfig+0x152>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d001      	beq.n	80059aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e1c7      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4937      	ldr	r1, [pc, #220]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059be:	e03a      	b.n	8005a36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d020      	beq.n	8005a0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059c8:	4b34      	ldr	r3, [pc, #208]	@ (8005a9c <HAL_RCC_OscConfig+0x244>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ce:	f7fc f9f7 	bl	8001dc0 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059d6:	f7fc f9f3 	bl	8001dc0 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e1a8      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f4:	4b28      	ldr	r3, [pc, #160]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4925      	ldr	r1, [pc, #148]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	600b      	str	r3, [r1, #0]
 8005a08:	e015      	b.n	8005a36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a0a:	4b24      	ldr	r3, [pc, #144]	@ (8005a9c <HAL_RCC_OscConfig+0x244>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a10:	f7fc f9d6 	bl	8001dc0 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a18:	f7fc f9d2 	bl	8001dc0 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e187      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d036      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a4a:	4b15      	ldr	r3, [pc, #84]	@ (8005aa0 <HAL_RCC_OscConfig+0x248>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a50:	f7fc f9b6 	bl	8001dc0 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a58:	f7fc f9b2 	bl	8001dc0 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e167      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0x200>
 8005a76:	e01b      	b.n	8005ab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a78:	4b09      	ldr	r3, [pc, #36]	@ (8005aa0 <HAL_RCC_OscConfig+0x248>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7e:	f7fc f99f 	bl	8001dc0 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a84:	e00e      	b.n	8005aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a86:	f7fc f99b 	bl	8001dc0 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d907      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e150      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	42470000 	.word	0x42470000
 8005aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa4:	4b88      	ldr	r3, [pc, #544]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1ea      	bne.n	8005a86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8097 	beq.w	8005bec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ac2:	4b81      	ldr	r3, [pc, #516]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10f      	bne.n	8005aee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	4b7d      	ldr	r3, [pc, #500]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	4a7c      	ldr	r2, [pc, #496]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ade:	4b7a      	ldr	r3, [pc, #488]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ae6:	60bb      	str	r3, [r7, #8]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aee:	4b77      	ldr	r3, [pc, #476]	@ (8005ccc <HAL_RCC_OscConfig+0x474>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d118      	bne.n	8005b2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005afa:	4b74      	ldr	r3, [pc, #464]	@ (8005ccc <HAL_RCC_OscConfig+0x474>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a73      	ldr	r2, [pc, #460]	@ (8005ccc <HAL_RCC_OscConfig+0x474>)
 8005b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b06:	f7fc f95b 	bl	8001dc0 <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b0e:	f7fc f957 	bl	8001dc0 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e10c      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b20:	4b6a      	ldr	r3, [pc, #424]	@ (8005ccc <HAL_RCC_OscConfig+0x474>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0f0      	beq.n	8005b0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d106      	bne.n	8005b42 <HAL_RCC_OscConfig+0x2ea>
 8005b34:	4b64      	ldr	r3, [pc, #400]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b38:	4a63      	ldr	r2, [pc, #396]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b40:	e01c      	b.n	8005b7c <HAL_RCC_OscConfig+0x324>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b05      	cmp	r3, #5
 8005b48:	d10c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x30c>
 8005b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4e:	4a5e      	ldr	r2, [pc, #376]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b50:	f043 0304 	orr.w	r3, r3, #4
 8005b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b56:	4b5c      	ldr	r3, [pc, #368]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b5c:	f043 0301 	orr.w	r3, r3, #1
 8005b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b62:	e00b      	b.n	8005b7c <HAL_RCC_OscConfig+0x324>
 8005b64:	4b58      	ldr	r3, [pc, #352]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b68:	4a57      	ldr	r2, [pc, #348]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b6a:	f023 0301 	bic.w	r3, r3, #1
 8005b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b70:	4b55      	ldr	r3, [pc, #340]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b74:	4a54      	ldr	r2, [pc, #336]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005b76:	f023 0304 	bic.w	r3, r3, #4
 8005b7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d015      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b84:	f7fc f91c 	bl	8001dc0 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8c:	f7fc f918 	bl	8001dc0 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e0cb      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba2:	4b49      	ldr	r3, [pc, #292]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0ee      	beq.n	8005b8c <HAL_RCC_OscConfig+0x334>
 8005bae:	e014      	b.n	8005bda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb0:	f7fc f906 	bl	8001dc0 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb6:	e00a      	b.n	8005bce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bb8:	f7fc f902 	bl	8001dc0 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e0b5      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bce:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1ee      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d105      	bne.n	8005bec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be0:	4b39      	ldr	r3, [pc, #228]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be4:	4a38      	ldr	r2, [pc, #224]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005be6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80a1 	beq.w	8005d38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bf6:	4b34      	ldr	r3, [pc, #208]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d05c      	beq.n	8005cbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d141      	bne.n	8005c8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0a:	4b31      	ldr	r3, [pc, #196]	@ (8005cd0 <HAL_RCC_OscConfig+0x478>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c10:	f7fc f8d6 	bl	8001dc0 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c18:	f7fc f8d2 	bl	8001dc0 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e087      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2a:	4b27      	ldr	r3, [pc, #156]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69da      	ldr	r2, [r3, #28]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	019b      	lsls	r3, r3, #6
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	041b      	lsls	r3, r3, #16
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	061b      	lsls	r3, r3, #24
 8005c5a:	491b      	ldr	r1, [pc, #108]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c60:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd0 <HAL_RCC_OscConfig+0x478>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c66:	f7fc f8ab 	bl	8001dc0 <HAL_GetTick>
 8005c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c6e:	f7fc f8a7 	bl	8001dc0 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e05c      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c80:	4b11      	ldr	r3, [pc, #68]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <HAL_RCC_OscConfig+0x416>
 8005c8c:	e054      	b.n	8005d38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c8e:	4b10      	ldr	r3, [pc, #64]	@ (8005cd0 <HAL_RCC_OscConfig+0x478>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c94:	f7fc f894 	bl	8001dc0 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c9c:	f7fc f890 	bl	8001dc0 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e045      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cae:	4b06      	ldr	r3, [pc, #24]	@ (8005cc8 <HAL_RCC_OscConfig+0x470>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1f0      	bne.n	8005c9c <HAL_RCC_OscConfig+0x444>
 8005cba:	e03d      	b.n	8005d38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d107      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e038      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	40007000 	.word	0x40007000
 8005cd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d44 <HAL_RCC_OscConfig+0x4ec>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d028      	beq.n	8005d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d121      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d11a      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d04:	4013      	ands	r3, r2
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d111      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d107      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e000      	b.n	8005d3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40023800 	.word	0x40023800

08005d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0cc      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d5c:	4b68      	ldr	r3, [pc, #416]	@ (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d90c      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6a:	4b65      	ldr	r3, [pc, #404]	@ (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	4b63      	ldr	r3, [pc, #396]	@ (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d001      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0b8      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d9c:	4b59      	ldr	r3, [pc, #356]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4a58      	ldr	r2, [pc, #352]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005da2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005db4:	4b53      	ldr	r3, [pc, #332]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	4a52      	ldr	r2, [pc, #328]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc0:	4b50      	ldr	r3, [pc, #320]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	494d      	ldr	r1, [pc, #308]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d044      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de6:	4b47      	ldr	r3, [pc, #284]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d119      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e07f      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d003      	beq.n	8005e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d107      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e06:	4b3f      	ldr	r3, [pc, #252]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e06f      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e16:	4b3b      	ldr	r3, [pc, #236]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e067      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e26:	4b37      	ldr	r3, [pc, #220]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f023 0203 	bic.w	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4934      	ldr	r1, [pc, #208]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e38:	f7fb ffc2 	bl	8001dc0 <HAL_GetTick>
 8005e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e40:	f7fb ffbe 	bl	8001dc0 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e04f      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e56:	4b2b      	ldr	r3, [pc, #172]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 020c 	and.w	r2, r3, #12
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d1eb      	bne.n	8005e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e68:	4b25      	ldr	r3, [pc, #148]	@ (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d20c      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e76:	4b22      	ldr	r3, [pc, #136]	@ (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7e:	4b20      	ldr	r3, [pc, #128]	@ (8005f00 <HAL_RCC_ClockConfig+0x1b8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e032      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e9c:	4b19      	ldr	r3, [pc, #100]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4916      	ldr	r1, [pc, #88]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eba:	4b12      	ldr	r3, [pc, #72]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	490e      	ldr	r1, [pc, #56]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ece:	f000 f821 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	490a      	ldr	r1, [pc, #40]	@ (8005f08 <HAL_RCC_ClockConfig+0x1c0>)
 8005ee0:	5ccb      	ldrb	r3, [r1, r3]
 8005ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee6:	4a09      	ldr	r2, [pc, #36]	@ (8005f0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eea:	4b09      	ldr	r3, [pc, #36]	@ (8005f10 <HAL_RCC_ClockConfig+0x1c8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fb ff22 	bl	8001d38 <HAL_InitTick>

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40023c00 	.word	0x40023c00
 8005f04:	40023800 	.word	0x40023800
 8005f08:	08008828 	.word	0x08008828
 8005f0c:	20000000 	.word	0x20000000
 8005f10:	20000004 	.word	0x20000004

08005f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f18:	b094      	sub	sp, #80	@ 0x50
 8005f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f20:	2300      	movs	r3, #0
 8005f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f24:	2300      	movs	r3, #0
 8005f26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f2c:	4b79      	ldr	r3, [pc, #484]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 030c 	and.w	r3, r3, #12
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d00d      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x40>
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	f200 80e1 	bhi.w	8006100 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0x34>
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d003      	beq.n	8005f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f46:	e0db      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f48:	4b73      	ldr	r3, [pc, #460]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005f4c:	e0db      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f4e:	4b73      	ldr	r3, [pc, #460]	@ (800611c <HAL_RCC_GetSysClockFreq+0x208>)
 8005f50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f52:	e0d8      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f54:	4b6f      	ldr	r3, [pc, #444]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f5e:	4b6d      	ldr	r3, [pc, #436]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d063      	beq.n	8006032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	099b      	lsrs	r3, r3, #6
 8005f70:	2200      	movs	r2, #0
 8005f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f7e:	2300      	movs	r3, #0
 8005f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f86:	4622      	mov	r2, r4
 8005f88:	462b      	mov	r3, r5
 8005f8a:	f04f 0000 	mov.w	r0, #0
 8005f8e:	f04f 0100 	mov.w	r1, #0
 8005f92:	0159      	lsls	r1, r3, #5
 8005f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f98:	0150      	lsls	r0, r2, #5
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	1a51      	subs	r1, r2, r1
 8005fa2:	6139      	str	r1, [r7, #16]
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fb8:	4659      	mov	r1, fp
 8005fba:	018b      	lsls	r3, r1, #6
 8005fbc:	4651      	mov	r1, sl
 8005fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fc2:	4651      	mov	r1, sl
 8005fc4:	018a      	lsls	r2, r1, #6
 8005fc6:	4651      	mov	r1, sl
 8005fc8:	ebb2 0801 	subs.w	r8, r2, r1
 8005fcc:	4659      	mov	r1, fp
 8005fce:	eb63 0901 	sbc.w	r9, r3, r1
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fe6:	4690      	mov	r8, r2
 8005fe8:	4699      	mov	r9, r3
 8005fea:	4623      	mov	r3, r4
 8005fec:	eb18 0303 	adds.w	r3, r8, r3
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	eb49 0303 	adc.w	r3, r9, r3
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	f04f 0300 	mov.w	r3, #0
 8006002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006006:	4629      	mov	r1, r5
 8006008:	024b      	lsls	r3, r1, #9
 800600a:	4621      	mov	r1, r4
 800600c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006010:	4621      	mov	r1, r4
 8006012:	024a      	lsls	r2, r1, #9
 8006014:	4610      	mov	r0, r2
 8006016:	4619      	mov	r1, r3
 8006018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800601a:	2200      	movs	r2, #0
 800601c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800601e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006024:	f7fa f92c 	bl	8000280 <__aeabi_uldivmod>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4613      	mov	r3, r2
 800602e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006030:	e058      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006032:	4b38      	ldr	r3, [pc, #224]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	2200      	movs	r2, #0
 800603a:	4618      	mov	r0, r3
 800603c:	4611      	mov	r1, r2
 800603e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	2300      	movs	r3, #0
 8006046:	627b      	str	r3, [r7, #36]	@ 0x24
 8006048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	f04f 0000 	mov.w	r0, #0
 8006054:	f04f 0100 	mov.w	r1, #0
 8006058:	0159      	lsls	r1, r3, #5
 800605a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800605e:	0150      	lsls	r0, r2, #5
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4641      	mov	r1, r8
 8006066:	ebb2 0a01 	subs.w	sl, r2, r1
 800606a:	4649      	mov	r1, r9
 800606c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800607c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006084:	ebb2 040a 	subs.w	r4, r2, sl
 8006088:	eb63 050b 	sbc.w	r5, r3, fp
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	00eb      	lsls	r3, r5, #3
 8006096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800609a:	00e2      	lsls	r2, r4, #3
 800609c:	4614      	mov	r4, r2
 800609e:	461d      	mov	r5, r3
 80060a0:	4643      	mov	r3, r8
 80060a2:	18e3      	adds	r3, r4, r3
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	464b      	mov	r3, r9
 80060a8:	eb45 0303 	adc.w	r3, r5, r3
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	f04f 0300 	mov.w	r3, #0
 80060b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060ba:	4629      	mov	r1, r5
 80060bc:	028b      	lsls	r3, r1, #10
 80060be:	4621      	mov	r1, r4
 80060c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060c4:	4621      	mov	r1, r4
 80060c6:	028a      	lsls	r2, r1, #10
 80060c8:	4610      	mov	r0, r2
 80060ca:	4619      	mov	r1, r3
 80060cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060ce:	2200      	movs	r2, #0
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	61fa      	str	r2, [r7, #28]
 80060d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060d8:	f7fa f8d2 	bl	8000280 <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4613      	mov	r3, r2
 80060e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x200>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	3301      	adds	r3, #1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80060f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060fe:	e002      	b.n	8006106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006100:	4b05      	ldr	r3, [pc, #20]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x204>)
 8006102:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006108:	4618      	mov	r0, r3
 800610a:	3750      	adds	r7, #80	@ 0x50
 800610c:	46bd      	mov	sp, r7
 800610e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006112:	bf00      	nop
 8006114:	40023800 	.word	0x40023800
 8006118:	00f42400 	.word	0x00f42400
 800611c:	007a1200 	.word	0x007a1200

08006120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006124:	4b03      	ldr	r3, [pc, #12]	@ (8006134 <HAL_RCC_GetHCLKFreq+0x14>)
 8006126:	681b      	ldr	r3, [r3, #0]
}
 8006128:	4618      	mov	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20000000 	.word	0x20000000

08006138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800613c:	f7ff fff0 	bl	8006120 <HAL_RCC_GetHCLKFreq>
 8006140:	4602      	mov	r2, r0
 8006142:	4b05      	ldr	r3, [pc, #20]	@ (8006158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	0a9b      	lsrs	r3, r3, #10
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	4903      	ldr	r1, [pc, #12]	@ (800615c <HAL_RCC_GetPCLK1Freq+0x24>)
 800614e:	5ccb      	ldrb	r3, [r1, r3]
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006154:	4618      	mov	r0, r3
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40023800 	.word	0x40023800
 800615c:	08008838 	.word	0x08008838

08006160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006164:	f7ff ffdc 	bl	8006120 <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b05      	ldr	r3, [pc, #20]	@ (8006180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	0b5b      	lsrs	r3, r3, #13
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4903      	ldr	r1, [pc, #12]	@ (8006184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40023800 	.word	0x40023800
 8006184:	08008838 	.word	0x08008838

08006188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e041      	b.n	800621e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fb fb1e 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f000 fca0 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	d001      	beq.n	8006240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e044      	b.n	80062ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1e      	ldr	r2, [pc, #120]	@ (80062d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d018      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x6c>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626a:	d013      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x6c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1a      	ldr	r2, [pc, #104]	@ (80062dc <HAL_TIM_Base_Start_IT+0xb4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00e      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x6c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a19      	ldr	r2, [pc, #100]	@ (80062e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d009      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x6c>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a17      	ldr	r2, [pc, #92]	@ (80062e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0x6c>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a16      	ldr	r2, [pc, #88]	@ (80062e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d111      	bne.n	80062b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b06      	cmp	r3, #6
 80062a4:	d010      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b6:	e007      	b.n	80062c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800
 80062e4:	40000c00 	.word	0x40000c00
 80062e8:	40014000 	.word	0x40014000

080062ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e041      	b.n	8006382 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f839 	bl	800638a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3304      	adds	r3, #4
 8006328:	4619      	mov	r1, r3
 800632a:	4610      	mov	r0, r2
 800632c:	f000 fbee 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d109      	bne.n	80063c4 <HAL_TIM_PWM_Start+0x24>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	bf14      	ite	ne
 80063bc:	2301      	movne	r3, #1
 80063be:	2300      	moveq	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	e022      	b.n	800640a <HAL_TIM_PWM_Start+0x6a>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d109      	bne.n	80063de <HAL_TIM_PWM_Start+0x3e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	bf14      	ite	ne
 80063d6:	2301      	movne	r3, #1
 80063d8:	2300      	moveq	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	e015      	b.n	800640a <HAL_TIM_PWM_Start+0x6a>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d109      	bne.n	80063f8 <HAL_TIM_PWM_Start+0x58>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	bf14      	ite	ne
 80063f0:	2301      	movne	r3, #1
 80063f2:	2300      	moveq	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	e008      	b.n	800640a <HAL_TIM_PWM_Start+0x6a>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e068      	b.n	80064e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <HAL_TIM_PWM_Start+0x82>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006420:	e013      	b.n	800644a <HAL_TIM_PWM_Start+0xaa>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b04      	cmp	r3, #4
 8006426:	d104      	bne.n	8006432 <HAL_TIM_PWM_Start+0x92>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006430:	e00b      	b.n	800644a <HAL_TIM_PWM_Start+0xaa>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d104      	bne.n	8006442 <HAL_TIM_PWM_Start+0xa2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006440:	e003      	b.n	800644a <HAL_TIM_PWM_Start+0xaa>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2201      	movs	r2, #1
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fe0c 	bl	8007070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a23      	ldr	r2, [pc, #140]	@ (80064ec <HAL_TIM_PWM_Start+0x14c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d107      	bne.n	8006472 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006470:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1d      	ldr	r2, [pc, #116]	@ (80064ec <HAL_TIM_PWM_Start+0x14c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_TIM_PWM_Start+0x10e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006484:	d013      	beq.n	80064ae <HAL_TIM_PWM_Start+0x10e>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a19      	ldr	r2, [pc, #100]	@ (80064f0 <HAL_TIM_PWM_Start+0x150>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_TIM_PWM_Start+0x10e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a17      	ldr	r2, [pc, #92]	@ (80064f4 <HAL_TIM_PWM_Start+0x154>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_TIM_PWM_Start+0x10e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a16      	ldr	r2, [pc, #88]	@ (80064f8 <HAL_TIM_PWM_Start+0x158>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_TIM_PWM_Start+0x10e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a14      	ldr	r2, [pc, #80]	@ (80064fc <HAL_TIM_PWM_Start+0x15c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d111      	bne.n	80064d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b06      	cmp	r3, #6
 80064be:	d010      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d0:	e007      	b.n	80064e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0201 	orr.w	r2, r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40000400 	.word	0x40000400
 80064f4:	40000800 	.word	0x40000800
 80064f8:	40000c00 	.word	0x40000c00
 80064fc:	40014000 	.word	0x40014000

08006500 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fdac 	bl	8007070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a29      	ldr	r2, [pc, #164]	@ (80065c4 <HAL_TIM_PWM_Stop+0xc4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d117      	bne.n	8006552 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	f241 1311 	movw	r3, #4369	@ 0x1111
 800652c:	4013      	ands	r3, r2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10f      	bne.n	8006552 <HAL_TIM_PWM_Stop+0x52>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6a1a      	ldr	r2, [r3, #32]
 8006538:	f240 4344 	movw	r3, #1092	@ 0x444
 800653c:	4013      	ands	r3, r2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d107      	bne.n	8006552 <HAL_TIM_PWM_Stop+0x52>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006550:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6a1a      	ldr	r2, [r3, #32]
 8006558:	f241 1311 	movw	r3, #4369	@ 0x1111
 800655c:	4013      	ands	r3, r2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10f      	bne.n	8006582 <HAL_TIM_PWM_Stop+0x82>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6a1a      	ldr	r2, [r3, #32]
 8006568:	f240 4344 	movw	r3, #1092	@ 0x444
 800656c:	4013      	ands	r3, r2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d107      	bne.n	8006582 <HAL_TIM_PWM_Stop+0x82>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0201 	bic.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d104      	bne.n	8006592 <HAL_TIM_PWM_Stop+0x92>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006590:	e013      	b.n	80065ba <HAL_TIM_PWM_Stop+0xba>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b04      	cmp	r3, #4
 8006596:	d104      	bne.n	80065a2 <HAL_TIM_PWM_Stop+0xa2>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065a0:	e00b      	b.n	80065ba <HAL_TIM_PWM_Stop+0xba>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d104      	bne.n	80065b2 <HAL_TIM_PWM_Stop+0xb2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065b0:	e003      	b.n	80065ba <HAL_TIM_PWM_Stop+0xba>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	40010000 	.word	0x40010000

080065c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d020      	beq.n	800662c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01b      	beq.n	800662c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f06f 0202 	mvn.w	r2, #2
 80065fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa5b 	bl	8006ace <HAL_TIM_IC_CaptureCallback>
 8006618:	e005      	b.n	8006626 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa4d 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fa5e 	bl	8006ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d020      	beq.n	8006678 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01b      	beq.n	8006678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0204 	mvn.w	r2, #4
 8006648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fa35 	bl	8006ace <HAL_TIM_IC_CaptureCallback>
 8006664:	e005      	b.n	8006672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa27 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fa38 	bl	8006ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d020      	beq.n	80066c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01b      	beq.n	80066c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0208 	mvn.w	r2, #8
 8006694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2204      	movs	r2, #4
 800669a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa0f 	bl	8006ace <HAL_TIM_IC_CaptureCallback>
 80066b0:	e005      	b.n	80066be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fa01 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fa12 	bl	8006ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f003 0310 	and.w	r3, r3, #16
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d020      	beq.n	8006710 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01b      	beq.n	8006710 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0210 	mvn.w	r2, #16
 80066e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2208      	movs	r2, #8
 80066e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f9e9 	bl	8006ace <HAL_TIM_IC_CaptureCallback>
 80066fc:	e005      	b.n	800670a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f9db 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f9ec 	bl	8006ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00c      	beq.n	8006734 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0201 	mvn.w	r2, #1
 800672c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fa fc6a 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00c      	beq.n	8006758 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006744:	2b00      	cmp	r3, #0
 8006746:	d007      	beq.n	8006758 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fd2a 	bl	80071ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00c      	beq.n	800677c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f9bd 	bl	8006af6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00c      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f06f 0220 	mvn.w	r2, #32
 8006798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fcfc 	bl	8007198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d101      	bne.n	80067c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067c2:	2302      	movs	r3, #2
 80067c4:	e0ae      	b.n	8006924 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b0c      	cmp	r3, #12
 80067d2:	f200 809f 	bhi.w	8006914 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80067d6:	a201      	add	r2, pc, #4	@ (adr r2, 80067dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	08006811 	.word	0x08006811
 80067e0:	08006915 	.word	0x08006915
 80067e4:	08006915 	.word	0x08006915
 80067e8:	08006915 	.word	0x08006915
 80067ec:	08006851 	.word	0x08006851
 80067f0:	08006915 	.word	0x08006915
 80067f4:	08006915 	.word	0x08006915
 80067f8:	08006915 	.word	0x08006915
 80067fc:	08006893 	.word	0x08006893
 8006800:	08006915 	.word	0x08006915
 8006804:	08006915 	.word	0x08006915
 8006808:	08006915 	.word	0x08006915
 800680c:	080068d3 	.word	0x080068d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fa04 	bl	8006c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0208 	orr.w	r2, r2, #8
 800682a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0204 	bic.w	r2, r2, #4
 800683a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6999      	ldr	r1, [r3, #24]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	619a      	str	r2, [r3, #24]
      break;
 800684e:	e064      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fa4a 	bl	8006cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800686a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699a      	ldr	r2, [r3, #24]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800687a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6999      	ldr	r1, [r3, #24]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	021a      	lsls	r2, r3, #8
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	619a      	str	r2, [r3, #24]
      break;
 8006890:	e043      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fa95 	bl	8006dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69da      	ldr	r2, [r3, #28]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0208 	orr.w	r2, r2, #8
 80068ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0204 	bic.w	r2, r2, #4
 80068bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69d9      	ldr	r1, [r3, #28]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	691a      	ldr	r2, [r3, #16]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	61da      	str	r2, [r3, #28]
      break;
 80068d0:	e023      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fadf 	bl	8006e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69da      	ldr	r2, [r3, #28]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69da      	ldr	r2, [r3, #28]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69d9      	ldr	r1, [r3, #28]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	021a      	lsls	r2, r3, #8
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	61da      	str	r2, [r3, #28]
      break;
 8006912:	e002      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	75fb      	strb	r3, [r7, #23]
      break;
 8006918:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_TIM_ConfigClockSource+0x1c>
 8006944:	2302      	movs	r3, #2
 8006946:	e0b4      	b.n	8006ab2 <HAL_TIM_ConfigClockSource+0x186>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800696e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006980:	d03e      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0xd4>
 8006982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006986:	f200 8087 	bhi.w	8006a98 <HAL_TIM_ConfigClockSource+0x16c>
 800698a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800698e:	f000 8086 	beq.w	8006a9e <HAL_TIM_ConfigClockSource+0x172>
 8006992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006996:	d87f      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x16c>
 8006998:	2b70      	cmp	r3, #112	@ 0x70
 800699a:	d01a      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0xa6>
 800699c:	2b70      	cmp	r3, #112	@ 0x70
 800699e:	d87b      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x16c>
 80069a0:	2b60      	cmp	r3, #96	@ 0x60
 80069a2:	d050      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x11a>
 80069a4:	2b60      	cmp	r3, #96	@ 0x60
 80069a6:	d877      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x16c>
 80069a8:	2b50      	cmp	r3, #80	@ 0x50
 80069aa:	d03c      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0xfa>
 80069ac:	2b50      	cmp	r3, #80	@ 0x50
 80069ae:	d873      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x16c>
 80069b0:	2b40      	cmp	r3, #64	@ 0x40
 80069b2:	d058      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x13a>
 80069b4:	2b40      	cmp	r3, #64	@ 0x40
 80069b6:	d86f      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x16c>
 80069b8:	2b30      	cmp	r3, #48	@ 0x30
 80069ba:	d064      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x15a>
 80069bc:	2b30      	cmp	r3, #48	@ 0x30
 80069be:	d86b      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x16c>
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d060      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x15a>
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d867      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x16c>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d05c      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x15a>
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	d05a      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x15a>
 80069d0:	e062      	b.n	8006a98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069e2:	f000 fb25 	bl	8007030 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	609a      	str	r2, [r3, #8]
      break;
 80069fe:	e04f      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a10:	f000 fb0e 	bl	8007030 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a22:	609a      	str	r2, [r3, #8]
      break;
 8006a24:	e03c      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a32:	461a      	mov	r2, r3
 8006a34:	f000 fa82 	bl	8006f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2150      	movs	r1, #80	@ 0x50
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fadb 	bl	8006ffa <TIM_ITRx_SetConfig>
      break;
 8006a44:	e02c      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a52:	461a      	mov	r2, r3
 8006a54:	f000 faa1 	bl	8006f9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2160      	movs	r1, #96	@ 0x60
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 facb 	bl	8006ffa <TIM_ITRx_SetConfig>
      break;
 8006a64:	e01c      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a72:	461a      	mov	r2, r3
 8006a74:	f000 fa62 	bl	8006f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2140      	movs	r1, #64	@ 0x40
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fabb 	bl	8006ffa <TIM_ITRx_SetConfig>
      break;
 8006a84:	e00c      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f000 fab2 	bl	8006ffa <TIM_ITRx_SetConfig>
      break;
 8006a96:	e003      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a9c:	e000      	b.n	8006aa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a3a      	ldr	r2, [pc, #232]	@ (8006c08 <TIM_Base_SetConfig+0xfc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00f      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2a:	d00b      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a37      	ldr	r2, [pc, #220]	@ (8006c0c <TIM_Base_SetConfig+0x100>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d007      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a36      	ldr	r2, [pc, #216]	@ (8006c10 <TIM_Base_SetConfig+0x104>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a35      	ldr	r2, [pc, #212]	@ (8006c14 <TIM_Base_SetConfig+0x108>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d108      	bne.n	8006b56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2b      	ldr	r2, [pc, #172]	@ (8006c08 <TIM_Base_SetConfig+0xfc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01b      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b64:	d017      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a28      	ldr	r2, [pc, #160]	@ (8006c0c <TIM_Base_SetConfig+0x100>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a27      	ldr	r2, [pc, #156]	@ (8006c10 <TIM_Base_SetConfig+0x104>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a26      	ldr	r2, [pc, #152]	@ (8006c14 <TIM_Base_SetConfig+0x108>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a25      	ldr	r2, [pc, #148]	@ (8006c18 <TIM_Base_SetConfig+0x10c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a24      	ldr	r2, [pc, #144]	@ (8006c1c <TIM_Base_SetConfig+0x110>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a23      	ldr	r2, [pc, #140]	@ (8006c20 <TIM_Base_SetConfig+0x114>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a0e      	ldr	r2, [pc, #56]	@ (8006c08 <TIM_Base_SetConfig+0xfc>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d103      	bne.n	8006bdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d105      	bne.n	8006bfa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f023 0201 	bic.w	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	611a      	str	r2, [r3, #16]
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40010000 	.word	0x40010000
 8006c0c:	40000400 	.word	0x40000400
 8006c10:	40000800 	.word	0x40000800
 8006c14:	40000c00 	.word	0x40000c00
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40014400 	.word	0x40014400
 8006c20:	40014800 	.word	0x40014800

08006c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f023 0201 	bic.w	r2, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f023 0302 	bic.w	r3, r3, #2
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cec <TIM_OC1_SetConfig+0xc8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d10c      	bne.n	8006c9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 0308 	bic.w	r3, r3, #8
 8006c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f023 0304 	bic.w	r3, r3, #4
 8006c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a13      	ldr	r2, [pc, #76]	@ (8006cec <TIM_OC1_SetConfig+0xc8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d111      	bne.n	8006cc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	621a      	str	r2, [r3, #32]
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	40010000 	.word	0x40010000

08006cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f023 0210 	bic.w	r2, r3, #16
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f023 0320 	bic.w	r3, r3, #32
 8006d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <TIM_OC2_SetConfig+0xd4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10d      	bne.n	8006d6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	011b      	lsls	r3, r3, #4
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a15      	ldr	r2, [pc, #84]	@ (8006dc4 <TIM_OC2_SetConfig+0xd4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d113      	bne.n	8006d9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	621a      	str	r2, [r3, #32]
}
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40010000 	.word	0x40010000

08006dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0303 	bic.w	r3, r3, #3
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	021b      	lsls	r3, r3, #8
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a1d      	ldr	r2, [pc, #116]	@ (8006e98 <TIM_OC3_SetConfig+0xd0>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d10d      	bne.n	8006e42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a14      	ldr	r2, [pc, #80]	@ (8006e98 <TIM_OC3_SetConfig+0xd0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d113      	bne.n	8006e72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	621a      	str	r2, [r3, #32]
}
 8006e8c:	bf00      	nop
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40010000 	.word	0x40010000

08006e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	031b      	lsls	r3, r3, #12
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a10      	ldr	r2, [pc, #64]	@ (8006f38 <TIM_OC4_SetConfig+0x9c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d109      	bne.n	8006f10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	019b      	lsls	r3, r3, #6
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	621a      	str	r2, [r3, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40010000 	.word	0x40010000

08006f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f023 0201 	bic.w	r2, r3, #1
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	011b      	lsls	r3, r3, #4
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f023 030a 	bic.w	r3, r3, #10
 8006f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	621a      	str	r2, [r3, #32]
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b087      	sub	sp, #28
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	f023 0210 	bic.w	r2, r3, #16
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	031b      	lsls	r3, r3, #12
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006fd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	f043 0307 	orr.w	r3, r3, #7
 800701c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	609a      	str	r2, [r3, #8]
}
 8007024:	bf00      	nop
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800704a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	021a      	lsls	r2, r3, #8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	431a      	orrs	r2, r3
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	4313      	orrs	r3, r2
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	609a      	str	r2, [r3, #8]
}
 8007064:	bf00      	nop
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	2201      	movs	r2, #1
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	43db      	mvns	r3, r3
 8007092:	401a      	ands	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a1a      	ldr	r2, [r3, #32]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	fa01 f303 	lsl.w	r3, r1, r3
 80070a8:	431a      	orrs	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e050      	b.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a1c      	ldr	r2, [pc, #112]	@ (8007184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d018      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007120:	d013      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a18      	ldr	r2, [pc, #96]	@ (8007188 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00e      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a16      	ldr	r2, [pc, #88]	@ (800718c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d009      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a15      	ldr	r2, [pc, #84]	@ (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d004      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a13      	ldr	r2, [pc, #76]	@ (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d10c      	bne.n	8007164 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	4313      	orrs	r3, r2
 800715a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40010000 	.word	0x40010000
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40000c00 	.word	0x40000c00
 8007194:	40014000 	.word	0x40014000

08007198 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e042      	b.n	8007258 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fa fb9e 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2224      	movs	r2, #36	@ 0x24
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f82b 	bl	8007260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695a      	ldr	r2, [r3, #20]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007264:	b0c0      	sub	sp, #256	@ 0x100
 8007266:	af00      	add	r7, sp, #0
 8007268:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800726c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727c:	68d9      	ldr	r1, [r3, #12]
 800727e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	ea40 0301 	orr.w	r3, r0, r1
 8007288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800728a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	431a      	orrs	r2, r3
 8007298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	431a      	orrs	r2, r3
 80072a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80072b8:	f021 010c 	bic.w	r1, r1, #12
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072c6:	430b      	orrs	r3, r1
 80072c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072da:	6999      	ldr	r1, [r3, #24]
 80072dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	ea40 0301 	orr.w	r3, r0, r1
 80072e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4b8f      	ldr	r3, [pc, #572]	@ (800752c <UART_SetConfig+0x2cc>)
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d005      	beq.n	8007300 <UART_SetConfig+0xa0>
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	4b8d      	ldr	r3, [pc, #564]	@ (8007530 <UART_SetConfig+0x2d0>)
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d104      	bne.n	800730a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007300:	f7fe ff2e 	bl	8006160 <HAL_RCC_GetPCLK2Freq>
 8007304:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007308:	e003      	b.n	8007312 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800730a:	f7fe ff15 	bl	8006138 <HAL_RCC_GetPCLK1Freq>
 800730e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800731c:	f040 810c 	bne.w	8007538 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007324:	2200      	movs	r2, #0
 8007326:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800732a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800732e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007332:	4622      	mov	r2, r4
 8007334:	462b      	mov	r3, r5
 8007336:	1891      	adds	r1, r2, r2
 8007338:	65b9      	str	r1, [r7, #88]	@ 0x58
 800733a:	415b      	adcs	r3, r3
 800733c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800733e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007342:	4621      	mov	r1, r4
 8007344:	eb12 0801 	adds.w	r8, r2, r1
 8007348:	4629      	mov	r1, r5
 800734a:	eb43 0901 	adc.w	r9, r3, r1
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800735a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800735e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007362:	4690      	mov	r8, r2
 8007364:	4699      	mov	r9, r3
 8007366:	4623      	mov	r3, r4
 8007368:	eb18 0303 	adds.w	r3, r8, r3
 800736c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007370:	462b      	mov	r3, r5
 8007372:	eb49 0303 	adc.w	r3, r9, r3
 8007376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800737a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007386:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800738a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800738e:	460b      	mov	r3, r1
 8007390:	18db      	adds	r3, r3, r3
 8007392:	653b      	str	r3, [r7, #80]	@ 0x50
 8007394:	4613      	mov	r3, r2
 8007396:	eb42 0303 	adc.w	r3, r2, r3
 800739a:	657b      	str	r3, [r7, #84]	@ 0x54
 800739c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80073a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80073a4:	f7f8 ff6c 	bl	8000280 <__aeabi_uldivmod>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4b61      	ldr	r3, [pc, #388]	@ (8007534 <UART_SetConfig+0x2d4>)
 80073ae:	fba3 2302 	umull	r2, r3, r3, r2
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	011c      	lsls	r4, r3, #4
 80073b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073c8:	4642      	mov	r2, r8
 80073ca:	464b      	mov	r3, r9
 80073cc:	1891      	adds	r1, r2, r2
 80073ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073d0:	415b      	adcs	r3, r3
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073d8:	4641      	mov	r1, r8
 80073da:	eb12 0a01 	adds.w	sl, r2, r1
 80073de:	4649      	mov	r1, r9
 80073e0:	eb43 0b01 	adc.w	fp, r3, r1
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073f8:	4692      	mov	sl, r2
 80073fa:	469b      	mov	fp, r3
 80073fc:	4643      	mov	r3, r8
 80073fe:	eb1a 0303 	adds.w	r3, sl, r3
 8007402:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007406:	464b      	mov	r3, r9
 8007408:	eb4b 0303 	adc.w	r3, fp, r3
 800740c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800741c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007420:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007424:	460b      	mov	r3, r1
 8007426:	18db      	adds	r3, r3, r3
 8007428:	643b      	str	r3, [r7, #64]	@ 0x40
 800742a:	4613      	mov	r3, r2
 800742c:	eb42 0303 	adc.w	r3, r2, r3
 8007430:	647b      	str	r3, [r7, #68]	@ 0x44
 8007432:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007436:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800743a:	f7f8 ff21 	bl	8000280 <__aeabi_uldivmod>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	4611      	mov	r1, r2
 8007444:	4b3b      	ldr	r3, [pc, #236]	@ (8007534 <UART_SetConfig+0x2d4>)
 8007446:	fba3 2301 	umull	r2, r3, r3, r1
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	2264      	movs	r2, #100	@ 0x64
 800744e:	fb02 f303 	mul.w	r3, r2, r3
 8007452:	1acb      	subs	r3, r1, r3
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800745a:	4b36      	ldr	r3, [pc, #216]	@ (8007534 <UART_SetConfig+0x2d4>)
 800745c:	fba3 2302 	umull	r2, r3, r3, r2
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007468:	441c      	add	r4, r3
 800746a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800746e:	2200      	movs	r2, #0
 8007470:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007474:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007478:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800747c:	4642      	mov	r2, r8
 800747e:	464b      	mov	r3, r9
 8007480:	1891      	adds	r1, r2, r2
 8007482:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007484:	415b      	adcs	r3, r3
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800748c:	4641      	mov	r1, r8
 800748e:	1851      	adds	r1, r2, r1
 8007490:	6339      	str	r1, [r7, #48]	@ 0x30
 8007492:	4649      	mov	r1, r9
 8007494:	414b      	adcs	r3, r1
 8007496:	637b      	str	r3, [r7, #52]	@ 0x34
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80074a4:	4659      	mov	r1, fp
 80074a6:	00cb      	lsls	r3, r1, #3
 80074a8:	4651      	mov	r1, sl
 80074aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ae:	4651      	mov	r1, sl
 80074b0:	00ca      	lsls	r2, r1, #3
 80074b2:	4610      	mov	r0, r2
 80074b4:	4619      	mov	r1, r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	4642      	mov	r2, r8
 80074ba:	189b      	adds	r3, r3, r2
 80074bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074c0:	464b      	mov	r3, r9
 80074c2:	460a      	mov	r2, r1
 80074c4:	eb42 0303 	adc.w	r3, r2, r3
 80074c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80074dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074e0:	460b      	mov	r3, r1
 80074e2:	18db      	adds	r3, r3, r3
 80074e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074e6:	4613      	mov	r3, r2
 80074e8:	eb42 0303 	adc.w	r3, r2, r3
 80074ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074f6:	f7f8 fec3 	bl	8000280 <__aeabi_uldivmod>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007534 <UART_SetConfig+0x2d4>)
 8007500:	fba3 1302 	umull	r1, r3, r3, r2
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	2164      	movs	r1, #100	@ 0x64
 8007508:	fb01 f303 	mul.w	r3, r1, r3
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	3332      	adds	r3, #50	@ 0x32
 8007512:	4a08      	ldr	r2, [pc, #32]	@ (8007534 <UART_SetConfig+0x2d4>)
 8007514:	fba2 2303 	umull	r2, r3, r2, r3
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	f003 0207 	and.w	r2, r3, #7
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4422      	add	r2, r4
 8007526:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007528:	e106      	b.n	8007738 <UART_SetConfig+0x4d8>
 800752a:	bf00      	nop
 800752c:	40011000 	.word	0x40011000
 8007530:	40011400 	.word	0x40011400
 8007534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800753c:	2200      	movs	r2, #0
 800753e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007542:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800754a:	4642      	mov	r2, r8
 800754c:	464b      	mov	r3, r9
 800754e:	1891      	adds	r1, r2, r2
 8007550:	6239      	str	r1, [r7, #32]
 8007552:	415b      	adcs	r3, r3
 8007554:	627b      	str	r3, [r7, #36]	@ 0x24
 8007556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800755a:	4641      	mov	r1, r8
 800755c:	1854      	adds	r4, r2, r1
 800755e:	4649      	mov	r1, r9
 8007560:	eb43 0501 	adc.w	r5, r3, r1
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	00eb      	lsls	r3, r5, #3
 800756e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007572:	00e2      	lsls	r2, r4, #3
 8007574:	4614      	mov	r4, r2
 8007576:	461d      	mov	r5, r3
 8007578:	4643      	mov	r3, r8
 800757a:	18e3      	adds	r3, r4, r3
 800757c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007580:	464b      	mov	r3, r9
 8007582:	eb45 0303 	adc.w	r3, r5, r3
 8007586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800758a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007596:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800759a:	f04f 0200 	mov.w	r2, #0
 800759e:	f04f 0300 	mov.w	r3, #0
 80075a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80075a6:	4629      	mov	r1, r5
 80075a8:	008b      	lsls	r3, r1, #2
 80075aa:	4621      	mov	r1, r4
 80075ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075b0:	4621      	mov	r1, r4
 80075b2:	008a      	lsls	r2, r1, #2
 80075b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80075b8:	f7f8 fe62 	bl	8000280 <__aeabi_uldivmod>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4b60      	ldr	r3, [pc, #384]	@ (8007744 <UART_SetConfig+0x4e4>)
 80075c2:	fba3 2302 	umull	r2, r3, r3, r2
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	011c      	lsls	r4, r3, #4
 80075ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80075dc:	4642      	mov	r2, r8
 80075de:	464b      	mov	r3, r9
 80075e0:	1891      	adds	r1, r2, r2
 80075e2:	61b9      	str	r1, [r7, #24]
 80075e4:	415b      	adcs	r3, r3
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075ec:	4641      	mov	r1, r8
 80075ee:	1851      	adds	r1, r2, r1
 80075f0:	6139      	str	r1, [r7, #16]
 80075f2:	4649      	mov	r1, r9
 80075f4:	414b      	adcs	r3, r1
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007604:	4659      	mov	r1, fp
 8007606:	00cb      	lsls	r3, r1, #3
 8007608:	4651      	mov	r1, sl
 800760a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800760e:	4651      	mov	r1, sl
 8007610:	00ca      	lsls	r2, r1, #3
 8007612:	4610      	mov	r0, r2
 8007614:	4619      	mov	r1, r3
 8007616:	4603      	mov	r3, r0
 8007618:	4642      	mov	r2, r8
 800761a:	189b      	adds	r3, r3, r2
 800761c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007620:	464b      	mov	r3, r9
 8007622:	460a      	mov	r2, r1
 8007624:	eb42 0303 	adc.w	r3, r2, r3
 8007628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800762c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007636:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007644:	4649      	mov	r1, r9
 8007646:	008b      	lsls	r3, r1, #2
 8007648:	4641      	mov	r1, r8
 800764a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800764e:	4641      	mov	r1, r8
 8007650:	008a      	lsls	r2, r1, #2
 8007652:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007656:	f7f8 fe13 	bl	8000280 <__aeabi_uldivmod>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	4611      	mov	r1, r2
 8007660:	4b38      	ldr	r3, [pc, #224]	@ (8007744 <UART_SetConfig+0x4e4>)
 8007662:	fba3 2301 	umull	r2, r3, r3, r1
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	2264      	movs	r2, #100	@ 0x64
 800766a:	fb02 f303 	mul.w	r3, r2, r3
 800766e:	1acb      	subs	r3, r1, r3
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	3332      	adds	r3, #50	@ 0x32
 8007674:	4a33      	ldr	r2, [pc, #204]	@ (8007744 <UART_SetConfig+0x4e4>)
 8007676:	fba2 2303 	umull	r2, r3, r2, r3
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007680:	441c      	add	r4, r3
 8007682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007686:	2200      	movs	r2, #0
 8007688:	673b      	str	r3, [r7, #112]	@ 0x70
 800768a:	677a      	str	r2, [r7, #116]	@ 0x74
 800768c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007690:	4642      	mov	r2, r8
 8007692:	464b      	mov	r3, r9
 8007694:	1891      	adds	r1, r2, r2
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	415b      	adcs	r3, r3
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076a0:	4641      	mov	r1, r8
 80076a2:	1851      	adds	r1, r2, r1
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	4649      	mov	r1, r9
 80076a8:	414b      	adcs	r3, r1
 80076aa:	607b      	str	r3, [r7, #4]
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076b8:	4659      	mov	r1, fp
 80076ba:	00cb      	lsls	r3, r1, #3
 80076bc:	4651      	mov	r1, sl
 80076be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076c2:	4651      	mov	r1, sl
 80076c4:	00ca      	lsls	r2, r1, #3
 80076c6:	4610      	mov	r0, r2
 80076c8:	4619      	mov	r1, r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	4642      	mov	r2, r8
 80076ce:	189b      	adds	r3, r3, r2
 80076d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076d2:	464b      	mov	r3, r9
 80076d4:	460a      	mov	r2, r1
 80076d6:	eb42 0303 	adc.w	r3, r2, r3
 80076da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80076e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076f4:	4649      	mov	r1, r9
 80076f6:	008b      	lsls	r3, r1, #2
 80076f8:	4641      	mov	r1, r8
 80076fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076fe:	4641      	mov	r1, r8
 8007700:	008a      	lsls	r2, r1, #2
 8007702:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007706:	f7f8 fdbb 	bl	8000280 <__aeabi_uldivmod>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4b0d      	ldr	r3, [pc, #52]	@ (8007744 <UART_SetConfig+0x4e4>)
 8007710:	fba3 1302 	umull	r1, r3, r3, r2
 8007714:	095b      	lsrs	r3, r3, #5
 8007716:	2164      	movs	r1, #100	@ 0x64
 8007718:	fb01 f303 	mul.w	r3, r1, r3
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	3332      	adds	r3, #50	@ 0x32
 8007722:	4a08      	ldr	r2, [pc, #32]	@ (8007744 <UART_SetConfig+0x4e4>)
 8007724:	fba2 2303 	umull	r2, r3, r2, r3
 8007728:	095b      	lsrs	r3, r3, #5
 800772a:	f003 020f 	and.w	r2, r3, #15
 800772e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4422      	add	r2, r4
 8007736:	609a      	str	r2, [r3, #8]
}
 8007738:	bf00      	nop
 800773a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800773e:	46bd      	mov	sp, r7
 8007740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007744:	51eb851f 	.word	0x51eb851f

08007748 <srand>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4b10      	ldr	r3, [pc, #64]	@ (800778c <srand+0x44>)
 800774c:	681d      	ldr	r5, [r3, #0]
 800774e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007750:	4604      	mov	r4, r0
 8007752:	b9b3      	cbnz	r3, 8007782 <srand+0x3a>
 8007754:	2018      	movs	r0, #24
 8007756:	f000 fa7b 	bl	8007c50 <malloc>
 800775a:	4602      	mov	r2, r0
 800775c:	6328      	str	r0, [r5, #48]	@ 0x30
 800775e:	b920      	cbnz	r0, 800776a <srand+0x22>
 8007760:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <srand+0x48>)
 8007762:	480c      	ldr	r0, [pc, #48]	@ (8007794 <srand+0x4c>)
 8007764:	2146      	movs	r1, #70	@ 0x46
 8007766:	f000 fa0b 	bl	8007b80 <__assert_func>
 800776a:	490b      	ldr	r1, [pc, #44]	@ (8007798 <srand+0x50>)
 800776c:	4b0b      	ldr	r3, [pc, #44]	@ (800779c <srand+0x54>)
 800776e:	e9c0 1300 	strd	r1, r3, [r0]
 8007772:	4b0b      	ldr	r3, [pc, #44]	@ (80077a0 <srand+0x58>)
 8007774:	6083      	str	r3, [r0, #8]
 8007776:	230b      	movs	r3, #11
 8007778:	8183      	strh	r3, [r0, #12]
 800777a:	2100      	movs	r1, #0
 800777c:	2001      	movs	r0, #1
 800777e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007782:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007784:	2200      	movs	r2, #0
 8007786:	611c      	str	r4, [r3, #16]
 8007788:	615a      	str	r2, [r3, #20]
 800778a:	bd38      	pop	{r3, r4, r5, pc}
 800778c:	20000018 	.word	0x20000018
 8007790:	08008848 	.word	0x08008848
 8007794:	0800885f 	.word	0x0800885f
 8007798:	abcd330e 	.word	0xabcd330e
 800779c:	e66d1234 	.word	0xe66d1234
 80077a0:	0005deec 	.word	0x0005deec

080077a4 <rand>:
 80077a4:	4b16      	ldr	r3, [pc, #88]	@ (8007800 <rand+0x5c>)
 80077a6:	b510      	push	{r4, lr}
 80077a8:	681c      	ldr	r4, [r3, #0]
 80077aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80077ac:	b9b3      	cbnz	r3, 80077dc <rand+0x38>
 80077ae:	2018      	movs	r0, #24
 80077b0:	f000 fa4e 	bl	8007c50 <malloc>
 80077b4:	4602      	mov	r2, r0
 80077b6:	6320      	str	r0, [r4, #48]	@ 0x30
 80077b8:	b920      	cbnz	r0, 80077c4 <rand+0x20>
 80077ba:	4b12      	ldr	r3, [pc, #72]	@ (8007804 <rand+0x60>)
 80077bc:	4812      	ldr	r0, [pc, #72]	@ (8007808 <rand+0x64>)
 80077be:	2152      	movs	r1, #82	@ 0x52
 80077c0:	f000 f9de 	bl	8007b80 <__assert_func>
 80077c4:	4911      	ldr	r1, [pc, #68]	@ (800780c <rand+0x68>)
 80077c6:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <rand+0x6c>)
 80077c8:	e9c0 1300 	strd	r1, r3, [r0]
 80077cc:	4b11      	ldr	r3, [pc, #68]	@ (8007814 <rand+0x70>)
 80077ce:	6083      	str	r3, [r0, #8]
 80077d0:	230b      	movs	r3, #11
 80077d2:	8183      	strh	r3, [r0, #12]
 80077d4:	2100      	movs	r1, #0
 80077d6:	2001      	movs	r0, #1
 80077d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80077dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80077de:	480e      	ldr	r0, [pc, #56]	@ (8007818 <rand+0x74>)
 80077e0:	690b      	ldr	r3, [r1, #16]
 80077e2:	694c      	ldr	r4, [r1, #20]
 80077e4:	4a0d      	ldr	r2, [pc, #52]	@ (800781c <rand+0x78>)
 80077e6:	4358      	muls	r0, r3
 80077e8:	fb02 0004 	mla	r0, r2, r4, r0
 80077ec:	fba3 3202 	umull	r3, r2, r3, r2
 80077f0:	3301      	adds	r3, #1
 80077f2:	eb40 0002 	adc.w	r0, r0, r2
 80077f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80077fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80077fe:	bd10      	pop	{r4, pc}
 8007800:	20000018 	.word	0x20000018
 8007804:	08008848 	.word	0x08008848
 8007808:	0800885f 	.word	0x0800885f
 800780c:	abcd330e 	.word	0xabcd330e
 8007810:	e66d1234 	.word	0xe66d1234
 8007814:	0005deec 	.word	0x0005deec
 8007818:	5851f42d 	.word	0x5851f42d
 800781c:	4c957f2d 	.word	0x4c957f2d

08007820 <std>:
 8007820:	2300      	movs	r3, #0
 8007822:	b510      	push	{r4, lr}
 8007824:	4604      	mov	r4, r0
 8007826:	e9c0 3300 	strd	r3, r3, [r0]
 800782a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800782e:	6083      	str	r3, [r0, #8]
 8007830:	8181      	strh	r1, [r0, #12]
 8007832:	6643      	str	r3, [r0, #100]	@ 0x64
 8007834:	81c2      	strh	r2, [r0, #14]
 8007836:	6183      	str	r3, [r0, #24]
 8007838:	4619      	mov	r1, r3
 800783a:	2208      	movs	r2, #8
 800783c:	305c      	adds	r0, #92	@ 0x5c
 800783e:	f000 f8f4 	bl	8007a2a <memset>
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <std+0x58>)
 8007844:	6263      	str	r3, [r4, #36]	@ 0x24
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <std+0x5c>)
 8007848:	62a3      	str	r3, [r4, #40]	@ 0x28
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <std+0x60>)
 800784c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800784e:	4b0d      	ldr	r3, [pc, #52]	@ (8007884 <std+0x64>)
 8007850:	6323      	str	r3, [r4, #48]	@ 0x30
 8007852:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <std+0x68>)
 8007854:	6224      	str	r4, [r4, #32]
 8007856:	429c      	cmp	r4, r3
 8007858:	d006      	beq.n	8007868 <std+0x48>
 800785a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800785e:	4294      	cmp	r4, r2
 8007860:	d002      	beq.n	8007868 <std+0x48>
 8007862:	33d0      	adds	r3, #208	@ 0xd0
 8007864:	429c      	cmp	r4, r3
 8007866:	d105      	bne.n	8007874 <std+0x54>
 8007868:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800786c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007870:	f000 b982 	b.w	8007b78 <__retarget_lock_init_recursive>
 8007874:	bd10      	pop	{r4, pc}
 8007876:	bf00      	nop
 8007878:	080079a5 	.word	0x080079a5
 800787c:	080079c7 	.word	0x080079c7
 8007880:	080079ff 	.word	0x080079ff
 8007884:	08007a23 	.word	0x08007a23
 8007888:	200004dc 	.word	0x200004dc

0800788c <stdio_exit_handler>:
 800788c:	4a02      	ldr	r2, [pc, #8]	@ (8007898 <stdio_exit_handler+0xc>)
 800788e:	4903      	ldr	r1, [pc, #12]	@ (800789c <stdio_exit_handler+0x10>)
 8007890:	4803      	ldr	r0, [pc, #12]	@ (80078a0 <stdio_exit_handler+0x14>)
 8007892:	f000 b869 	b.w	8007968 <_fwalk_sglue>
 8007896:	bf00      	nop
 8007898:	2000000c 	.word	0x2000000c
 800789c:	08007ec5 	.word	0x08007ec5
 80078a0:	2000001c 	.word	0x2000001c

080078a4 <cleanup_stdio>:
 80078a4:	6841      	ldr	r1, [r0, #4]
 80078a6:	4b0c      	ldr	r3, [pc, #48]	@ (80078d8 <cleanup_stdio+0x34>)
 80078a8:	4299      	cmp	r1, r3
 80078aa:	b510      	push	{r4, lr}
 80078ac:	4604      	mov	r4, r0
 80078ae:	d001      	beq.n	80078b4 <cleanup_stdio+0x10>
 80078b0:	f000 fb08 	bl	8007ec4 <_fflush_r>
 80078b4:	68a1      	ldr	r1, [r4, #8]
 80078b6:	4b09      	ldr	r3, [pc, #36]	@ (80078dc <cleanup_stdio+0x38>)
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d002      	beq.n	80078c2 <cleanup_stdio+0x1e>
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 fb01 	bl	8007ec4 <_fflush_r>
 80078c2:	68e1      	ldr	r1, [r4, #12]
 80078c4:	4b06      	ldr	r3, [pc, #24]	@ (80078e0 <cleanup_stdio+0x3c>)
 80078c6:	4299      	cmp	r1, r3
 80078c8:	d004      	beq.n	80078d4 <cleanup_stdio+0x30>
 80078ca:	4620      	mov	r0, r4
 80078cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d0:	f000 baf8 	b.w	8007ec4 <_fflush_r>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	bf00      	nop
 80078d8:	200004dc 	.word	0x200004dc
 80078dc:	20000544 	.word	0x20000544
 80078e0:	200005ac 	.word	0x200005ac

080078e4 <global_stdio_init.part.0>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007914 <global_stdio_init.part.0+0x30>)
 80078e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007918 <global_stdio_init.part.0+0x34>)
 80078ea:	4a0c      	ldr	r2, [pc, #48]	@ (800791c <global_stdio_init.part.0+0x38>)
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	4620      	mov	r0, r4
 80078f0:	2200      	movs	r2, #0
 80078f2:	2104      	movs	r1, #4
 80078f4:	f7ff ff94 	bl	8007820 <std>
 80078f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078fc:	2201      	movs	r2, #1
 80078fe:	2109      	movs	r1, #9
 8007900:	f7ff ff8e 	bl	8007820 <std>
 8007904:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007908:	2202      	movs	r2, #2
 800790a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800790e:	2112      	movs	r1, #18
 8007910:	f7ff bf86 	b.w	8007820 <std>
 8007914:	20000614 	.word	0x20000614
 8007918:	200004dc 	.word	0x200004dc
 800791c:	0800788d 	.word	0x0800788d

08007920 <__sfp_lock_acquire>:
 8007920:	4801      	ldr	r0, [pc, #4]	@ (8007928 <__sfp_lock_acquire+0x8>)
 8007922:	f000 b92a 	b.w	8007b7a <__retarget_lock_acquire_recursive>
 8007926:	bf00      	nop
 8007928:	2000061d 	.word	0x2000061d

0800792c <__sfp_lock_release>:
 800792c:	4801      	ldr	r0, [pc, #4]	@ (8007934 <__sfp_lock_release+0x8>)
 800792e:	f000 b925 	b.w	8007b7c <__retarget_lock_release_recursive>
 8007932:	bf00      	nop
 8007934:	2000061d 	.word	0x2000061d

08007938 <__sinit>:
 8007938:	b510      	push	{r4, lr}
 800793a:	4604      	mov	r4, r0
 800793c:	f7ff fff0 	bl	8007920 <__sfp_lock_acquire>
 8007940:	6a23      	ldr	r3, [r4, #32]
 8007942:	b11b      	cbz	r3, 800794c <__sinit+0x14>
 8007944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007948:	f7ff bff0 	b.w	800792c <__sfp_lock_release>
 800794c:	4b04      	ldr	r3, [pc, #16]	@ (8007960 <__sinit+0x28>)
 800794e:	6223      	str	r3, [r4, #32]
 8007950:	4b04      	ldr	r3, [pc, #16]	@ (8007964 <__sinit+0x2c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f5      	bne.n	8007944 <__sinit+0xc>
 8007958:	f7ff ffc4 	bl	80078e4 <global_stdio_init.part.0>
 800795c:	e7f2      	b.n	8007944 <__sinit+0xc>
 800795e:	bf00      	nop
 8007960:	080078a5 	.word	0x080078a5
 8007964:	20000614 	.word	0x20000614

08007968 <_fwalk_sglue>:
 8007968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796c:	4607      	mov	r7, r0
 800796e:	4688      	mov	r8, r1
 8007970:	4614      	mov	r4, r2
 8007972:	2600      	movs	r6, #0
 8007974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007978:	f1b9 0901 	subs.w	r9, r9, #1
 800797c:	d505      	bpl.n	800798a <_fwalk_sglue+0x22>
 800797e:	6824      	ldr	r4, [r4, #0]
 8007980:	2c00      	cmp	r4, #0
 8007982:	d1f7      	bne.n	8007974 <_fwalk_sglue+0xc>
 8007984:	4630      	mov	r0, r6
 8007986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d907      	bls.n	80079a0 <_fwalk_sglue+0x38>
 8007990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007994:	3301      	adds	r3, #1
 8007996:	d003      	beq.n	80079a0 <_fwalk_sglue+0x38>
 8007998:	4629      	mov	r1, r5
 800799a:	4638      	mov	r0, r7
 800799c:	47c0      	blx	r8
 800799e:	4306      	orrs	r6, r0
 80079a0:	3568      	adds	r5, #104	@ 0x68
 80079a2:	e7e9      	b.n	8007978 <_fwalk_sglue+0x10>

080079a4 <__sread>:
 80079a4:	b510      	push	{r4, lr}
 80079a6:	460c      	mov	r4, r1
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	f000 f896 	bl	8007adc <_read_r>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	bfab      	itete	ge
 80079b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079b6:	89a3      	ldrhlt	r3, [r4, #12]
 80079b8:	181b      	addge	r3, r3, r0
 80079ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079be:	bfac      	ite	ge
 80079c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079c2:	81a3      	strhlt	r3, [r4, #12]
 80079c4:	bd10      	pop	{r4, pc}

080079c6 <__swrite>:
 80079c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	461f      	mov	r7, r3
 80079cc:	898b      	ldrh	r3, [r1, #12]
 80079ce:	05db      	lsls	r3, r3, #23
 80079d0:	4605      	mov	r5, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	4616      	mov	r6, r2
 80079d6:	d505      	bpl.n	80079e4 <__swrite+0x1e>
 80079d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079dc:	2302      	movs	r3, #2
 80079de:	2200      	movs	r2, #0
 80079e0:	f000 f86a 	bl	8007ab8 <_lseek_r>
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079ee:	81a3      	strh	r3, [r4, #12]
 80079f0:	4632      	mov	r2, r6
 80079f2:	463b      	mov	r3, r7
 80079f4:	4628      	mov	r0, r5
 80079f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	f000 b881 	b.w	8007b00 <_write_r>

080079fe <__sseek>:
 80079fe:	b510      	push	{r4, lr}
 8007a00:	460c      	mov	r4, r1
 8007a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a06:	f000 f857 	bl	8007ab8 <_lseek_r>
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	bf15      	itete	ne
 8007a10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a1a:	81a3      	strheq	r3, [r4, #12]
 8007a1c:	bf18      	it	ne
 8007a1e:	81a3      	strhne	r3, [r4, #12]
 8007a20:	bd10      	pop	{r4, pc}

08007a22 <__sclose>:
 8007a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a26:	f000 b825 	b.w	8007a74 <_close_r>

08007a2a <memset>:
 8007a2a:	4402      	add	r2, r0
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d100      	bne.n	8007a34 <memset+0xa>
 8007a32:	4770      	bx	lr
 8007a34:	f803 1b01 	strb.w	r1, [r3], #1
 8007a38:	e7f9      	b.n	8007a2e <memset+0x4>
	...

08007a3c <time>:
 8007a3c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a70 <time+0x34>)
 8007a40:	f04f 36ff 	mov.w	r6, #4294967295
 8007a44:	f04f 37ff 	mov.w	r7, #4294967295
 8007a48:	4669      	mov	r1, sp
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	e9cd 6700 	strd	r6, r7, [sp]
 8007a54:	f000 f81e 	bl	8007a94 <_gettimeofday_r>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	bfb8      	it	lt
 8007a5c:	e9cd 6700 	strdlt	r6, r7, [sp]
 8007a60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a64:	b10c      	cbz	r4, 8007a6a <time+0x2e>
 8007a66:	e9c4 0100 	strd	r0, r1, [r4]
 8007a6a:	b004      	add	sp, #16
 8007a6c:	bdd0      	pop	{r4, r6, r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000018 	.word	0x20000018

08007a74 <_close_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d06      	ldr	r5, [pc, #24]	@ (8007a90 <_close_r+0x1c>)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	602b      	str	r3, [r5, #0]
 8007a80:	f7fa f892 	bl	8001ba8 <_close>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_close_r+0x1a>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_close_r+0x1a>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	20000618 	.word	0x20000618

08007a94 <_gettimeofday_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4d07      	ldr	r5, [pc, #28]	@ (8007ab4 <_gettimeofday_r+0x20>)
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	f000 fe8b 	bl	80087bc <_gettimeofday>
 8007aa6:	1c43      	adds	r3, r0, #1
 8007aa8:	d102      	bne.n	8007ab0 <_gettimeofday_r+0x1c>
 8007aaa:	682b      	ldr	r3, [r5, #0]
 8007aac:	b103      	cbz	r3, 8007ab0 <_gettimeofday_r+0x1c>
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	bd38      	pop	{r3, r4, r5, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000618 	.word	0x20000618

08007ab8 <_lseek_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d07      	ldr	r5, [pc, #28]	@ (8007ad8 <_lseek_r+0x20>)
 8007abc:	4604      	mov	r4, r0
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	602a      	str	r2, [r5, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f7fa f895 	bl	8001bf6 <_lseek>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_lseek_r+0x1e>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_lseek_r+0x1e>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20000618 	.word	0x20000618

08007adc <_read_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d07      	ldr	r5, [pc, #28]	@ (8007afc <_read_r+0x20>)
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	4608      	mov	r0, r1
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	602a      	str	r2, [r5, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f7fa f823 	bl	8001b36 <_read>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_read_r+0x1e>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_read_r+0x1e>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	20000618 	.word	0x20000618

08007b00 <_write_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d07      	ldr	r5, [pc, #28]	@ (8007b20 <_write_r+0x20>)
 8007b04:	4604      	mov	r4, r0
 8007b06:	4608      	mov	r0, r1
 8007b08:	4611      	mov	r1, r2
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	602a      	str	r2, [r5, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f7fa f82e 	bl	8001b70 <_write>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d102      	bne.n	8007b1e <_write_r+0x1e>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	b103      	cbz	r3, 8007b1e <_write_r+0x1e>
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	20000618 	.word	0x20000618

08007b24 <__errno>:
 8007b24:	4b01      	ldr	r3, [pc, #4]	@ (8007b2c <__errno+0x8>)
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20000018 	.word	0x20000018

08007b30 <__libc_init_array>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4d0d      	ldr	r5, [pc, #52]	@ (8007b68 <__libc_init_array+0x38>)
 8007b34:	4c0d      	ldr	r4, [pc, #52]	@ (8007b6c <__libc_init_array+0x3c>)
 8007b36:	1b64      	subs	r4, r4, r5
 8007b38:	10a4      	asrs	r4, r4, #2
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	d109      	bne.n	8007b54 <__libc_init_array+0x24>
 8007b40:	4d0b      	ldr	r5, [pc, #44]	@ (8007b70 <__libc_init_array+0x40>)
 8007b42:	4c0c      	ldr	r4, [pc, #48]	@ (8007b74 <__libc_init_array+0x44>)
 8007b44:	f000 fe42 	bl	80087cc <_init>
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	10a4      	asrs	r4, r4, #2
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	42a6      	cmp	r6, r4
 8007b50:	d105      	bne.n	8007b5e <__libc_init_array+0x2e>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b58:	4798      	blx	r3
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	e7ee      	b.n	8007b3c <__libc_init_array+0xc>
 8007b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b62:	4798      	blx	r3
 8007b64:	3601      	adds	r6, #1
 8007b66:	e7f2      	b.n	8007b4e <__libc_init_array+0x1e>
 8007b68:	08008930 	.word	0x08008930
 8007b6c:	08008930 	.word	0x08008930
 8007b70:	08008930 	.word	0x08008930
 8007b74:	08008934 	.word	0x08008934

08007b78 <__retarget_lock_init_recursive>:
 8007b78:	4770      	bx	lr

08007b7a <__retarget_lock_acquire_recursive>:
 8007b7a:	4770      	bx	lr

08007b7c <__retarget_lock_release_recursive>:
 8007b7c:	4770      	bx	lr
	...

08007b80 <__assert_func>:
 8007b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b82:	4614      	mov	r4, r2
 8007b84:	461a      	mov	r2, r3
 8007b86:	4b09      	ldr	r3, [pc, #36]	@ (8007bac <__assert_func+0x2c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	68d8      	ldr	r0, [r3, #12]
 8007b8e:	b954      	cbnz	r4, 8007ba6 <__assert_func+0x26>
 8007b90:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <__assert_func+0x30>)
 8007b92:	461c      	mov	r4, r3
 8007b94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b98:	9100      	str	r1, [sp, #0]
 8007b9a:	462b      	mov	r3, r5
 8007b9c:	4905      	ldr	r1, [pc, #20]	@ (8007bb4 <__assert_func+0x34>)
 8007b9e:	f000 f9b9 	bl	8007f14 <fiprintf>
 8007ba2:	f000 f9d9 	bl	8007f58 <abort>
 8007ba6:	4b04      	ldr	r3, [pc, #16]	@ (8007bb8 <__assert_func+0x38>)
 8007ba8:	e7f4      	b.n	8007b94 <__assert_func+0x14>
 8007baa:	bf00      	nop
 8007bac:	20000018 	.word	0x20000018
 8007bb0:	080088f2 	.word	0x080088f2
 8007bb4:	080088c4 	.word	0x080088c4
 8007bb8:	080088b7 	.word	0x080088b7

08007bbc <_free_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	2900      	cmp	r1, #0
 8007bc2:	d041      	beq.n	8007c48 <_free_r+0x8c>
 8007bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc8:	1f0c      	subs	r4, r1, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bfb8      	it	lt
 8007bce:	18e4      	addlt	r4, r4, r3
 8007bd0:	f000 f8e8 	bl	8007da4 <__malloc_lock>
 8007bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c4c <_free_r+0x90>)
 8007bd6:	6813      	ldr	r3, [r2, #0]
 8007bd8:	b933      	cbnz	r3, 8007be8 <_free_r+0x2c>
 8007bda:	6063      	str	r3, [r4, #4]
 8007bdc:	6014      	str	r4, [r2, #0]
 8007bde:	4628      	mov	r0, r5
 8007be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be4:	f000 b8e4 	b.w	8007db0 <__malloc_unlock>
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d908      	bls.n	8007bfe <_free_r+0x42>
 8007bec:	6820      	ldr	r0, [r4, #0]
 8007bee:	1821      	adds	r1, r4, r0
 8007bf0:	428b      	cmp	r3, r1
 8007bf2:	bf01      	itttt	eq
 8007bf4:	6819      	ldreq	r1, [r3, #0]
 8007bf6:	685b      	ldreq	r3, [r3, #4]
 8007bf8:	1809      	addeq	r1, r1, r0
 8007bfa:	6021      	streq	r1, [r4, #0]
 8007bfc:	e7ed      	b.n	8007bda <_free_r+0x1e>
 8007bfe:	461a      	mov	r2, r3
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	b10b      	cbz	r3, 8007c08 <_free_r+0x4c>
 8007c04:	42a3      	cmp	r3, r4
 8007c06:	d9fa      	bls.n	8007bfe <_free_r+0x42>
 8007c08:	6811      	ldr	r1, [r2, #0]
 8007c0a:	1850      	adds	r0, r2, r1
 8007c0c:	42a0      	cmp	r0, r4
 8007c0e:	d10b      	bne.n	8007c28 <_free_r+0x6c>
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	4401      	add	r1, r0
 8007c14:	1850      	adds	r0, r2, r1
 8007c16:	4283      	cmp	r3, r0
 8007c18:	6011      	str	r1, [r2, #0]
 8007c1a:	d1e0      	bne.n	8007bde <_free_r+0x22>
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	6053      	str	r3, [r2, #4]
 8007c22:	4408      	add	r0, r1
 8007c24:	6010      	str	r0, [r2, #0]
 8007c26:	e7da      	b.n	8007bde <_free_r+0x22>
 8007c28:	d902      	bls.n	8007c30 <_free_r+0x74>
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	602b      	str	r3, [r5, #0]
 8007c2e:	e7d6      	b.n	8007bde <_free_r+0x22>
 8007c30:	6820      	ldr	r0, [r4, #0]
 8007c32:	1821      	adds	r1, r4, r0
 8007c34:	428b      	cmp	r3, r1
 8007c36:	bf04      	itt	eq
 8007c38:	6819      	ldreq	r1, [r3, #0]
 8007c3a:	685b      	ldreq	r3, [r3, #4]
 8007c3c:	6063      	str	r3, [r4, #4]
 8007c3e:	bf04      	itt	eq
 8007c40:	1809      	addeq	r1, r1, r0
 8007c42:	6021      	streq	r1, [r4, #0]
 8007c44:	6054      	str	r4, [r2, #4]
 8007c46:	e7ca      	b.n	8007bde <_free_r+0x22>
 8007c48:	bd38      	pop	{r3, r4, r5, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20000624 	.word	0x20000624

08007c50 <malloc>:
 8007c50:	4b02      	ldr	r3, [pc, #8]	@ (8007c5c <malloc+0xc>)
 8007c52:	4601      	mov	r1, r0
 8007c54:	6818      	ldr	r0, [r3, #0]
 8007c56:	f000 b825 	b.w	8007ca4 <_malloc_r>
 8007c5a:	bf00      	nop
 8007c5c:	20000018 	.word	0x20000018

08007c60 <sbrk_aligned>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	4e0f      	ldr	r6, [pc, #60]	@ (8007ca0 <sbrk_aligned+0x40>)
 8007c64:	460c      	mov	r4, r1
 8007c66:	6831      	ldr	r1, [r6, #0]
 8007c68:	4605      	mov	r5, r0
 8007c6a:	b911      	cbnz	r1, 8007c72 <sbrk_aligned+0x12>
 8007c6c:	f000 f964 	bl	8007f38 <_sbrk_r>
 8007c70:	6030      	str	r0, [r6, #0]
 8007c72:	4621      	mov	r1, r4
 8007c74:	4628      	mov	r0, r5
 8007c76:	f000 f95f 	bl	8007f38 <_sbrk_r>
 8007c7a:	1c43      	adds	r3, r0, #1
 8007c7c:	d103      	bne.n	8007c86 <sbrk_aligned+0x26>
 8007c7e:	f04f 34ff 	mov.w	r4, #4294967295
 8007c82:	4620      	mov	r0, r4
 8007c84:	bd70      	pop	{r4, r5, r6, pc}
 8007c86:	1cc4      	adds	r4, r0, #3
 8007c88:	f024 0403 	bic.w	r4, r4, #3
 8007c8c:	42a0      	cmp	r0, r4
 8007c8e:	d0f8      	beq.n	8007c82 <sbrk_aligned+0x22>
 8007c90:	1a21      	subs	r1, r4, r0
 8007c92:	4628      	mov	r0, r5
 8007c94:	f000 f950 	bl	8007f38 <_sbrk_r>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d1f2      	bne.n	8007c82 <sbrk_aligned+0x22>
 8007c9c:	e7ef      	b.n	8007c7e <sbrk_aligned+0x1e>
 8007c9e:	bf00      	nop
 8007ca0:	20000620 	.word	0x20000620

08007ca4 <_malloc_r>:
 8007ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca8:	1ccd      	adds	r5, r1, #3
 8007caa:	f025 0503 	bic.w	r5, r5, #3
 8007cae:	3508      	adds	r5, #8
 8007cb0:	2d0c      	cmp	r5, #12
 8007cb2:	bf38      	it	cc
 8007cb4:	250c      	movcc	r5, #12
 8007cb6:	2d00      	cmp	r5, #0
 8007cb8:	4606      	mov	r6, r0
 8007cba:	db01      	blt.n	8007cc0 <_malloc_r+0x1c>
 8007cbc:	42a9      	cmp	r1, r5
 8007cbe:	d904      	bls.n	8007cca <_malloc_r+0x26>
 8007cc0:	230c      	movs	r3, #12
 8007cc2:	6033      	str	r3, [r6, #0]
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007da0 <_malloc_r+0xfc>
 8007cce:	f000 f869 	bl	8007da4 <__malloc_lock>
 8007cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd6:	461c      	mov	r4, r3
 8007cd8:	bb44      	cbnz	r4, 8007d2c <_malloc_r+0x88>
 8007cda:	4629      	mov	r1, r5
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff ffbf 	bl	8007c60 <sbrk_aligned>
 8007ce2:	1c43      	adds	r3, r0, #1
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	d158      	bne.n	8007d9a <_malloc_r+0xf6>
 8007ce8:	f8d8 4000 	ldr.w	r4, [r8]
 8007cec:	4627      	mov	r7, r4
 8007cee:	2f00      	cmp	r7, #0
 8007cf0:	d143      	bne.n	8007d7a <_malloc_r+0xd6>
 8007cf2:	2c00      	cmp	r4, #0
 8007cf4:	d04b      	beq.n	8007d8e <_malloc_r+0xea>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	eb04 0903 	add.w	r9, r4, r3
 8007d00:	f000 f91a 	bl	8007f38 <_sbrk_r>
 8007d04:	4581      	cmp	r9, r0
 8007d06:	d142      	bne.n	8007d8e <_malloc_r+0xea>
 8007d08:	6821      	ldr	r1, [r4, #0]
 8007d0a:	1a6d      	subs	r5, r5, r1
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7ff ffa6 	bl	8007c60 <sbrk_aligned>
 8007d14:	3001      	adds	r0, #1
 8007d16:	d03a      	beq.n	8007d8e <_malloc_r+0xea>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	442b      	add	r3, r5
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	bb62      	cbnz	r2, 8007d80 <_malloc_r+0xdc>
 8007d26:	f8c8 7000 	str.w	r7, [r8]
 8007d2a:	e00f      	b.n	8007d4c <_malloc_r+0xa8>
 8007d2c:	6822      	ldr	r2, [r4, #0]
 8007d2e:	1b52      	subs	r2, r2, r5
 8007d30:	d420      	bmi.n	8007d74 <_malloc_r+0xd0>
 8007d32:	2a0b      	cmp	r2, #11
 8007d34:	d917      	bls.n	8007d66 <_malloc_r+0xc2>
 8007d36:	1961      	adds	r1, r4, r5
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	6025      	str	r5, [r4, #0]
 8007d3c:	bf18      	it	ne
 8007d3e:	6059      	strne	r1, [r3, #4]
 8007d40:	6863      	ldr	r3, [r4, #4]
 8007d42:	bf08      	it	eq
 8007d44:	f8c8 1000 	streq.w	r1, [r8]
 8007d48:	5162      	str	r2, [r4, r5]
 8007d4a:	604b      	str	r3, [r1, #4]
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f000 f82f 	bl	8007db0 <__malloc_unlock>
 8007d52:	f104 000b 	add.w	r0, r4, #11
 8007d56:	1d23      	adds	r3, r4, #4
 8007d58:	f020 0007 	bic.w	r0, r0, #7
 8007d5c:	1ac2      	subs	r2, r0, r3
 8007d5e:	bf1c      	itt	ne
 8007d60:	1a1b      	subne	r3, r3, r0
 8007d62:	50a3      	strne	r3, [r4, r2]
 8007d64:	e7af      	b.n	8007cc6 <_malloc_r+0x22>
 8007d66:	6862      	ldr	r2, [r4, #4]
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	bf0c      	ite	eq
 8007d6c:	f8c8 2000 	streq.w	r2, [r8]
 8007d70:	605a      	strne	r2, [r3, #4]
 8007d72:	e7eb      	b.n	8007d4c <_malloc_r+0xa8>
 8007d74:	4623      	mov	r3, r4
 8007d76:	6864      	ldr	r4, [r4, #4]
 8007d78:	e7ae      	b.n	8007cd8 <_malloc_r+0x34>
 8007d7a:	463c      	mov	r4, r7
 8007d7c:	687f      	ldr	r7, [r7, #4]
 8007d7e:	e7b6      	b.n	8007cee <_malloc_r+0x4a>
 8007d80:	461a      	mov	r2, r3
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	d1fb      	bne.n	8007d80 <_malloc_r+0xdc>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	6053      	str	r3, [r2, #4]
 8007d8c:	e7de      	b.n	8007d4c <_malloc_r+0xa8>
 8007d8e:	230c      	movs	r3, #12
 8007d90:	6033      	str	r3, [r6, #0]
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 f80c 	bl	8007db0 <__malloc_unlock>
 8007d98:	e794      	b.n	8007cc4 <_malloc_r+0x20>
 8007d9a:	6005      	str	r5, [r0, #0]
 8007d9c:	e7d6      	b.n	8007d4c <_malloc_r+0xa8>
 8007d9e:	bf00      	nop
 8007da0:	20000624 	.word	0x20000624

08007da4 <__malloc_lock>:
 8007da4:	4801      	ldr	r0, [pc, #4]	@ (8007dac <__malloc_lock+0x8>)
 8007da6:	f7ff bee8 	b.w	8007b7a <__retarget_lock_acquire_recursive>
 8007daa:	bf00      	nop
 8007dac:	2000061c 	.word	0x2000061c

08007db0 <__malloc_unlock>:
 8007db0:	4801      	ldr	r0, [pc, #4]	@ (8007db8 <__malloc_unlock+0x8>)
 8007db2:	f7ff bee3 	b.w	8007b7c <__retarget_lock_release_recursive>
 8007db6:	bf00      	nop
 8007db8:	2000061c 	.word	0x2000061c

08007dbc <__sflush_r>:
 8007dbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc4:	0716      	lsls	r6, r2, #28
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	460c      	mov	r4, r1
 8007dca:	d454      	bmi.n	8007e76 <__sflush_r+0xba>
 8007dcc:	684b      	ldr	r3, [r1, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	dc02      	bgt.n	8007dd8 <__sflush_r+0x1c>
 8007dd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dd48      	ble.n	8007e6a <__sflush_r+0xae>
 8007dd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dda:	2e00      	cmp	r6, #0
 8007ddc:	d045      	beq.n	8007e6a <__sflush_r+0xae>
 8007dde:	2300      	movs	r3, #0
 8007de0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007de4:	682f      	ldr	r7, [r5, #0]
 8007de6:	6a21      	ldr	r1, [r4, #32]
 8007de8:	602b      	str	r3, [r5, #0]
 8007dea:	d030      	beq.n	8007e4e <__sflush_r+0x92>
 8007dec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	0759      	lsls	r1, r3, #29
 8007df2:	d505      	bpl.n	8007e00 <__sflush_r+0x44>
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dfa:	b10b      	cbz	r3, 8007e00 <__sflush_r+0x44>
 8007dfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	2300      	movs	r3, #0
 8007e02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e04:	6a21      	ldr	r1, [r4, #32]
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b0      	blx	r6
 8007e0a:	1c43      	adds	r3, r0, #1
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	d106      	bne.n	8007e1e <__sflush_r+0x62>
 8007e10:	6829      	ldr	r1, [r5, #0]
 8007e12:	291d      	cmp	r1, #29
 8007e14:	d82b      	bhi.n	8007e6e <__sflush_r+0xb2>
 8007e16:	4a2a      	ldr	r2, [pc, #168]	@ (8007ec0 <__sflush_r+0x104>)
 8007e18:	410a      	asrs	r2, r1
 8007e1a:	07d6      	lsls	r6, r2, #31
 8007e1c:	d427      	bmi.n	8007e6e <__sflush_r+0xb2>
 8007e1e:	2200      	movs	r2, #0
 8007e20:	6062      	str	r2, [r4, #4]
 8007e22:	04d9      	lsls	r1, r3, #19
 8007e24:	6922      	ldr	r2, [r4, #16]
 8007e26:	6022      	str	r2, [r4, #0]
 8007e28:	d504      	bpl.n	8007e34 <__sflush_r+0x78>
 8007e2a:	1c42      	adds	r2, r0, #1
 8007e2c:	d101      	bne.n	8007e32 <__sflush_r+0x76>
 8007e2e:	682b      	ldr	r3, [r5, #0]
 8007e30:	b903      	cbnz	r3, 8007e34 <__sflush_r+0x78>
 8007e32:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e36:	602f      	str	r7, [r5, #0]
 8007e38:	b1b9      	cbz	r1, 8007e6a <__sflush_r+0xae>
 8007e3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e3e:	4299      	cmp	r1, r3
 8007e40:	d002      	beq.n	8007e48 <__sflush_r+0x8c>
 8007e42:	4628      	mov	r0, r5
 8007e44:	f7ff feba 	bl	8007bbc <_free_r>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e4c:	e00d      	b.n	8007e6a <__sflush_r+0xae>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b0      	blx	r6
 8007e54:	4602      	mov	r2, r0
 8007e56:	1c50      	adds	r0, r2, #1
 8007e58:	d1c9      	bne.n	8007dee <__sflush_r+0x32>
 8007e5a:	682b      	ldr	r3, [r5, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0c6      	beq.n	8007dee <__sflush_r+0x32>
 8007e60:	2b1d      	cmp	r3, #29
 8007e62:	d001      	beq.n	8007e68 <__sflush_r+0xac>
 8007e64:	2b16      	cmp	r3, #22
 8007e66:	d11e      	bne.n	8007ea6 <__sflush_r+0xea>
 8007e68:	602f      	str	r7, [r5, #0]
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	e022      	b.n	8007eb4 <__sflush_r+0xf8>
 8007e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e72:	b21b      	sxth	r3, r3
 8007e74:	e01b      	b.n	8007eae <__sflush_r+0xf2>
 8007e76:	690f      	ldr	r7, [r1, #16]
 8007e78:	2f00      	cmp	r7, #0
 8007e7a:	d0f6      	beq.n	8007e6a <__sflush_r+0xae>
 8007e7c:	0793      	lsls	r3, r2, #30
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	bf08      	it	eq
 8007e82:	694b      	ldreq	r3, [r1, #20]
 8007e84:	600f      	str	r7, [r1, #0]
 8007e86:	bf18      	it	ne
 8007e88:	2300      	movne	r3, #0
 8007e8a:	eba6 0807 	sub.w	r8, r6, r7
 8007e8e:	608b      	str	r3, [r1, #8]
 8007e90:	f1b8 0f00 	cmp.w	r8, #0
 8007e94:	dde9      	ble.n	8007e6a <__sflush_r+0xae>
 8007e96:	6a21      	ldr	r1, [r4, #32]
 8007e98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e9a:	4643      	mov	r3, r8
 8007e9c:	463a      	mov	r2, r7
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	47b0      	blx	r6
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	dc08      	bgt.n	8007eb8 <__sflush_r+0xfc>
 8007ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eae:	81a3      	strh	r3, [r4, #12]
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb8:	4407      	add	r7, r0
 8007eba:	eba8 0800 	sub.w	r8, r8, r0
 8007ebe:	e7e7      	b.n	8007e90 <__sflush_r+0xd4>
 8007ec0:	dfbffffe 	.word	0xdfbffffe

08007ec4 <_fflush_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	690b      	ldr	r3, [r1, #16]
 8007ec8:	4605      	mov	r5, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	b913      	cbnz	r3, 8007ed4 <_fflush_r+0x10>
 8007ece:	2500      	movs	r5, #0
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	b118      	cbz	r0, 8007ede <_fflush_r+0x1a>
 8007ed6:	6a03      	ldr	r3, [r0, #32]
 8007ed8:	b90b      	cbnz	r3, 8007ede <_fflush_r+0x1a>
 8007eda:	f7ff fd2d 	bl	8007938 <__sinit>
 8007ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0f3      	beq.n	8007ece <_fflush_r+0xa>
 8007ee6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ee8:	07d0      	lsls	r0, r2, #31
 8007eea:	d404      	bmi.n	8007ef6 <_fflush_r+0x32>
 8007eec:	0599      	lsls	r1, r3, #22
 8007eee:	d402      	bmi.n	8007ef6 <_fflush_r+0x32>
 8007ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ef2:	f7ff fe42 	bl	8007b7a <__retarget_lock_acquire_recursive>
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	4621      	mov	r1, r4
 8007efa:	f7ff ff5f 	bl	8007dbc <__sflush_r>
 8007efe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f00:	07da      	lsls	r2, r3, #31
 8007f02:	4605      	mov	r5, r0
 8007f04:	d4e4      	bmi.n	8007ed0 <_fflush_r+0xc>
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	059b      	lsls	r3, r3, #22
 8007f0a:	d4e1      	bmi.n	8007ed0 <_fflush_r+0xc>
 8007f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f0e:	f7ff fe35 	bl	8007b7c <__retarget_lock_release_recursive>
 8007f12:	e7dd      	b.n	8007ed0 <_fflush_r+0xc>

08007f14 <fiprintf>:
 8007f14:	b40e      	push	{r1, r2, r3}
 8007f16:	b503      	push	{r0, r1, lr}
 8007f18:	4601      	mov	r1, r0
 8007f1a:	ab03      	add	r3, sp, #12
 8007f1c:	4805      	ldr	r0, [pc, #20]	@ (8007f34 <fiprintf+0x20>)
 8007f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f22:	6800      	ldr	r0, [r0, #0]
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	f000 f847 	bl	8007fb8 <_vfiprintf_r>
 8007f2a:	b002      	add	sp, #8
 8007f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f30:	b003      	add	sp, #12
 8007f32:	4770      	bx	lr
 8007f34:	20000018 	.word	0x20000018

08007f38 <_sbrk_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d06      	ldr	r5, [pc, #24]	@ (8007f54 <_sbrk_r+0x1c>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f7f9 fe64 	bl	8001c10 <_sbrk>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_sbrk_r+0x1a>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_sbrk_r+0x1a>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	20000618 	.word	0x20000618

08007f58 <abort>:
 8007f58:	b508      	push	{r3, lr}
 8007f5a:	2006      	movs	r0, #6
 8007f5c:	f000 fb8e 	bl	800867c <raise>
 8007f60:	2001      	movs	r0, #1
 8007f62:	f7f9 fddd 	bl	8001b20 <_exit>

08007f66 <__sfputc_r>:
 8007f66:	6893      	ldr	r3, [r2, #8]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	b410      	push	{r4}
 8007f6e:	6093      	str	r3, [r2, #8]
 8007f70:	da08      	bge.n	8007f84 <__sfputc_r+0x1e>
 8007f72:	6994      	ldr	r4, [r2, #24]
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	db01      	blt.n	8007f7c <__sfputc_r+0x16>
 8007f78:	290a      	cmp	r1, #10
 8007f7a:	d103      	bne.n	8007f84 <__sfputc_r+0x1e>
 8007f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f80:	f000 bac0 	b.w	8008504 <__swbuf_r>
 8007f84:	6813      	ldr	r3, [r2, #0]
 8007f86:	1c58      	adds	r0, r3, #1
 8007f88:	6010      	str	r0, [r2, #0]
 8007f8a:	7019      	strb	r1, [r3, #0]
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <__sfputs_r>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	4606      	mov	r6, r0
 8007f98:	460f      	mov	r7, r1
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	18d5      	adds	r5, r2, r3
 8007f9e:	42ac      	cmp	r4, r5
 8007fa0:	d101      	bne.n	8007fa6 <__sfputs_r+0x12>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e007      	b.n	8007fb6 <__sfputs_r+0x22>
 8007fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007faa:	463a      	mov	r2, r7
 8007fac:	4630      	mov	r0, r6
 8007fae:	f7ff ffda 	bl	8007f66 <__sfputc_r>
 8007fb2:	1c43      	adds	r3, r0, #1
 8007fb4:	d1f3      	bne.n	8007f9e <__sfputs_r+0xa>
 8007fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fb8 <_vfiprintf_r>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	b09d      	sub	sp, #116	@ 0x74
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	4698      	mov	r8, r3
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	b118      	cbz	r0, 8007fd0 <_vfiprintf_r+0x18>
 8007fc8:	6a03      	ldr	r3, [r0, #32]
 8007fca:	b90b      	cbnz	r3, 8007fd0 <_vfiprintf_r+0x18>
 8007fcc:	f7ff fcb4 	bl	8007938 <__sinit>
 8007fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fd2:	07d9      	lsls	r1, r3, #31
 8007fd4:	d405      	bmi.n	8007fe2 <_vfiprintf_r+0x2a>
 8007fd6:	89ab      	ldrh	r3, [r5, #12]
 8007fd8:	059a      	lsls	r2, r3, #22
 8007fda:	d402      	bmi.n	8007fe2 <_vfiprintf_r+0x2a>
 8007fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fde:	f7ff fdcc 	bl	8007b7a <__retarget_lock_acquire_recursive>
 8007fe2:	89ab      	ldrh	r3, [r5, #12]
 8007fe4:	071b      	lsls	r3, r3, #28
 8007fe6:	d501      	bpl.n	8007fec <_vfiprintf_r+0x34>
 8007fe8:	692b      	ldr	r3, [r5, #16]
 8007fea:	b99b      	cbnz	r3, 8008014 <_vfiprintf_r+0x5c>
 8007fec:	4629      	mov	r1, r5
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 fac6 	bl	8008580 <__swsetup_r>
 8007ff4:	b170      	cbz	r0, 8008014 <_vfiprintf_r+0x5c>
 8007ff6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ff8:	07dc      	lsls	r4, r3, #31
 8007ffa:	d504      	bpl.n	8008006 <_vfiprintf_r+0x4e>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	b01d      	add	sp, #116	@ 0x74
 8008002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	0598      	lsls	r0, r3, #22
 800800a:	d4f7      	bmi.n	8007ffc <_vfiprintf_r+0x44>
 800800c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800800e:	f7ff fdb5 	bl	8007b7c <__retarget_lock_release_recursive>
 8008012:	e7f3      	b.n	8007ffc <_vfiprintf_r+0x44>
 8008014:	2300      	movs	r3, #0
 8008016:	9309      	str	r3, [sp, #36]	@ 0x24
 8008018:	2320      	movs	r3, #32
 800801a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800801e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008022:	2330      	movs	r3, #48	@ 0x30
 8008024:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081d4 <_vfiprintf_r+0x21c>
 8008028:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800802c:	f04f 0901 	mov.w	r9, #1
 8008030:	4623      	mov	r3, r4
 8008032:	469a      	mov	sl, r3
 8008034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008038:	b10a      	cbz	r2, 800803e <_vfiprintf_r+0x86>
 800803a:	2a25      	cmp	r2, #37	@ 0x25
 800803c:	d1f9      	bne.n	8008032 <_vfiprintf_r+0x7a>
 800803e:	ebba 0b04 	subs.w	fp, sl, r4
 8008042:	d00b      	beq.n	800805c <_vfiprintf_r+0xa4>
 8008044:	465b      	mov	r3, fp
 8008046:	4622      	mov	r2, r4
 8008048:	4629      	mov	r1, r5
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff ffa2 	bl	8007f94 <__sfputs_r>
 8008050:	3001      	adds	r0, #1
 8008052:	f000 80a7 	beq.w	80081a4 <_vfiprintf_r+0x1ec>
 8008056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008058:	445a      	add	r2, fp
 800805a:	9209      	str	r2, [sp, #36]	@ 0x24
 800805c:	f89a 3000 	ldrb.w	r3, [sl]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 809f 	beq.w	80081a4 <_vfiprintf_r+0x1ec>
 8008066:	2300      	movs	r3, #0
 8008068:	f04f 32ff 	mov.w	r2, #4294967295
 800806c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008070:	f10a 0a01 	add.w	sl, sl, #1
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	9307      	str	r3, [sp, #28]
 8008078:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800807c:	931a      	str	r3, [sp, #104]	@ 0x68
 800807e:	4654      	mov	r4, sl
 8008080:	2205      	movs	r2, #5
 8008082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008086:	4853      	ldr	r0, [pc, #332]	@ (80081d4 <_vfiprintf_r+0x21c>)
 8008088:	f7f8 f8aa 	bl	80001e0 <memchr>
 800808c:	9a04      	ldr	r2, [sp, #16]
 800808e:	b9d8      	cbnz	r0, 80080c8 <_vfiprintf_r+0x110>
 8008090:	06d1      	lsls	r1, r2, #27
 8008092:	bf44      	itt	mi
 8008094:	2320      	movmi	r3, #32
 8008096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800809a:	0713      	lsls	r3, r2, #28
 800809c:	bf44      	itt	mi
 800809e:	232b      	movmi	r3, #43	@ 0x2b
 80080a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080a4:	f89a 3000 	ldrb.w	r3, [sl]
 80080a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080aa:	d015      	beq.n	80080d8 <_vfiprintf_r+0x120>
 80080ac:	9a07      	ldr	r2, [sp, #28]
 80080ae:	4654      	mov	r4, sl
 80080b0:	2000      	movs	r0, #0
 80080b2:	f04f 0c0a 	mov.w	ip, #10
 80080b6:	4621      	mov	r1, r4
 80080b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080bc:	3b30      	subs	r3, #48	@ 0x30
 80080be:	2b09      	cmp	r3, #9
 80080c0:	d94b      	bls.n	800815a <_vfiprintf_r+0x1a2>
 80080c2:	b1b0      	cbz	r0, 80080f2 <_vfiprintf_r+0x13a>
 80080c4:	9207      	str	r2, [sp, #28]
 80080c6:	e014      	b.n	80080f2 <_vfiprintf_r+0x13a>
 80080c8:	eba0 0308 	sub.w	r3, r0, r8
 80080cc:	fa09 f303 	lsl.w	r3, r9, r3
 80080d0:	4313      	orrs	r3, r2
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	46a2      	mov	sl, r4
 80080d6:	e7d2      	b.n	800807e <_vfiprintf_r+0xc6>
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	1d19      	adds	r1, r3, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	9103      	str	r1, [sp, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bfbb      	ittet	lt
 80080e4:	425b      	neglt	r3, r3
 80080e6:	f042 0202 	orrlt.w	r2, r2, #2
 80080ea:	9307      	strge	r3, [sp, #28]
 80080ec:	9307      	strlt	r3, [sp, #28]
 80080ee:	bfb8      	it	lt
 80080f0:	9204      	strlt	r2, [sp, #16]
 80080f2:	7823      	ldrb	r3, [r4, #0]
 80080f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80080f6:	d10a      	bne.n	800810e <_vfiprintf_r+0x156>
 80080f8:	7863      	ldrb	r3, [r4, #1]
 80080fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80080fc:	d132      	bne.n	8008164 <_vfiprintf_r+0x1ac>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	1d1a      	adds	r2, r3, #4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	9203      	str	r2, [sp, #12]
 8008106:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800810a:	3402      	adds	r4, #2
 800810c:	9305      	str	r3, [sp, #20]
 800810e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081e4 <_vfiprintf_r+0x22c>
 8008112:	7821      	ldrb	r1, [r4, #0]
 8008114:	2203      	movs	r2, #3
 8008116:	4650      	mov	r0, sl
 8008118:	f7f8 f862 	bl	80001e0 <memchr>
 800811c:	b138      	cbz	r0, 800812e <_vfiprintf_r+0x176>
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	eba0 000a 	sub.w	r0, r0, sl
 8008124:	2240      	movs	r2, #64	@ 0x40
 8008126:	4082      	lsls	r2, r0
 8008128:	4313      	orrs	r3, r2
 800812a:	3401      	adds	r4, #1
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008132:	4829      	ldr	r0, [pc, #164]	@ (80081d8 <_vfiprintf_r+0x220>)
 8008134:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008138:	2206      	movs	r2, #6
 800813a:	f7f8 f851 	bl	80001e0 <memchr>
 800813e:	2800      	cmp	r0, #0
 8008140:	d03f      	beq.n	80081c2 <_vfiprintf_r+0x20a>
 8008142:	4b26      	ldr	r3, [pc, #152]	@ (80081dc <_vfiprintf_r+0x224>)
 8008144:	bb1b      	cbnz	r3, 800818e <_vfiprintf_r+0x1d6>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	3307      	adds	r3, #7
 800814a:	f023 0307 	bic.w	r3, r3, #7
 800814e:	3308      	adds	r3, #8
 8008150:	9303      	str	r3, [sp, #12]
 8008152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008154:	443b      	add	r3, r7
 8008156:	9309      	str	r3, [sp, #36]	@ 0x24
 8008158:	e76a      	b.n	8008030 <_vfiprintf_r+0x78>
 800815a:	fb0c 3202 	mla	r2, ip, r2, r3
 800815e:	460c      	mov	r4, r1
 8008160:	2001      	movs	r0, #1
 8008162:	e7a8      	b.n	80080b6 <_vfiprintf_r+0xfe>
 8008164:	2300      	movs	r3, #0
 8008166:	3401      	adds	r4, #1
 8008168:	9305      	str	r3, [sp, #20]
 800816a:	4619      	mov	r1, r3
 800816c:	f04f 0c0a 	mov.w	ip, #10
 8008170:	4620      	mov	r0, r4
 8008172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008176:	3a30      	subs	r2, #48	@ 0x30
 8008178:	2a09      	cmp	r2, #9
 800817a:	d903      	bls.n	8008184 <_vfiprintf_r+0x1cc>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0c6      	beq.n	800810e <_vfiprintf_r+0x156>
 8008180:	9105      	str	r1, [sp, #20]
 8008182:	e7c4      	b.n	800810e <_vfiprintf_r+0x156>
 8008184:	fb0c 2101 	mla	r1, ip, r1, r2
 8008188:	4604      	mov	r4, r0
 800818a:	2301      	movs	r3, #1
 800818c:	e7f0      	b.n	8008170 <_vfiprintf_r+0x1b8>
 800818e:	ab03      	add	r3, sp, #12
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	462a      	mov	r2, r5
 8008194:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <_vfiprintf_r+0x228>)
 8008196:	a904      	add	r1, sp, #16
 8008198:	4630      	mov	r0, r6
 800819a:	f3af 8000 	nop.w
 800819e:	4607      	mov	r7, r0
 80081a0:	1c78      	adds	r0, r7, #1
 80081a2:	d1d6      	bne.n	8008152 <_vfiprintf_r+0x19a>
 80081a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081a6:	07d9      	lsls	r1, r3, #31
 80081a8:	d405      	bmi.n	80081b6 <_vfiprintf_r+0x1fe>
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	059a      	lsls	r2, r3, #22
 80081ae:	d402      	bmi.n	80081b6 <_vfiprintf_r+0x1fe>
 80081b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081b2:	f7ff fce3 	bl	8007b7c <__retarget_lock_release_recursive>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	065b      	lsls	r3, r3, #25
 80081ba:	f53f af1f 	bmi.w	8007ffc <_vfiprintf_r+0x44>
 80081be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081c0:	e71e      	b.n	8008000 <_vfiprintf_r+0x48>
 80081c2:	ab03      	add	r3, sp, #12
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	462a      	mov	r2, r5
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <_vfiprintf_r+0x228>)
 80081ca:	a904      	add	r1, sp, #16
 80081cc:	4630      	mov	r0, r6
 80081ce:	f000 f879 	bl	80082c4 <_printf_i>
 80081d2:	e7e4      	b.n	800819e <_vfiprintf_r+0x1e6>
 80081d4:	080088f3 	.word	0x080088f3
 80081d8:	080088fd 	.word	0x080088fd
 80081dc:	00000000 	.word	0x00000000
 80081e0:	08007f95 	.word	0x08007f95
 80081e4:	080088f9 	.word	0x080088f9

080081e8 <_printf_common>:
 80081e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	4616      	mov	r6, r2
 80081ee:	4698      	mov	r8, r3
 80081f0:	688a      	ldr	r2, [r1, #8]
 80081f2:	690b      	ldr	r3, [r1, #16]
 80081f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081f8:	4293      	cmp	r3, r2
 80081fa:	bfb8      	it	lt
 80081fc:	4613      	movlt	r3, r2
 80081fe:	6033      	str	r3, [r6, #0]
 8008200:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008204:	4607      	mov	r7, r0
 8008206:	460c      	mov	r4, r1
 8008208:	b10a      	cbz	r2, 800820e <_printf_common+0x26>
 800820a:	3301      	adds	r3, #1
 800820c:	6033      	str	r3, [r6, #0]
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	0699      	lsls	r1, r3, #26
 8008212:	bf42      	ittt	mi
 8008214:	6833      	ldrmi	r3, [r6, #0]
 8008216:	3302      	addmi	r3, #2
 8008218:	6033      	strmi	r3, [r6, #0]
 800821a:	6825      	ldr	r5, [r4, #0]
 800821c:	f015 0506 	ands.w	r5, r5, #6
 8008220:	d106      	bne.n	8008230 <_printf_common+0x48>
 8008222:	f104 0a19 	add.w	sl, r4, #25
 8008226:	68e3      	ldr	r3, [r4, #12]
 8008228:	6832      	ldr	r2, [r6, #0]
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	42ab      	cmp	r3, r5
 800822e:	dc26      	bgt.n	800827e <_printf_common+0x96>
 8008230:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	3b00      	subs	r3, #0
 8008238:	bf18      	it	ne
 800823a:	2301      	movne	r3, #1
 800823c:	0692      	lsls	r2, r2, #26
 800823e:	d42b      	bmi.n	8008298 <_printf_common+0xb0>
 8008240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008244:	4641      	mov	r1, r8
 8008246:	4638      	mov	r0, r7
 8008248:	47c8      	blx	r9
 800824a:	3001      	adds	r0, #1
 800824c:	d01e      	beq.n	800828c <_printf_common+0xa4>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	6922      	ldr	r2, [r4, #16]
 8008252:	f003 0306 	and.w	r3, r3, #6
 8008256:	2b04      	cmp	r3, #4
 8008258:	bf02      	ittt	eq
 800825a:	68e5      	ldreq	r5, [r4, #12]
 800825c:	6833      	ldreq	r3, [r6, #0]
 800825e:	1aed      	subeq	r5, r5, r3
 8008260:	68a3      	ldr	r3, [r4, #8]
 8008262:	bf0c      	ite	eq
 8008264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008268:	2500      	movne	r5, #0
 800826a:	4293      	cmp	r3, r2
 800826c:	bfc4      	itt	gt
 800826e:	1a9b      	subgt	r3, r3, r2
 8008270:	18ed      	addgt	r5, r5, r3
 8008272:	2600      	movs	r6, #0
 8008274:	341a      	adds	r4, #26
 8008276:	42b5      	cmp	r5, r6
 8008278:	d11a      	bne.n	80082b0 <_printf_common+0xc8>
 800827a:	2000      	movs	r0, #0
 800827c:	e008      	b.n	8008290 <_printf_common+0xa8>
 800827e:	2301      	movs	r3, #1
 8008280:	4652      	mov	r2, sl
 8008282:	4641      	mov	r1, r8
 8008284:	4638      	mov	r0, r7
 8008286:	47c8      	blx	r9
 8008288:	3001      	adds	r0, #1
 800828a:	d103      	bne.n	8008294 <_printf_common+0xac>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	3501      	adds	r5, #1
 8008296:	e7c6      	b.n	8008226 <_printf_common+0x3e>
 8008298:	18e1      	adds	r1, r4, r3
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	2030      	movs	r0, #48	@ 0x30
 800829e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082a2:	4422      	add	r2, r4
 80082a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082ac:	3302      	adds	r3, #2
 80082ae:	e7c7      	b.n	8008240 <_printf_common+0x58>
 80082b0:	2301      	movs	r3, #1
 80082b2:	4622      	mov	r2, r4
 80082b4:	4641      	mov	r1, r8
 80082b6:	4638      	mov	r0, r7
 80082b8:	47c8      	blx	r9
 80082ba:	3001      	adds	r0, #1
 80082bc:	d0e6      	beq.n	800828c <_printf_common+0xa4>
 80082be:	3601      	adds	r6, #1
 80082c0:	e7d9      	b.n	8008276 <_printf_common+0x8e>
	...

080082c4 <_printf_i>:
 80082c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	7e0f      	ldrb	r7, [r1, #24]
 80082ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082cc:	2f78      	cmp	r7, #120	@ 0x78
 80082ce:	4691      	mov	r9, r2
 80082d0:	4680      	mov	r8, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	469a      	mov	sl, r3
 80082d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082da:	d807      	bhi.n	80082ec <_printf_i+0x28>
 80082dc:	2f62      	cmp	r7, #98	@ 0x62
 80082de:	d80a      	bhi.n	80082f6 <_printf_i+0x32>
 80082e0:	2f00      	cmp	r7, #0
 80082e2:	f000 80d2 	beq.w	800848a <_printf_i+0x1c6>
 80082e6:	2f58      	cmp	r7, #88	@ 0x58
 80082e8:	f000 80b9 	beq.w	800845e <_printf_i+0x19a>
 80082ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082f4:	e03a      	b.n	800836c <_printf_i+0xa8>
 80082f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082fa:	2b15      	cmp	r3, #21
 80082fc:	d8f6      	bhi.n	80082ec <_printf_i+0x28>
 80082fe:	a101      	add	r1, pc, #4	@ (adr r1, 8008304 <_printf_i+0x40>)
 8008300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008304:	0800835d 	.word	0x0800835d
 8008308:	08008371 	.word	0x08008371
 800830c:	080082ed 	.word	0x080082ed
 8008310:	080082ed 	.word	0x080082ed
 8008314:	080082ed 	.word	0x080082ed
 8008318:	080082ed 	.word	0x080082ed
 800831c:	08008371 	.word	0x08008371
 8008320:	080082ed 	.word	0x080082ed
 8008324:	080082ed 	.word	0x080082ed
 8008328:	080082ed 	.word	0x080082ed
 800832c:	080082ed 	.word	0x080082ed
 8008330:	08008471 	.word	0x08008471
 8008334:	0800839b 	.word	0x0800839b
 8008338:	0800842b 	.word	0x0800842b
 800833c:	080082ed 	.word	0x080082ed
 8008340:	080082ed 	.word	0x080082ed
 8008344:	08008493 	.word	0x08008493
 8008348:	080082ed 	.word	0x080082ed
 800834c:	0800839b 	.word	0x0800839b
 8008350:	080082ed 	.word	0x080082ed
 8008354:	080082ed 	.word	0x080082ed
 8008358:	08008433 	.word	0x08008433
 800835c:	6833      	ldr	r3, [r6, #0]
 800835e:	1d1a      	adds	r2, r3, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6032      	str	r2, [r6, #0]
 8008364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800836c:	2301      	movs	r3, #1
 800836e:	e09d      	b.n	80084ac <_printf_i+0x1e8>
 8008370:	6833      	ldr	r3, [r6, #0]
 8008372:	6820      	ldr	r0, [r4, #0]
 8008374:	1d19      	adds	r1, r3, #4
 8008376:	6031      	str	r1, [r6, #0]
 8008378:	0606      	lsls	r6, r0, #24
 800837a:	d501      	bpl.n	8008380 <_printf_i+0xbc>
 800837c:	681d      	ldr	r5, [r3, #0]
 800837e:	e003      	b.n	8008388 <_printf_i+0xc4>
 8008380:	0645      	lsls	r5, r0, #25
 8008382:	d5fb      	bpl.n	800837c <_printf_i+0xb8>
 8008384:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008388:	2d00      	cmp	r5, #0
 800838a:	da03      	bge.n	8008394 <_printf_i+0xd0>
 800838c:	232d      	movs	r3, #45	@ 0x2d
 800838e:	426d      	negs	r5, r5
 8008390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008394:	4859      	ldr	r0, [pc, #356]	@ (80084fc <_printf_i+0x238>)
 8008396:	230a      	movs	r3, #10
 8008398:	e011      	b.n	80083be <_printf_i+0xfa>
 800839a:	6821      	ldr	r1, [r4, #0]
 800839c:	6833      	ldr	r3, [r6, #0]
 800839e:	0608      	lsls	r0, r1, #24
 80083a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80083a4:	d402      	bmi.n	80083ac <_printf_i+0xe8>
 80083a6:	0649      	lsls	r1, r1, #25
 80083a8:	bf48      	it	mi
 80083aa:	b2ad      	uxthmi	r5, r5
 80083ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80083ae:	4853      	ldr	r0, [pc, #332]	@ (80084fc <_printf_i+0x238>)
 80083b0:	6033      	str	r3, [r6, #0]
 80083b2:	bf14      	ite	ne
 80083b4:	230a      	movne	r3, #10
 80083b6:	2308      	moveq	r3, #8
 80083b8:	2100      	movs	r1, #0
 80083ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083be:	6866      	ldr	r6, [r4, #4]
 80083c0:	60a6      	str	r6, [r4, #8]
 80083c2:	2e00      	cmp	r6, #0
 80083c4:	bfa2      	ittt	ge
 80083c6:	6821      	ldrge	r1, [r4, #0]
 80083c8:	f021 0104 	bicge.w	r1, r1, #4
 80083cc:	6021      	strge	r1, [r4, #0]
 80083ce:	b90d      	cbnz	r5, 80083d4 <_printf_i+0x110>
 80083d0:	2e00      	cmp	r6, #0
 80083d2:	d04b      	beq.n	800846c <_printf_i+0x1a8>
 80083d4:	4616      	mov	r6, r2
 80083d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80083da:	fb03 5711 	mls	r7, r3, r1, r5
 80083de:	5dc7      	ldrb	r7, [r0, r7]
 80083e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083e4:	462f      	mov	r7, r5
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	460d      	mov	r5, r1
 80083ea:	d9f4      	bls.n	80083d6 <_printf_i+0x112>
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d10b      	bne.n	8008408 <_printf_i+0x144>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	07df      	lsls	r7, r3, #31
 80083f4:	d508      	bpl.n	8008408 <_printf_i+0x144>
 80083f6:	6923      	ldr	r3, [r4, #16]
 80083f8:	6861      	ldr	r1, [r4, #4]
 80083fa:	4299      	cmp	r1, r3
 80083fc:	bfde      	ittt	le
 80083fe:	2330      	movle	r3, #48	@ 0x30
 8008400:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008404:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008408:	1b92      	subs	r2, r2, r6
 800840a:	6122      	str	r2, [r4, #16]
 800840c:	f8cd a000 	str.w	sl, [sp]
 8008410:	464b      	mov	r3, r9
 8008412:	aa03      	add	r2, sp, #12
 8008414:	4621      	mov	r1, r4
 8008416:	4640      	mov	r0, r8
 8008418:	f7ff fee6 	bl	80081e8 <_printf_common>
 800841c:	3001      	adds	r0, #1
 800841e:	d14a      	bne.n	80084b6 <_printf_i+0x1f2>
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	b004      	add	sp, #16
 8008426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	f043 0320 	orr.w	r3, r3, #32
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	4833      	ldr	r0, [pc, #204]	@ (8008500 <_printf_i+0x23c>)
 8008434:	2778      	movs	r7, #120	@ 0x78
 8008436:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	6831      	ldr	r1, [r6, #0]
 800843e:	061f      	lsls	r7, r3, #24
 8008440:	f851 5b04 	ldr.w	r5, [r1], #4
 8008444:	d402      	bmi.n	800844c <_printf_i+0x188>
 8008446:	065f      	lsls	r7, r3, #25
 8008448:	bf48      	it	mi
 800844a:	b2ad      	uxthmi	r5, r5
 800844c:	6031      	str	r1, [r6, #0]
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	bf44      	itt	mi
 8008452:	f043 0320 	orrmi.w	r3, r3, #32
 8008456:	6023      	strmi	r3, [r4, #0]
 8008458:	b11d      	cbz	r5, 8008462 <_printf_i+0x19e>
 800845a:	2310      	movs	r3, #16
 800845c:	e7ac      	b.n	80083b8 <_printf_i+0xf4>
 800845e:	4827      	ldr	r0, [pc, #156]	@ (80084fc <_printf_i+0x238>)
 8008460:	e7e9      	b.n	8008436 <_printf_i+0x172>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	f023 0320 	bic.w	r3, r3, #32
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	e7f6      	b.n	800845a <_printf_i+0x196>
 800846c:	4616      	mov	r6, r2
 800846e:	e7bd      	b.n	80083ec <_printf_i+0x128>
 8008470:	6833      	ldr	r3, [r6, #0]
 8008472:	6825      	ldr	r5, [r4, #0]
 8008474:	6961      	ldr	r1, [r4, #20]
 8008476:	1d18      	adds	r0, r3, #4
 8008478:	6030      	str	r0, [r6, #0]
 800847a:	062e      	lsls	r6, r5, #24
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	d501      	bpl.n	8008484 <_printf_i+0x1c0>
 8008480:	6019      	str	r1, [r3, #0]
 8008482:	e002      	b.n	800848a <_printf_i+0x1c6>
 8008484:	0668      	lsls	r0, r5, #25
 8008486:	d5fb      	bpl.n	8008480 <_printf_i+0x1bc>
 8008488:	8019      	strh	r1, [r3, #0]
 800848a:	2300      	movs	r3, #0
 800848c:	6123      	str	r3, [r4, #16]
 800848e:	4616      	mov	r6, r2
 8008490:	e7bc      	b.n	800840c <_printf_i+0x148>
 8008492:	6833      	ldr	r3, [r6, #0]
 8008494:	1d1a      	adds	r2, r3, #4
 8008496:	6032      	str	r2, [r6, #0]
 8008498:	681e      	ldr	r6, [r3, #0]
 800849a:	6862      	ldr	r2, [r4, #4]
 800849c:	2100      	movs	r1, #0
 800849e:	4630      	mov	r0, r6
 80084a0:	f7f7 fe9e 	bl	80001e0 <memchr>
 80084a4:	b108      	cbz	r0, 80084aa <_printf_i+0x1e6>
 80084a6:	1b80      	subs	r0, r0, r6
 80084a8:	6060      	str	r0, [r4, #4]
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	2300      	movs	r3, #0
 80084b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b4:	e7aa      	b.n	800840c <_printf_i+0x148>
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	4632      	mov	r2, r6
 80084ba:	4649      	mov	r1, r9
 80084bc:	4640      	mov	r0, r8
 80084be:	47d0      	blx	sl
 80084c0:	3001      	adds	r0, #1
 80084c2:	d0ad      	beq.n	8008420 <_printf_i+0x15c>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	079b      	lsls	r3, r3, #30
 80084c8:	d413      	bmi.n	80084f2 <_printf_i+0x22e>
 80084ca:	68e0      	ldr	r0, [r4, #12]
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	4298      	cmp	r0, r3
 80084d0:	bfb8      	it	lt
 80084d2:	4618      	movlt	r0, r3
 80084d4:	e7a6      	b.n	8008424 <_printf_i+0x160>
 80084d6:	2301      	movs	r3, #1
 80084d8:	4632      	mov	r2, r6
 80084da:	4649      	mov	r1, r9
 80084dc:	4640      	mov	r0, r8
 80084de:	47d0      	blx	sl
 80084e0:	3001      	adds	r0, #1
 80084e2:	d09d      	beq.n	8008420 <_printf_i+0x15c>
 80084e4:	3501      	adds	r5, #1
 80084e6:	68e3      	ldr	r3, [r4, #12]
 80084e8:	9903      	ldr	r1, [sp, #12]
 80084ea:	1a5b      	subs	r3, r3, r1
 80084ec:	42ab      	cmp	r3, r5
 80084ee:	dcf2      	bgt.n	80084d6 <_printf_i+0x212>
 80084f0:	e7eb      	b.n	80084ca <_printf_i+0x206>
 80084f2:	2500      	movs	r5, #0
 80084f4:	f104 0619 	add.w	r6, r4, #25
 80084f8:	e7f5      	b.n	80084e6 <_printf_i+0x222>
 80084fa:	bf00      	nop
 80084fc:	08008904 	.word	0x08008904
 8008500:	08008915 	.word	0x08008915

08008504 <__swbuf_r>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	460e      	mov	r6, r1
 8008508:	4614      	mov	r4, r2
 800850a:	4605      	mov	r5, r0
 800850c:	b118      	cbz	r0, 8008516 <__swbuf_r+0x12>
 800850e:	6a03      	ldr	r3, [r0, #32]
 8008510:	b90b      	cbnz	r3, 8008516 <__swbuf_r+0x12>
 8008512:	f7ff fa11 	bl	8007938 <__sinit>
 8008516:	69a3      	ldr	r3, [r4, #24]
 8008518:	60a3      	str	r3, [r4, #8]
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	071a      	lsls	r2, r3, #28
 800851e:	d501      	bpl.n	8008524 <__swbuf_r+0x20>
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	b943      	cbnz	r3, 8008536 <__swbuf_r+0x32>
 8008524:	4621      	mov	r1, r4
 8008526:	4628      	mov	r0, r5
 8008528:	f000 f82a 	bl	8008580 <__swsetup_r>
 800852c:	b118      	cbz	r0, 8008536 <__swbuf_r+0x32>
 800852e:	f04f 37ff 	mov.w	r7, #4294967295
 8008532:	4638      	mov	r0, r7
 8008534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	6922      	ldr	r2, [r4, #16]
 800853a:	1a98      	subs	r0, r3, r2
 800853c:	6963      	ldr	r3, [r4, #20]
 800853e:	b2f6      	uxtb	r6, r6
 8008540:	4283      	cmp	r3, r0
 8008542:	4637      	mov	r7, r6
 8008544:	dc05      	bgt.n	8008552 <__swbuf_r+0x4e>
 8008546:	4621      	mov	r1, r4
 8008548:	4628      	mov	r0, r5
 800854a:	f7ff fcbb 	bl	8007ec4 <_fflush_r>
 800854e:	2800      	cmp	r0, #0
 8008550:	d1ed      	bne.n	800852e <__swbuf_r+0x2a>
 8008552:	68a3      	ldr	r3, [r4, #8]
 8008554:	3b01      	subs	r3, #1
 8008556:	60a3      	str	r3, [r4, #8]
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	6022      	str	r2, [r4, #0]
 800855e:	701e      	strb	r6, [r3, #0]
 8008560:	6962      	ldr	r2, [r4, #20]
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	429a      	cmp	r2, r3
 8008566:	d004      	beq.n	8008572 <__swbuf_r+0x6e>
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	07db      	lsls	r3, r3, #31
 800856c:	d5e1      	bpl.n	8008532 <__swbuf_r+0x2e>
 800856e:	2e0a      	cmp	r6, #10
 8008570:	d1df      	bne.n	8008532 <__swbuf_r+0x2e>
 8008572:	4621      	mov	r1, r4
 8008574:	4628      	mov	r0, r5
 8008576:	f7ff fca5 	bl	8007ec4 <_fflush_r>
 800857a:	2800      	cmp	r0, #0
 800857c:	d0d9      	beq.n	8008532 <__swbuf_r+0x2e>
 800857e:	e7d6      	b.n	800852e <__swbuf_r+0x2a>

08008580 <__swsetup_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4b29      	ldr	r3, [pc, #164]	@ (8008628 <__swsetup_r+0xa8>)
 8008584:	4605      	mov	r5, r0
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	460c      	mov	r4, r1
 800858a:	b118      	cbz	r0, 8008594 <__swsetup_r+0x14>
 800858c:	6a03      	ldr	r3, [r0, #32]
 800858e:	b90b      	cbnz	r3, 8008594 <__swsetup_r+0x14>
 8008590:	f7ff f9d2 	bl	8007938 <__sinit>
 8008594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008598:	0719      	lsls	r1, r3, #28
 800859a:	d422      	bmi.n	80085e2 <__swsetup_r+0x62>
 800859c:	06da      	lsls	r2, r3, #27
 800859e:	d407      	bmi.n	80085b0 <__swsetup_r+0x30>
 80085a0:	2209      	movs	r2, #9
 80085a2:	602a      	str	r2, [r5, #0]
 80085a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	e033      	b.n	8008618 <__swsetup_r+0x98>
 80085b0:	0758      	lsls	r0, r3, #29
 80085b2:	d512      	bpl.n	80085da <__swsetup_r+0x5a>
 80085b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085b6:	b141      	cbz	r1, 80085ca <__swsetup_r+0x4a>
 80085b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085bc:	4299      	cmp	r1, r3
 80085be:	d002      	beq.n	80085c6 <__swsetup_r+0x46>
 80085c0:	4628      	mov	r0, r5
 80085c2:	f7ff fafb 	bl	8007bbc <_free_r>
 80085c6:	2300      	movs	r3, #0
 80085c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085d0:	81a3      	strh	r3, [r4, #12]
 80085d2:	2300      	movs	r3, #0
 80085d4:	6063      	str	r3, [r4, #4]
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	f043 0308 	orr.w	r3, r3, #8
 80085e0:	81a3      	strh	r3, [r4, #12]
 80085e2:	6923      	ldr	r3, [r4, #16]
 80085e4:	b94b      	cbnz	r3, 80085fa <__swsetup_r+0x7a>
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f0:	d003      	beq.n	80085fa <__swsetup_r+0x7a>
 80085f2:	4621      	mov	r1, r4
 80085f4:	4628      	mov	r0, r5
 80085f6:	f000 f883 	bl	8008700 <__smakebuf_r>
 80085fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085fe:	f013 0201 	ands.w	r2, r3, #1
 8008602:	d00a      	beq.n	800861a <__swsetup_r+0x9a>
 8008604:	2200      	movs	r2, #0
 8008606:	60a2      	str	r2, [r4, #8]
 8008608:	6962      	ldr	r2, [r4, #20]
 800860a:	4252      	negs	r2, r2
 800860c:	61a2      	str	r2, [r4, #24]
 800860e:	6922      	ldr	r2, [r4, #16]
 8008610:	b942      	cbnz	r2, 8008624 <__swsetup_r+0xa4>
 8008612:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008616:	d1c5      	bne.n	80085a4 <__swsetup_r+0x24>
 8008618:	bd38      	pop	{r3, r4, r5, pc}
 800861a:	0799      	lsls	r1, r3, #30
 800861c:	bf58      	it	pl
 800861e:	6962      	ldrpl	r2, [r4, #20]
 8008620:	60a2      	str	r2, [r4, #8]
 8008622:	e7f4      	b.n	800860e <__swsetup_r+0x8e>
 8008624:	2000      	movs	r0, #0
 8008626:	e7f7      	b.n	8008618 <__swsetup_r+0x98>
 8008628:	20000018 	.word	0x20000018

0800862c <_raise_r>:
 800862c:	291f      	cmp	r1, #31
 800862e:	b538      	push	{r3, r4, r5, lr}
 8008630:	4605      	mov	r5, r0
 8008632:	460c      	mov	r4, r1
 8008634:	d904      	bls.n	8008640 <_raise_r+0x14>
 8008636:	2316      	movs	r3, #22
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008642:	b112      	cbz	r2, 800864a <_raise_r+0x1e>
 8008644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008648:	b94b      	cbnz	r3, 800865e <_raise_r+0x32>
 800864a:	4628      	mov	r0, r5
 800864c:	f000 f830 	bl	80086b0 <_getpid_r>
 8008650:	4622      	mov	r2, r4
 8008652:	4601      	mov	r1, r0
 8008654:	4628      	mov	r0, r5
 8008656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800865a:	f000 b817 	b.w	800868c <_kill_r>
 800865e:	2b01      	cmp	r3, #1
 8008660:	d00a      	beq.n	8008678 <_raise_r+0x4c>
 8008662:	1c59      	adds	r1, r3, #1
 8008664:	d103      	bne.n	800866e <_raise_r+0x42>
 8008666:	2316      	movs	r3, #22
 8008668:	6003      	str	r3, [r0, #0]
 800866a:	2001      	movs	r0, #1
 800866c:	e7e7      	b.n	800863e <_raise_r+0x12>
 800866e:	2100      	movs	r1, #0
 8008670:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008674:	4620      	mov	r0, r4
 8008676:	4798      	blx	r3
 8008678:	2000      	movs	r0, #0
 800867a:	e7e0      	b.n	800863e <_raise_r+0x12>

0800867c <raise>:
 800867c:	4b02      	ldr	r3, [pc, #8]	@ (8008688 <raise+0xc>)
 800867e:	4601      	mov	r1, r0
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	f7ff bfd3 	b.w	800862c <_raise_r>
 8008686:	bf00      	nop
 8008688:	20000018 	.word	0x20000018

0800868c <_kill_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d07      	ldr	r5, [pc, #28]	@ (80086ac <_kill_r+0x20>)
 8008690:	2300      	movs	r3, #0
 8008692:	4604      	mov	r4, r0
 8008694:	4608      	mov	r0, r1
 8008696:	4611      	mov	r1, r2
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	f7f9 fa31 	bl	8001b00 <_kill>
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	d102      	bne.n	80086a8 <_kill_r+0x1c>
 80086a2:	682b      	ldr	r3, [r5, #0]
 80086a4:	b103      	cbz	r3, 80086a8 <_kill_r+0x1c>
 80086a6:	6023      	str	r3, [r4, #0]
 80086a8:	bd38      	pop	{r3, r4, r5, pc}
 80086aa:	bf00      	nop
 80086ac:	20000618 	.word	0x20000618

080086b0 <_getpid_r>:
 80086b0:	f7f9 ba1e 	b.w	8001af0 <_getpid>

080086b4 <__swhatbuf_r>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	460c      	mov	r4, r1
 80086b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086bc:	2900      	cmp	r1, #0
 80086be:	b096      	sub	sp, #88	@ 0x58
 80086c0:	4615      	mov	r5, r2
 80086c2:	461e      	mov	r6, r3
 80086c4:	da0d      	bge.n	80086e2 <__swhatbuf_r+0x2e>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086cc:	f04f 0100 	mov.w	r1, #0
 80086d0:	bf14      	ite	ne
 80086d2:	2340      	movne	r3, #64	@ 0x40
 80086d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086d8:	2000      	movs	r0, #0
 80086da:	6031      	str	r1, [r6, #0]
 80086dc:	602b      	str	r3, [r5, #0]
 80086de:	b016      	add	sp, #88	@ 0x58
 80086e0:	bd70      	pop	{r4, r5, r6, pc}
 80086e2:	466a      	mov	r2, sp
 80086e4:	f000 f848 	bl	8008778 <_fstat_r>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	dbec      	blt.n	80086c6 <__swhatbuf_r+0x12>
 80086ec:	9901      	ldr	r1, [sp, #4]
 80086ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80086f6:	4259      	negs	r1, r3
 80086f8:	4159      	adcs	r1, r3
 80086fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086fe:	e7eb      	b.n	80086d8 <__swhatbuf_r+0x24>

08008700 <__smakebuf_r>:
 8008700:	898b      	ldrh	r3, [r1, #12]
 8008702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008704:	079d      	lsls	r5, r3, #30
 8008706:	4606      	mov	r6, r0
 8008708:	460c      	mov	r4, r1
 800870a:	d507      	bpl.n	800871c <__smakebuf_r+0x1c>
 800870c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	2301      	movs	r3, #1
 8008716:	6163      	str	r3, [r4, #20]
 8008718:	b003      	add	sp, #12
 800871a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800871c:	ab01      	add	r3, sp, #4
 800871e:	466a      	mov	r2, sp
 8008720:	f7ff ffc8 	bl	80086b4 <__swhatbuf_r>
 8008724:	9f00      	ldr	r7, [sp, #0]
 8008726:	4605      	mov	r5, r0
 8008728:	4639      	mov	r1, r7
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff faba 	bl	8007ca4 <_malloc_r>
 8008730:	b948      	cbnz	r0, 8008746 <__smakebuf_r+0x46>
 8008732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008736:	059a      	lsls	r2, r3, #22
 8008738:	d4ee      	bmi.n	8008718 <__smakebuf_r+0x18>
 800873a:	f023 0303 	bic.w	r3, r3, #3
 800873e:	f043 0302 	orr.w	r3, r3, #2
 8008742:	81a3      	strh	r3, [r4, #12]
 8008744:	e7e2      	b.n	800870c <__smakebuf_r+0xc>
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	6020      	str	r0, [r4, #0]
 800874a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008756:	b15b      	cbz	r3, 8008770 <__smakebuf_r+0x70>
 8008758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800875c:	4630      	mov	r0, r6
 800875e:	f000 f81d 	bl	800879c <_isatty_r>
 8008762:	b128      	cbz	r0, 8008770 <__smakebuf_r+0x70>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f023 0303 	bic.w	r3, r3, #3
 800876a:	f043 0301 	orr.w	r3, r3, #1
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	431d      	orrs	r5, r3
 8008774:	81a5      	strh	r5, [r4, #12]
 8008776:	e7cf      	b.n	8008718 <__smakebuf_r+0x18>

08008778 <_fstat_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4d07      	ldr	r5, [pc, #28]	@ (8008798 <_fstat_r+0x20>)
 800877c:	2300      	movs	r3, #0
 800877e:	4604      	mov	r4, r0
 8008780:	4608      	mov	r0, r1
 8008782:	4611      	mov	r1, r2
 8008784:	602b      	str	r3, [r5, #0]
 8008786:	f7f9 fa1b 	bl	8001bc0 <_fstat>
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	d102      	bne.n	8008794 <_fstat_r+0x1c>
 800878e:	682b      	ldr	r3, [r5, #0]
 8008790:	b103      	cbz	r3, 8008794 <_fstat_r+0x1c>
 8008792:	6023      	str	r3, [r4, #0]
 8008794:	bd38      	pop	{r3, r4, r5, pc}
 8008796:	bf00      	nop
 8008798:	20000618 	.word	0x20000618

0800879c <_isatty_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d06      	ldr	r5, [pc, #24]	@ (80087b8 <_isatty_r+0x1c>)
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	f7f9 fa1a 	bl	8001be0 <_isatty>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_isatty_r+0x1a>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_isatty_r+0x1a>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	20000618 	.word	0x20000618

080087bc <_gettimeofday>:
 80087bc:	4b02      	ldr	r3, [pc, #8]	@ (80087c8 <_gettimeofday+0xc>)
 80087be:	2258      	movs	r2, #88	@ 0x58
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	f04f 30ff 	mov.w	r0, #4294967295
 80087c6:	4770      	bx	lr
 80087c8:	20000618 	.word	0x20000618

080087cc <_init>:
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ce:	bf00      	nop
 80087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d2:	bc08      	pop	{r3}
 80087d4:	469e      	mov	lr, r3
 80087d6:	4770      	bx	lr

080087d8 <_fini>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	bf00      	nop
 80087dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087de:	bc08      	pop	{r3}
 80087e0:	469e      	mov	lr, r3
 80087e2:	4770      	bx	lr
